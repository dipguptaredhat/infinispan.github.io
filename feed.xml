<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2022-03-23T12:35:32-04:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">.Net Core Client version 0.0.3-beta</title><link href="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta" rel="alternate" type="text/html" title=".Net Core Client version 0.0.3-beta" /><published>2022-03-22T08:00:00-04:00</published><updated>2022-03-22T08:00:00-04:00</updated><id>https://infinispan.org/blog/2022/03/22/dotnet-core-0.0.3-beta</id><content type="html" xml:base="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners and .NET Core lovers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we&amp;#8217;re pleased to annouce the new release of the .NET Core client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release 0.0.3-beta comes with a bunch of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remote event listener.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cluster failover configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS with server cert verification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some new hotrod operations. &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/class_infinispan_1_1_hotrod_1_1_core_1_1_cache.html&quot;&gt;(Check if your favourite Hotrod op is in!)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good starting point could be the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Application&quot;&gt;sample application&lt;/a&gt;.
Documentation is growing up, temporarily placed &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts. A good place to share them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><category term="listener" /><category term="cluster failover" /><summary type="html">Dear Infinispanners and .NET Core lovers,</summary></entry><entry><title type="html">Querying Infinispan with the new .NET core client</title><link href="https://infinispan.org/blog/2022/01/21/dotnet-core-query" rel="alternate" type="text/html" title="Querying Infinispan with the new .NET core client" /><published>2022-01-21T07:00:00-05:00</published><updated>2022-01-21T07:00:00-05:00</updated><id>https://infinispan.org/blog/2022/01/21/dotnet-core-query</id><content type="html" xml:base="https://infinispan.org/blog/2022/01/21/dotnet-core-query">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners and .NET Core lovers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Time has passed, keys have been pressed and features have been implemented since
we &lt;a href=&quot;https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client&quot;&gt;presented&lt;/a&gt;,
some months ago, the new .NET core client project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To show you our progress with the project we&amp;#8217;ve decided to write a demo/tutorial on
how you can run remote queries against Infinispan Server deployments in your .NET Core application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo aims to prove the overall maturity of the client and highlight some key client features like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shipping as a NuGet package, making it easy to include in C# projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/beetlex-io/BeetleX&quot;&gt;BeetleX&lt;/a&gt; non-blocking core to add native support for concurrency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using language-neutral data types with the Protobuf media type for interoperability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to know more go to the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/query-demo&quot;&gt;demo page&lt;/a&gt; and try it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope this is a good start to 2022 for all Infinispan C# developers!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts. A good place to share them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><category term="query" /><category term="query" /><summary type="html">Dear Infinispanners and .NET Core lovers,</summary></entry><entry><title type="html">Infinispan and Log4j CVE-2021-45046 CVE-2021-45105</title><link href="https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases" rel="alternate" type="text/html" title="Infinispan and Log4j CVE-2021-45046 CVE-2021-45105" /><published>2021-12-23T07:00:00-05:00</published><updated>2021-12-23T07:00:00-05:00</updated><id>https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases</id><content type="html" xml:base="https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released &lt;a href=&quot;https://downloads.jboss.org/infinispan/13.0.5.Final/infinispan-server-13.0.5.Final.zip&quot;&gt;13.0.5.Final&lt;/a&gt;, &lt;a href=&quot;https://downloads.jboss.org/infinispan/12.1.10.Final/infinispan-server-12.1.10.Final.zip&quot;&gt;12.1.10.Final&lt;/a&gt; and &lt;a href=&quot;https://downloads.jboss.org/infinispan/11.0.3.Final/infinispan-server-11.0.14.Final.zip&quot;&gt;11.0.14.Final&lt;/a&gt; to address the latest CVEs that affect log4j-core (&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-45046&quot;&gt;CVE-2021-45046&lt;/a&gt;, &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-45105&quot;&gt;CVE-2021-45105&lt;/a&gt;). Additionally, we have released upgraded versions of the Infinispan Operator to match the server versions: 2.2.3.Final for Infinispan 13.0 and 2.1.7.Final for Infinispan 12.1.
Please upgrade as soon as you can. Refer to our &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-13597&quot;&gt;tracking Jira ISPN-13597&lt;/a&gt; for versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;whats-affected&quot; class=&quot;sect0&quot;&gt;What&amp;#8217;s affected&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We include &lt;code&gt;log4j-core&lt;/code&gt; in our server distributions, including the &lt;a href=&quot;https://quay.io/repository/infinispan/server&quot;&gt;images&lt;/a&gt;.
We are fixing the issue by upgrading to Log4J 2.17.0.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;mitigation-strategies&quot; class=&quot;sect0&quot;&gt;Mitigation strategies&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot upgrade, there are a several &lt;a href=&quot;https://logging.apache.org/log4j/2.x/security.html&quot;&gt;mitigation strategies&lt;/a&gt; you can apply. But upgrading is always the best solution.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan and Log4j CVE-2021-44228</title><link href="https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases" rel="alternate" type="text/html" title="Infinispan and Log4j CVE-2021-44228" /><published>2021-12-13T07:00:00-05:00</published><updated>2021-12-13T07:00:00-05:00</updated><id>https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases</id><content type="html" xml:base="https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released &lt;a href=&quot;https://downloads.jboss.org/infinispan/13.0.3.Final/infinispan-server-13.0.3.Final.zip&quot;&gt;13.0.3.Final&lt;/a&gt;, &lt;a href=&quot;https://downloads.jboss.org/infinispan/12.1.8.Final/infinispan-server-12.1.8.Final.zip&quot;&gt;12.1.8.Final&lt;/a&gt; and &lt;a href=&quot;https://downloads.jboss.org/infinispan/11.0.3.Final/infinispan-server-11.0.3.Final.zip&quot;&gt;11.0.13.Final&lt;/a&gt; to address the &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;very serious CVE that affects log4j-core&lt;/a&gt;. Additionally, we have released upgraded versions of the Infinispan Operator to match the server versions: 2.2.2.Final for Infinispan 13.0 and 2.1.6.Final for Infinispan 12.1.
Please upgrade as soon as you can. Refer to our &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-13562&quot;&gt;tracking Jira ISPN-13562&lt;/a&gt; for versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;whats-affected&quot; class=&quot;sect0&quot;&gt;What&amp;#8217;s affected&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We include &lt;code&gt;log4j-core&lt;/code&gt; in our server distributions, including the &lt;a href=&quot;https://quay.io/repository/infinispan/server&quot;&gt;images&lt;/a&gt;.
We are fixing the issue by upgrading to Log4J 2.15.0.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;mitigation-strategies&quot; class=&quot;sect0&quot;&gt;Mitigation strategies&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot upgrade, there are a several &lt;a href=&quot;https://www.lunasec.io/docs/blog/log4j-zero-day-mitigation-guide/&quot;&gt;mitigation strategies&lt;/a&gt; you can apply. But upgrading is always the best solution.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan Operator 2.2.0.Final</title><link href="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final" rel="alternate" type="text/html" title="Infinispan Operator 2.2.0.Final" /><published>2021-10-27T08:00:00-04:00</published><updated>2021-10-27T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/27/operator-2.2.0</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 2.2.0.Final of the Infinispan Operator&lt;/a&gt;
for Kubernetes and Red Hat OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first Operator release based on Infinispan 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Custom server configuration. Add custom configuration for Infinispan Server using ConfigMap objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable number of relay nodes for cross-site replication. Relay nodes send and receive replication requests from backup locations. You can now increase the number of relay nodes with the &lt;code&gt;sites.local.maxRelayNodes&lt;/code&gt; field to achieve a better distribution of cross-site replication requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS security for cross-site replication traffic. You can now encrypt cross-site connections between Infinispan clusters with TLS by adding keystore secrets and configuring the &lt;code&gt;sites.local.encryption&lt;/code&gt; field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operator SDK upgraded to v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="operator" /><category term="kubernetes" /><summary type="html">We&amp;#8217;re pleased to announce version 2.2.0.Final of the Infinispan Operator for Kubernetes and Red Hat OpenShift.</summary></entry><entry><title type="html">Infinispan 13.0.0.Final</title><link href="https://infinispan.org/blog/2021/10/12/infinispan-13-final" rel="alternate" type="text/html" title="Infinispan 13.0.0.Final" /><published>2021-10-12T20:00:00-04:00</published><updated>2021-10-12T20:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/12/infinispan-13.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/12/infinispan-13-final">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) 'thirteen', and Ancient Greek φόβος (phóbos) 'fear') is fear or avoidance of the number 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as you should know by now, the Infinispan team is fearless, and for this reason we are not afraid to proudly announce “Infinispan 13 (Triskaidekaphobia)”. In the grand tradition of our codenames, this one also happens to be the name of a beer (&lt;a href=&quot;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&quot; class=&quot;bare&quot;&gt;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/triskaidekaphobia.jpg&quot; alt=&quot;Triskaidekaphobia&quot; width=&quot;466&quot; height=&quot;325&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, don&amp;#8217;t be scared and let&amp;#8217;s dive into all the new great things that are in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core&quot;&gt;Core&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Polyglot configuration&lt;/strong&gt;: XML, JSON and YAML can now be used interchangeably to configure every part of Infinispan. Here is an example of how to configure a cache with eviction and Protobuf encoding:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;distributed-cache&amp;gt;
  &amp;lt;encoding media-type=&quot;application/x-protostream&quot;/&amp;gt;
  &amp;lt;memory max-size=&quot;1.5GB&quot; when-full=&quot;REMOVE&quot;/&amp;gt;
&amp;lt;/distributed-cache&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;distributed-cache&quot; : {
    &quot;encoding&quot; : {
      &quot;media-type&quot; : &quot;application/x-protostream&quot;
    },
    &quot;memory&quot; : {
      &quot;max-size&quot; : &quot;1.5GB&quot;,
      &quot;when-full&quot; : &quot;REMOVE&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;distributedCache:
  encoding:
    mediaType: &quot;application/x-protostream&quot;
  memory:
    maxSize: &quot;1.5GB&quot;
    whenFull: &quot;REMOVE&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Max-idle asynchronous touch&lt;/strong&gt;: max-idle expiration makes reading an entry behave like a write: all owners must update the last access timestamp. With asynchronous touch the reader does not wait for their confirmation, and reading a max-idle entry is as fast as reading any other entry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Metrics for cache size are now optional&lt;/strong&gt;: calculating the accurate size of a cache is an expensive operation. Starting with this release, &lt;code&gt;currentNumberOfEntries&lt;/code&gt; and &lt;code&gt;currentNumberOfEntriesInMemory&lt;/code&gt; and &lt;code&gt;totalNumberOfEntries&lt;/code&gt; will return &lt;code&gt;-1&lt;/code&gt; by default. You can re-enable accurate computation of these metrics if you really need them. We will be adding high-performance estimates for these metrics in a future release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delete by query&lt;/strong&gt;: Ickle (Infinispan&amp;#8217;s query language) now supports &lt;code&gt;DELETE FROM&lt;/code&gt; queries using all of the supported clauses, both for indexed and non-indexed caches:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;query.create(&quot;DELETE FROM books WHERE page_count &amp;gt; 500&quot;).executeStatement();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Soft-index file store is now our default persistent file-based cache store. Compared to the old single-file store, it no longer needs to store all keys in memory, plus it supports persistent memory via the awesome &lt;a href=&quot;https://github.com/jhalliday/mashona&quot;&gt;Mashona&lt;/a&gt; library. Old file stores will be automatically migrated on first use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SQL cache store&lt;/strong&gt; which maps database tables and queries to Protobuf, greatly simplifying accessing your existing data. For example, you can expose a single table &lt;code&gt;books&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;table-jdbc-store table-name=&quot;books&quot;&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/table-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use your own queries&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;query-jdbc-store&amp;gt;
    &amp;lt;queries key-columns=&quot;isbn&quot;&amp;gt;
        &amp;lt;select-single&amp;gt;SELECT isbn, title FROM books WHERE isbn = :isbn&amp;lt;/select-single&amp;gt;
        &amp;lt;select-all&amp;gt;SELECT isbn, title FROM books&amp;lt;/select-all&amp;gt;
        &amp;lt;delete&amp;gt;DELETE FROM books WHERE isbn = :key&amp;lt;/delete&amp;gt;
        &amp;lt;delete-all&amp;gt;DELETE FROM books&amp;lt;/delete-all&amp;gt;
        &amp;lt;upsert&amp;gt;INSERT INTO books (isbn, title) VALUES (:key, :value) ON CONFLICT (isbn) DO UPDATE SET title = :value&amp;lt;/upsert&amp;gt;
        &amp;lt;size&amp;gt;SELECT COUNT(*) FROM books&amp;lt;/size&amp;gt;
    &amp;lt;/queries&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/query-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration overlays&lt;/strong&gt;: you can specify multiple configuration files, in any of the supported formats, and they will be combined to form the final configuration. You can even mix formats:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;server.sh -c base.xml -c layer.yml -c custom.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutable cache configuration&lt;/strong&gt;: you can now update cache configurations cluster-wide at runtime with the CLI. The following example changes the maximum number of entries of a cache:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;alter cache mycache --attribute=memory.max-count --value=10000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thread Pool Consolidation&lt;/strong&gt;: The prior Infinispan non blocking thread pool has been consolidated with the Netty event loop reducing the number of threads required in the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REST listeners&lt;/strong&gt;: It is now possible to listen to cache events over HTTP using Server-Sent Events.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl --digest -u user:password -N http://127.0.0.1:11222/rest/v2/caches/mycache?action=listen
event: cache-entry-created
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-modified
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-removed
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rebalancing management&lt;/strong&gt;: control cluster re-balancing from the REST API, CLI, and Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simple TLS for clustering&lt;/strong&gt;: Infinispan Server can automatically enable TLS for the cluster transport simply by specifying a security realm with a keystore/truststore server identity:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;cache-container name=&quot;default&quot; statistics=&quot;true&quot;&amp;gt;
  &amp;lt;transport cluster=&quot;cluster&quot; server:security-realm=&quot;cluster&quot;/&amp;gt;
&amp;lt;/cache-container&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distributed Security Realm&lt;/strong&gt;: a server security realm which can aggregate multiple sub-realms, trying each one in turn. For example, you can use this to support both certificate and password authentication on the same server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEM key/trust stores&lt;/strong&gt;: Support for PEM files for both keys and certificates without the need to convert them to Java keystores first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support for TLSv1.3 via native OpenSSL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cluster-migration&quot;&gt;Cluster Migration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve done quite a lot of work on the cluster igration operations, making the process smoother from the REST API, CLI, and with our Kubernetes Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manually changing configurations of the cache(s) is no longer necessary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New methods in the REST API to control the migration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches created dynamically are now supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplified configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improve cross-site replication observability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cross-site view (sorted list of site names currently online) and relay-nodes (members who are responsible for relaying messages between sites) are now exposed via CLI/REST/JMX.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detailed metrics exposed per site and per cache (response times, number of messages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve some error messages with more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-console&quot;&gt;Infinispan Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encoding-aware entry editing&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingTextCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingTextCache.png&quot; alt=&quot;Text caches&quot; width=&quot;550&quot; height=&quot;278&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingProtobufCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingProtobufCache.png&quot; alt=&quot;Protobuf caches&quot; width=&quot;550&quot; height=&quot;390&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebalancing operations per-cache and per-cluster&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancingOffClusterLevel.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancingOffClusterLevel.png&quot; alt=&quot;Managing rebalancing at the cluster level&quot; width=&quot;550&quot; height=&quot;395&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-1.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;386&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-2.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;369&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud&quot;&gt;Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Helm charts&lt;/strong&gt;: create Infinispan clusters with a Helm chart that lets you specify values for build and deployment configuration. Server configuration is declared using Yaml in .Values. This allows the server configuration to be customized entirely without having to update helm-chart templates locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;: many fixes and improvements:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Migrated operator-sdk from v0.18.0 &amp;#8594; v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrated packagemanifest &amp;#8594; OLM bundle format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;K8s 1.22 deprecated APIs removed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kubernetes-cli&quot;&gt;Kubernetes CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easily connect a CLI to an operator-managed Infinispan cluster without having to specify connection details:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl infinispan shell -n default mycluster
[mycluster-0-37266@mycluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An InfinispanContainer which makes it easy to test your applications via the awesome &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt; library&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (InfinispanContainer container = new InfinispanContainer()) {
  container.start();
    try (RemoteCacheManager cacheManager = container.getRemoteCacheManager()) {
      RemoteCache&amp;lt;Object, Object&amp;gt; testCache = cacheManager.administration().getOrCreateCache(&quot;test&quot;, DefaultTemplate.DIST_SYNC);
      testCache.put(&quot;key&quot;, &quot;value&quot;);
      assertEquals(&quot;value&quot;, testCache.get(&quot;key&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clustered-counters&quot;&gt;Clustered Counters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strong counters can now expire (experimental). The counter value is reset to its initial value which may be useful to code a cluster-wide rate limiter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works with JDK 17 (and still works with JDK 8 and JDK 11)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of bug fixes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-tutorials&quot;&gt;Documentation and tutorials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated cache configuration docs with tabbed examples with JSON and YAML.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added new guides for indexing and querying caches, Hot Rod clients, and Helm charts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-organized Infinispan simple tutorials as part of the ongoing effort to clearly separate remote caches from embedded caches in our content. Infinispan simple tutorials now have their own documentation on our site at: &lt;a href=&quot;https://infinispan.org/tutorials/simple/simple_tutorials.html&quot; class=&quot;bare&quot;&gt;https://infinispan.org/tutorials/simple/simple_tutorials.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated documentation for configuring persistent cache stores and JVM memory management, including revisions to improve style, grammar, and provide high-level scanning and readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaced the Integration Guide with a dedicated guide for Spring users as well as a guide for Hibernate caches. We’ve also linked to community projects with Quarkus, Vert.x, Keycloak, Camel, and WildFly. Check out the new Integrations category on the docs home page at: &lt;a href=&quot;https://infinispan.org/documentation/&quot; class=&quot;bare&quot;&gt;https://infinispan.org/documentation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be sure to read through &lt;a href=&quot;https://infinispan.org/docs/13.0.x/titles/upgrading/upgrading.html&quot;&gt;Upgrading Infinispan&lt;/a&gt; before getting started with lucky 13.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) 'thirteen', and Ancient Greek φόβος (phóbos) 'fear') is fear or avoidance of the number 13.</summary></entry><entry><title type="html">Infinispan 13.0.0.CR1</title><link href="https://infinispan.org/blog/2021/09/23/infinispan-13-cr1" rel="alternate" type="text/html" title="Infinispan 13.0.0.CR1" /><published>2021-09-23T08:00:00-04:00</published><updated>2021-09-23T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/09/23/infinispan-13.0.0.CR1</id><content type="html" xml:base="https://infinispan.org/blog/2021/09/23/infinispan-13-cr1">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released 13.0.0.CR1 which brings you several new features along with a number of enhancements and bug fixes.
Here is a non-exhaustive list of Infinispan 13 has in store:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mutable-cache-configuration&quot;&gt;Mutable cache configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now update cache configuration at runtime with the CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improved-cluster-upgrades&quot;&gt;Improved cluster upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve done quite a lot of work on rolling upgrade operations in Infinispan 13, making the process smoother from the REST API, CLI, and with our Kubernetes Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;re-balancing-operations&quot;&gt;Re-balancing operations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Control cluster topology re-balancing from the REST API, CLI, and Console.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistent-storage-improvements&quot;&gt;Persistent storage improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File-based caches stores now default to SoftIndexFileStore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ve added a new SQL cache store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For global Infinispan clusters, this release brings a number of improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cross-site replication operations from the Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional statistics for increased observability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better logging details for cross-site cluster views.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simplified-server-cluster-security&quot;&gt;Simplified server cluster security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Server can automatically enable SSL for the cluster transport.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;queries&quot;&gt;Queries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added support for local query operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helm-charts&quot;&gt;Helm charts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve added an Infinispan Helm chart for deploying clusters to Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-tutorials&quot;&gt;Documentation and tutorials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve made a number of documentation improvements this release, including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new guide for Hot Rod JS clients.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better organization and documentation for Infinispan simple tutorials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaced the Integration Guide with a dedicated guide for Spring users as well as a guide for Hibernate caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A brand new guide for Indexing and Querying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overhauled and updated Configuration Guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional JSON and YAML configuration examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan Node.js client supports authentication</title><link href="https://infinispan.org/blog/2021/06/29/infinispan-js-client" rel="alternate" type="text/html" title="Infinispan Node.js client supports authentication" /><published>2021-06-29T08:00:00-04:00</published><updated>2021-06-29T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/29/js-client</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/29/infinispan-js-client">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;node-js-client-0-9-0&quot;&gt;Node.js Client 0.9.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Node.js client version 0.9.0 was released last week with added support for different SASL authentication mechanisms.
Up to now, our Node.js client could connect to Infinispan Server security realms with disabled authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;digest-md5&quot;&gt;DIGEST-MD5&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses the MD5 hashing algorithm in addition to nonces to encrypt credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;scram&quot;&gt;SCRAM&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses salt values in addition to hashing algorithms and nonce values to encrypt credentials. Hot Rod endpoints support SCRAM-SHA-1, SCRAM-SHA-256, SCRAM-SHA-384, SCRAM-SHA-512 hashing algorithms, in order of strength.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;external&quot;&gt;EXTERNAL&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses client certificates to provide valid identities to Infinispan Server and enable encryption.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;oauthbearer&quot;&gt;OAUTHBEARER&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses tokens obtained via an OAuth 2.0 provider to securely connect to Infinispan Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;plain&quot;&gt;PLAIN:&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sends credentials in plain text (unencrypted) over the wire in a way that is similar to HTTP BASIC authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To secure Infinispan credentials, you should use PLAIN authentication only in combination with TLS encryption.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-the-infinispan-server&quot;&gt;Run the Infinispan Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Run the Infinispan Server with Docker or Podman&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -it -p 11222:11222 -e USER=&quot;admin&quot; -e PASS=&quot;password&quot; quay.io/infinispan/server:12.1

podman run -it -p 11222:11222 -e USER=&quot;admin&quot; -e PASS=&quot;password&quot; --net=host quay.io/infinispan/server:12.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are using Docker for Mac, there is a known limitation. You will need to &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download
the server distribution&lt;/a&gt; and run the server manually.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Run the Infinispan Server from the file system&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./bin/cli.sh user create admin -p password
./bin/server.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-a-cache-from-infinispan-console&quot;&gt;Create a cache from Infinispan Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access the Infinispan Console in &lt;a href=&quot;http://localhost:11222/&quot;&gt;http://localhost:11222/&lt;/a&gt; and create a text based
cache, named it 'my-cache' with the provided configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Connect to Infinispan&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;distributed-cache&quot;: {
    &quot;mode&quot;: &quot;SYNC&quot;,
    &quot;encoding&quot;: {
      &quot;media-type&quot;: &quot;text/plain&quot;
    },
    &quot;statistics&quot;: true
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-the-node-js-client-in-your-application&quot;&gt;Use the Node.js client in your application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the dependency to your project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;package.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;dependencies&quot;: {
&quot;infinispan&quot;: &quot;^0.9.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configure the Infinispan Node.js client to connect with authentication and then check the created cache entry from the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;application.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var connected = infinispan.client({port: 11222, host: '127.0.0.1'},
{
    cacheName: 'my-cache',
    authentication: {
        enabled: true,
        saslMechanism: 'DIGEST-MD5',
        userName: 'admin',
        password: 'password'
    }
});

connected.then(function (client) {
    return client.put('key', 'value')
    .finally(function() {
    return client.disconnect();
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;to-go-further&quot;&gt;To go further&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full client documentation is now available in the
&lt;a href=&quot;https://infinispan.org/docs/hotrod-clients/js/latest/js_client.html&quot;&gt;Hot Rod JS Client Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jira tracker for this client is available &lt;a href=&quot;https://issues.redhat.com/projects/HRJS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="hotrod" /><category term="Node.js" /><category term="client" /><category term="javascript" /><category term="release" /><summary type="html">Node.js Client 0.9.0</summary></entry><entry><title type="html">An Infinispan .Net Core client over the Hot Rod protocol</title><link href="https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client" rel="alternate" type="text/html" title="An Infinispan .Net Core client over the Hot Rod protocol" /><published>2021-06-21T08:00:00-04:00</published><updated>2021-06-21T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/21/dotnet-core-client</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team would like to share a new project we&amp;#8217;re working on: &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our current .NET client is based on the C&amp;#43;&amp;#43; core implementation, which is a solution that has its pros and cons.
It makes it easier to guarantee parity between the C&amp;#43;&amp;#43; and C# clients over the time, but has the drawback of tying clients to specific a architecture.
In turn that complicates portability and distribution, making the release lifecycle for those clients more onerous and sluggish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt; is a 100% C# Hot Rod client designed with the aim of being portable across
systems via the .Net Core platform and easier to deploy and consume via the Nuget platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are involved with the .NET Core ecosystem we hope you will find this project of interest. Entry points for the project are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt;, current status and news;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Core.XUnitTest&quot;&gt;XUnit test&lt;/a&gt;, this will contain the same testsuite of the
current &lt;a href=&quot;https://github.com/infinispan/dotnet-client&quot;&gt;.NET client&lt;/a&gt; project with the aim of making it easier to compare with the .NET core client as it matures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Application&quot;&gt;Sample Application&lt;/a&gt;, an example of project which uses the client package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/packages/Infinispan.Hotrod.Core/&quot;&gt;Nuget&lt;/a&gt; is where the package is published.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope this will makes C# developers happy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts, a good place for them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><summary type="html">Dear Infinispanners,</summary></entry><entry><title type="html">Infinispan (Red Hat Data Grid) featured again in Red Hat Developers</title><link href="https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus" rel="alternate" type="text/html" title="Infinispan (Red Hat Data Grid) featured again in Red Hat Developers" /><published>2021-06-08T08:00:00-04:00</published><updated>2021-06-08T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus-part-two</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan Community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team is pleased to share the follow up article published on the Red Hat Developer blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part two of a two-part series of articles, this blog post focuses on how
the &lt;a href=&quot;https://infinispan.org/docs/infinispan-operator/master/operator.html&quot;&gt;Infinispan Operator&lt;/a&gt; was used to create
all the configuration and deployment descriptors for the online hybrid-cloud Battleship game that featured
at this year&amp;#8217;s Red Hat Summit Keynote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;You can read the blog post &lt;a href=&quot;https://developers.redhat.com/articles/2021/06/08/create-and-manage-red-hat-data-grid-services-hybrid-cloud&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Operator is available from the &lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;Operator Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy your reading!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="redhat" /><category term="datagrid" /><category term="quarkus" /><category term="operator" /><summary type="html">Dear Infinispan Community,</summary></entry></feed>