<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2021-11-09T03:05:08-05:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Infinispan Operator 2.2.0.Final</title><link href="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final" rel="alternate" type="text/html" title="Infinispan Operator 2.2.0.Final" /><published>2021-10-27T08:00:00-04:00</published><updated>2021-10-27T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/27/operator-2.2.0</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 2.2.0.Final of the Infinispan Operator&lt;/a&gt;
for Kubernetes and Red Hat OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first Operator release based on Infinispan 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Custom server configuration. Add custom configuration for Infinispan Server using ConfigMap objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable number of relay nodes for cross-site replication. Relay nodes send and receive replication requests from backup locations. You can now increase the number of relay nodes with the &lt;code&gt;sites.local.maxRelayNodes&lt;/code&gt; field to achieve a better distribution of cross-site replication requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS security for cross-site replication traffic. You can now encrypt cross-site connections between Infinispan clusters with TLS by adding keystore secrets and configuring the &lt;code&gt;sites.local.encryption&lt;/code&gt; field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operator SDK upgraded to v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="operator" /><category term="kubernetes" /><summary type="html">We&amp;#8217;re pleased to announce version 2.2.0.Final of the Infinispan Operator for Kubernetes and Red Hat OpenShift.</summary></entry><entry><title type="html">Infinispan 13.0.0.Final</title><link href="https://infinispan.org/blog/2021/10/12/infinispan-13-final" rel="alternate" type="text/html" title="Infinispan 13.0.0.Final" /><published>2021-10-12T20:00:00-04:00</published><updated>2021-10-12T20:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/12/infinispan-13.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/12/infinispan-13-final">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) 'thirteen', and Ancient Greek φόβος (phóbos) 'fear') is fear or avoidance of the number 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as you should know by now, the Infinispan team is fearless, and for this reason we are not afraid to proudly announce “Infinispan 13 (Triskaidekaphobia)”. In the grand tradition of our codenames, this one also happens to be the name of a beer (&lt;a href=&quot;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&quot; class=&quot;bare&quot;&gt;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/triskaidekaphobia.jpg&quot; alt=&quot;Triskaidekaphobia&quot; width=&quot;466&quot; height=&quot;325&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, don&amp;#8217;t be scared and let&amp;#8217;s dive into all the new great things that are in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core&quot;&gt;Core&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Polyglot configuration&lt;/strong&gt;: XML, JSON and YAML can now be used interchangeably to configure every part of Infinispan. Here is an example of how to configure a cache with eviction and Protobuf encoding:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;distributed-cache&amp;gt;
  &amp;lt;encoding media-type=&quot;application/x-protostream&quot;/&amp;gt;
  &amp;lt;memory max-size=&quot;1.5GB&quot; when-full=&quot;REMOVE&quot;/&amp;gt;
&amp;lt;/distributed-cache&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;distributed-cache&quot; : {
    &quot;encoding&quot; : {
      &quot;media-type&quot; : &quot;application/x-protostream&quot;
    },
    &quot;memory&quot; : {
      &quot;max-size&quot; : &quot;1.5GB&quot;,
      &quot;when-full&quot; : &quot;REMOVE&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;distributedCache:
  encoding:
    mediaType: &quot;application/x-protostream&quot;
  memory:
    maxSize: &quot;1.5GB&quot;
    whenFull: &quot;REMOVE&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Max-idle asynchronous touch&lt;/strong&gt;: max-idle expiration makes reading an entry behave like a write: all owners must update the last access timestamp. With asynchronous touch the reader does not wait for their confirmation, and reading a max-idle entry is as fast as reading any other entry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Metrics for cache size are now optional&lt;/strong&gt;: calculating the accurate size of a cache is an expensive operation. Starting with this release, &lt;code&gt;currentNumberOfEntries&lt;/code&gt; and &lt;code&gt;currentNumberOfEntriesInMemory&lt;/code&gt; and &lt;code&gt;totalNumberOfEntries&lt;/code&gt; will return &lt;code&gt;-1&lt;/code&gt; by default. You can re-enable accurate computation of these metrics if you really need them. We will be adding high-performance estimates for these metrics in a future release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delete by query&lt;/strong&gt;: Ickle (Infinispan&amp;#8217;s query language) now supports &lt;code&gt;DELETE FROM&lt;/code&gt; queries using all of the supported clauses, both for indexed and non-indexed caches:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;query.create(&quot;DELETE FROM books WHERE page_count &amp;gt; 500&quot;).executeStatement();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Soft-index file store is now our default persistent file-based cache store. Compared to the old single-file store, it no longer needs to store all keys in memory, plus it supports persistent memory via the awesome &lt;a href=&quot;https://github.com/jhalliday/mashona&quot;&gt;Mashona&lt;/a&gt; library. Old file stores will be automatically migrated on first use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SQL cache store&lt;/strong&gt; which maps database tables and queries to Protobuf, greatly simplifying accessing your existing data. For example, you can expose a single table &lt;code&gt;books&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;table-jdbc-store table-name=&quot;books&quot;&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/table-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use your own queries&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;query-jdbc-store&amp;gt;
    &amp;lt;queries key-columns=&quot;isbn&quot;&amp;gt;
        &amp;lt;select-single&amp;gt;SELECT isbn, title FROM books WHERE isbn = :isbn&amp;lt;/select-single&amp;gt;
        &amp;lt;select-all&amp;gt;SELECT isbn, title FROM books&amp;lt;/select-all&amp;gt;
        &amp;lt;delete&amp;gt;DELETE FROM books WHERE isbn = :key&amp;lt;/delete&amp;gt;
        &amp;lt;delete-all&amp;gt;DELETE FROM books&amp;lt;/delete-all&amp;gt;
        &amp;lt;upsert&amp;gt;INSERT INTO books (isbn, title) VALUES (:key, :value) ON CONFLICT (isbn) DO UPDATE SET title = :value&amp;lt;/upsert&amp;gt;
        &amp;lt;size&amp;gt;SELECT COUNT(*) FROM books&amp;lt;/size&amp;gt;
    &amp;lt;/queries&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/query-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration overlays&lt;/strong&gt;: you can specify multiple configuration files, in any of the supported formats, and they will be combined to form the final configuration. You can even mix formats:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;server.sh -c base.xml -c layer.yml -c custom.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutable cache configuration&lt;/strong&gt;: you can now update cache configurations cluster-wide at runtime with the CLI. The following example changes the maximum number of entries of a cache:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;alter cache mycache --attribute=memory.max-count --value=10000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thread Pool Consolidation&lt;/strong&gt;: The prior Infinispan non blocking thread pool has been consolidated with the Netty event loop reducing the number of threads required in the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REST listeners&lt;/strong&gt;: It is now possible to listen to cache events over HTTP using Server-Sent Events.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl --digest -u user:password -N http://127.0.0.1:11222/rest/v2/caches/mycache?action=listen
event: cache-entry-created
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-modified
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-removed
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rebalancing management&lt;/strong&gt;: control cluster re-balancing from the REST API, CLI, and Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simple TLS for clustering&lt;/strong&gt;: Infinispan Server can automatically enable TLS for the cluster transport simply by specifying a security realm with a keystore/truststore server identity:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;cache-container name=&quot;default&quot; statistics=&quot;true&quot;&amp;gt;
  &amp;lt;transport cluster=&quot;cluster&quot; server:security-realm=&quot;cluster&quot;/&amp;gt;
&amp;lt;/cache-container&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distributed Security Realm&lt;/strong&gt;: a server security realm which can aggregate multiple sub-realms, trying each one in turn. For example, you can use this to support both certificate and password authentication on the same server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEM key/trust stores&lt;/strong&gt;: Support for PEM files for both keys and certificates without the need to convert them to Java keystores first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support for TLSv1.3 via native OpenSSL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cluster-migration&quot;&gt;Cluster Migration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve done quite a lot of work on the cluster igration operations, making the process smoother from the REST API, CLI, and with our Kubernetes Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manually changing configurations of the cache(s) is no longer necessary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New methods in the REST API to control the migration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches created dynamically are now supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplified configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improve cross-site replication observability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cross-site view (sorted list of site names currently online) and relay-nodes (members who are responsible for relaying messages between sites) are now exposed via CLI/REST/JMX.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detailed metrics exposed per site and per cache (response times, number of messages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve some error messages with more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-console&quot;&gt;Infinispan Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encoding-aware entry editing&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingTextCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingTextCache.png&quot; alt=&quot;Text caches&quot; width=&quot;550&quot; height=&quot;278&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingProtobufCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingProtobufCache.png&quot; alt=&quot;Protobuf caches&quot; width=&quot;550&quot; height=&quot;390&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebalancing operations per-cache and per-cluster&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancingOffClusterLevel.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancingOffClusterLevel.png&quot; alt=&quot;Managing rebalancing at the cluster level&quot; width=&quot;550&quot; height=&quot;395&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-1.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;386&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-2.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;369&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud&quot;&gt;Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Helm charts&lt;/strong&gt;: create Infinispan clusters with a Helm chart that lets you specify values for build and deployment configuration. Server configuration is declared using Yaml in .Values. This allows the server configuration to be customized entirely without having to update helm-chart templates locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;: many fixes and improvements:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Migrated operator-sdk from v0.18.0 &amp;#8594; v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrated packagemanifest &amp;#8594; OLM bundle format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;K8s 1.22 deprecated APIs removed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kubernetes-cli&quot;&gt;Kubernetes CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easily connect a CLI to an operator-managed Infinispan cluster without having to specify connection details:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl infinispan shell -n default mycluster
[mycluster-0-37266@mycluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An InfinispanContainer which makes it easy to test your applications via the awesome &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt; library&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (InfinispanContainer container = new InfinispanContainer()) {
  container.start();
    try (RemoteCacheManager cacheManager = container.getRemoteCacheManager()) {
      RemoteCache&amp;lt;Object, Object&amp;gt; testCache = cacheManager.administration().getOrCreateCache(&quot;test&quot;, DefaultTemplate.DIST_SYNC);
      testCache.put(&quot;key&quot;, &quot;value&quot;);
      assertEquals(&quot;value&quot;, testCache.get(&quot;key&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clustered-counters&quot;&gt;Clustered Counters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strong counters can now expire (experimental). The counter value is reset to its initial value which may be useful to code a cluster-wide rate limiter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works with JDK 17 (and still works with JDK 8 and JDK 11)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of bug fixes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-tutorials&quot;&gt;Documentation and tutorials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated cache configuration docs with tabbed examples with JSON and YAML.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added new guides for indexing and querying caches, Hot Rod clients, and Helm charts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-organized Infinispan simple tutorials as part of the ongoing effort to clearly separate remote caches from embedded caches in our content. Infinispan simple tutorials now have their own documentation on our site at: &lt;a href=&quot;https://infinispan.org/tutorials/simple/simple_tutorials.html&quot; class=&quot;bare&quot;&gt;https://infinispan.org/tutorials/simple/simple_tutorials.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated documentation for configuring persistent cache stores and JVM memory management, including revisions to improve style, grammar, and provide high-level scanning and readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaced the Integration Guide with a dedicated guide for Spring users as well as a guide for Hibernate caches. We’ve also linked to community projects with Quarkus, Vert.x, Keycloak, Camel, and WildFly. Check out the new Integrations category on the docs home page at: &lt;a href=&quot;https://infinispan.org/documentation/&quot; class=&quot;bare&quot;&gt;https://infinispan.org/documentation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be sure to read through &lt;a href=&quot;https://infinispan.org/docs/13.0.x/titles/upgrading/upgrading.html&quot;&gt;Upgrading Infinispan&lt;/a&gt; before getting started with lucky 13.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) 'thirteen', and Ancient Greek φόβος (phóbos) 'fear') is fear or avoidance of the number 13.</summary></entry><entry><title type="html">Infinispan 13.0.0.CR1</title><link href="https://infinispan.org/blog/2021/09/23/infinispan-13-cr1" rel="alternate" type="text/html" title="Infinispan 13.0.0.CR1" /><published>2021-09-23T08:00:00-04:00</published><updated>2021-09-23T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/09/23/infinispan-13.0.0.CR1</id><content type="html" xml:base="https://infinispan.org/blog/2021/09/23/infinispan-13-cr1">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released 13.0.0.CR1 which brings you several new features along with a number of enhancements and bug fixes.
Here is a non-exhaustive list of Infinispan 13 has in store:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mutable-cache-configuration&quot;&gt;Mutable cache configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now update cache configuration at runtime with the CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improved-cluster-upgrades&quot;&gt;Improved cluster upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve done quite a lot of work on rolling upgrade operations in Infinispan 13, making the process smoother from the REST API, CLI, and with our Kubernetes Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;re-balancing-operations&quot;&gt;Re-balancing operations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Control cluster topology re-balancing from the REST API, CLI, and Console.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistent-storage-improvements&quot;&gt;Persistent storage improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File-based caches stores now default to SoftIndexFileStore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ve added a new SQL cache store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For global Infinispan clusters, this release brings a number of improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cross-site replication operations from the Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional statistics for increased observability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better logging details for cross-site cluster views.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simplified-server-cluster-security&quot;&gt;Simplified server cluster security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Server can automatically enable SSL for the cluster transport.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;queries&quot;&gt;Queries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added support for local query operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helm-charts&quot;&gt;Helm charts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve added an Infinispan Helm chart for deploying clusters to Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-tutorials&quot;&gt;Documentation and tutorials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve made a number of documentation improvements this release, including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new guide for Hot Rod JS clients.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better organization and documentation for Infinispan simple tutorials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaced the Integration Guide with a dedicated guide for Spring users as well as a guide for Hibernate caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A brand new guide for Indexing and Querying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overhauled and updated Configuration Guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional JSON and YAML configuration examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan Node.js client supports authentication</title><link href="https://infinispan.org/blog/2021/06/29/infinispan-js-client" rel="alternate" type="text/html" title="Infinispan Node.js client supports authentication" /><published>2021-06-29T08:00:00-04:00</published><updated>2021-06-29T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/29/js-client</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/29/infinispan-js-client">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;node-js-client-0-9-0&quot;&gt;Node.js Client 0.9.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Node.js client version 0.9.0 was released last week with added support for different SASL authentication mechanisms.
Up to now, our Node.js client could connect to Infinispan Server security realms with disabled authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;digest-md5&quot;&gt;DIGEST-MD5&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses the MD5 hashing algorithm in addition to nonces to encrypt credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;scram&quot;&gt;SCRAM&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses salt values in addition to hashing algorithms and nonce values to encrypt credentials. Hot Rod endpoints support SCRAM-SHA-1, SCRAM-SHA-256, SCRAM-SHA-384, SCRAM-SHA-512 hashing algorithms, in order of strength.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;external&quot;&gt;EXTERNAL&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses client certificates to provide valid identities to Infinispan Server and enable encryption.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;oauthbearer&quot;&gt;OAUTHBEARER&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uses tokens obtained via an OAuth 2.0 provider to securely connect to Infinispan Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;plain&quot;&gt;PLAIN:&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sends credentials in plain text (unencrypted) over the wire in a way that is similar to HTTP BASIC authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To secure Infinispan credentials, you should use PLAIN authentication only in combination with TLS encryption.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-the-infinispan-server&quot;&gt;Run the Infinispan Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Run the Infinispan Server with Docker or Podman&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -it -p 11222:11222 -e USER=&quot;admin&quot; -e PASS=&quot;password&quot; quay.io/infinispan/server:12.1

podman run -it -p 11222:11222 -e USER=&quot;admin&quot; -e PASS=&quot;password&quot; --net=host quay.io/infinispan/server:12.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are using Docker for Mac, there is a known limitation. You will need to &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download
the server distribution&lt;/a&gt; and run the server manually.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Run the Infinispan Server from the file system&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./bin/cli.sh user create admin -p password
./bin/server.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-a-cache-from-infinispan-console&quot;&gt;Create a cache from Infinispan Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access the Infinispan Console in &lt;a href=&quot;http://localhost:11222/&quot;&gt;http://localhost:11222/&lt;/a&gt; and create a text based
cache, named it 'my-cache' with the provided configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Connect to Infinispan&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;distributed-cache&quot;: {
    &quot;mode&quot;: &quot;SYNC&quot;,
    &quot;encoding&quot;: {
      &quot;media-type&quot;: &quot;text/plain&quot;
    },
    &quot;statistics&quot;: true
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-the-node-js-client-in-your-application&quot;&gt;Use the Node.js client in your application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the dependency to your project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;package.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;dependencies&quot;: {
&quot;infinispan&quot;: &quot;^0.9.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configure the Infinispan Node.js client to connect with authentication and then check the created cache entry from the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;application.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var connected = infinispan.client({port: 11222, host: '127.0.0.1'},
{
    cacheName: 'my-cache',
    authentication: {
        enabled: true,
        saslMechanism: 'DIGEST-MD5',
        userName: 'admin',
        password: 'password'
    }
});

connected.then(function (client) {
    return client.put('key', 'value')
    .finally(function() {
    return client.disconnect();
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;to-go-further&quot;&gt;To go further&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full client documentation is now available in the
&lt;a href=&quot;https://infinispan.org/docs/hotrod-clients/js/latest/js_client.html&quot;&gt;Hot Rod JS Client Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jira tracker for this client is available &lt;a href=&quot;https://issues.redhat.com/projects/HRJS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="hotrod" /><category term="Node.js" /><category term="client" /><category term="javascript" /><category term="release" /><summary type="html">Node.js Client 0.9.0</summary></entry><entry><title type="html">An Infinispan .Net Core client over the Hot Rod protocol</title><link href="https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client" rel="alternate" type="text/html" title="An Infinispan .Net Core client over the Hot Rod protocol" /><published>2021-06-21T08:00:00-04:00</published><updated>2021-06-21T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/21/dotnet-core-client</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team would like to share a new project we&amp;#8217;re working on: &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our current .NET client is based on the C&amp;#43;&amp;#43; core implementation, which is a solution that has its pros and cons.
It makes it easier to guarantee parity between the C&amp;#43;&amp;#43; and C# clients over the time, but has the drawback of tying clients to specific a architecture.
In turn that complicates portability and distribution, making the release lifecycle for those clients more onerous and sluggish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt; is a 100% C# Hot Rod client designed with the aim of being portable across
systems via the .Net Core platform and easier to deploy and consume via the Nuget platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are involved with the .NET Core ecosystem we hope you will find this project of interest. Entry points for the project are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core&quot;&gt;Infinispan.Hotrod.Core&lt;/a&gt;, current status and news;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Core.XUnitTest&quot;&gt;XUnit test&lt;/a&gt;, this will contain the same testsuite of the
current &lt;a href=&quot;https://github.com/infinispan/dotnet-client&quot;&gt;.NET client&lt;/a&gt; project with the aim of making it easier to compare with the .NET core client as it matures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Application&quot;&gt;Sample Application&lt;/a&gt;, an example of project which uses the client package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/packages/Infinispan.Hotrod.Core/&quot;&gt;Nuget&lt;/a&gt; is where the package is published.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope this will makes C# developers happy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts, a good place for them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><summary type="html">Dear Infinispanners,</summary></entry><entry><title type="html">Infinispan (Red Hat Data Grid) featured again in Red Hat Developers</title><link href="https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus" rel="alternate" type="text/html" title="Infinispan (Red Hat Data Grid) featured again in Red Hat Developers" /><published>2021-06-08T08:00:00-04:00</published><updated>2021-06-08T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus-part-two</id><content type="html" xml:base="https://infinispan.org/blog/2021/06/08/infinispan-redhat-summit-quarkus">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan Community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team is pleased to share the follow up article published on the Red Hat Developer blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part two of a two-part series of articles, this blog post focuses on how
the &lt;a href=&quot;https://infinispan.org/docs/infinispan-operator/master/operator.html&quot;&gt;Infinispan Operator&lt;/a&gt; was used to create
all the configuration and deployment descriptors for the online hybrid-cloud Battleship game that featured
at this year&amp;#8217;s Red Hat Summit Keynote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;You can read the blog post &lt;a href=&quot;https://developers.redhat.com/articles/2021/06/08/create-and-manage-red-hat-data-grid-services-hybrid-cloud&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Operator is available from the &lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;Operator Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy your reading!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="redhat" /><category term="datagrid" /><category term="quarkus" /><category term="operator" /><summary type="html">Dear Infinispan Community,</summary></entry><entry><title type="html">Infinispan (Red Hat Data Grid) featured in Red Hat Developers</title><link href="https://infinispan.org/blog/2021/05/31/infinispan-redhat-summit-quarkus" rel="alternate" type="text/html" title="Infinispan (Red Hat Data Grid) featured in Red Hat Developers" /><published>2021-05-31T08:00:00-04:00</published><updated>2021-05-31T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/05/31/infinispan-redhat-summit-quarkus</id><content type="html" xml:base="https://infinispan.org/blog/2021/05/31/infinispan-redhat-summit-quarkus">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan Community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team is pleased to share an article published over on the Red Hat Developer blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part one of a two-part series of articles, this blog post focuses on how Data Grid, which is built on Infinispan,
was used to create a leaderboard for an online Battleship game that featured at this year&amp;#8217;s Red Hat Summit Keynote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;You can read the blog post &lt;a href=&quot;https://developers.redhat.com/articles/2021/05/28/building-real-time-leaderboard-red-hat-data-grid-and-quarkus-hybrid-kubernetes&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technologies featured in our keynote demo:
* Quarkus and Infinispan Client Extension
* Additional Quarkus extensions: RestEasy, Websockets, Scheduler
* Infinispan Query
* Infinispan Cross-Site Replication
* Infinispan Kubernetes Operator&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy your reading!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="redhat" /><category term="datagrid" /><category term="quarkus" /><category term="cross-site-replication" /><summary type="html">Dear Infinispan Community,</summary></entry><entry><title type="html">Infinispan Native CLI</title><link href="https://infinispan.org/blog/2021/05/21/infinispan-cli-image" rel="alternate" type="text/html" title="Infinispan Native CLI" /><published>2021-05-21T08:00:00-04:00</published><updated>2021-05-21T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/05/21/infinispan-cli-image</id><content type="html" xml:base="https://infinispan.org/blog/2021/05/21/infinispan-cli-image">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Infinispan 12, we provide a natively compiled version of the Infinispan CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be consumed as a native binary or via a container image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Start a Infinispan server instance so that the CLI has an endpoint to connect to:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -it -p 11222:11222 -e USER=&quot;user&quot; -e PASS=&quot;pass&quot; quay.io/infinispan/server:12.1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;container&quot;&gt;Container&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Launch the CLI image and connect to the server image:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run --net=host -it --rm quay.io/infinispan/cli:12.1 -c http://127.0.0.1:11222&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Enter the &quot;user&quot; and &quot;pass&quot; credentials, for the username and password respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The container&amp;#8217;s endpoint is the CLI binary, which lets you pass CLI arguments straight to the image, e.g. &lt;code&gt;quay.io/infinispan/cli:12.1 --version&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native CLI binaries for Linux, Mac and Windows can be downloaded &lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases/tag/12.1.3.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download and extract the &lt;code&gt;.zip&lt;/code&gt; for your desired platform:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases/download/12.1.3.Final/infinispan-cli-12.1.3.Final-linux-amd64.zip&quot;&gt;Linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases/download/12.1.3.Final/infinispan-cli-12.1.3.Final-darwin-amd64.zip&quot;&gt;Mac&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases/download/12.1.3.Final/infinispan-cli-12.1.3.Final-windows-amd64.zip&quot;&gt;Windows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the CLI and connect to the server container:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Linux &amp;amp; Mac: &lt;code&gt;./ispn-cli -c &lt;a href=&quot;http://127.0.0.1:11222&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:11222&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows (Powershell): &lt;code&gt;&amp;amp; &quot;.\ispn-cli.exe&quot; -c &lt;a href=&quot;http://127.0.0.1:11222&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:11222&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="docker" /><category term="cli" /><category term="containers" /><category term="quarkus" /><category term="native" /><summary type="html">Starting with Infinispan 12, we provide a natively compiled version of the Infinispan CLI.</summary></entry><entry><title type="html">Infinispan 12.1.2.Final</title><link href="https://infinispan.org/blog/2021/05/07/infinispan-12-1-2-final" rel="alternate" type="text/html" title="Infinispan 12.1.2.Final" /><published>2021-05-07T08:00:00-04:00</published><updated>2021-05-07T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/05/07/infinispan-12.1.2.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/05/07/infinispan-12-1-2-final">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s been a month since our first 12.1.0.Final release and we already released two additional minors with
some bug fixes and upgrades. The latest version is 12.1.2.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Highlights of Infinispan 12.1.1 and 12.1.2 include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grafana Dashboards for the Operator &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12702&quot;&gt;ISPN-12702&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance regression fix &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-13017&quot;&gt;ISPN-13017&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index and Query statistics improved in the Infinispan Web Console &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12458&quot;&gt;ISPN-12458&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several component upgrades&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation enchancements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find release notes for both versions at:
&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12355542&quot;&gt;here&lt;/a&gt;
and
&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12356461&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 12.1.0.Final</title><link href="https://infinispan.org/blog/2021/04/07/infinispan-12-1-0-final" rel="alternate" type="text/html" title="Infinispan 12.1.0.Final" /><published>2021-04-07T08:00:00-04:00</published><updated>2021-04-07T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/04/07/infinispan-12.1.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/04/07/infinispan-12-1-0-final">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a belated surprise in your chocolate egg this year is a brand new final release.
Infinispan 12.1 &lt;a href=&quot;https://en.wikipedia.org/wiki/Taedonggang&quot;&gt;Taedonggang&lt;/a&gt; includes a bunch of new features and fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;out-of-the-box-authorization-in-the-server&quot;&gt;Out-of-the-box authorization in the server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest change is the fact that the server now enables authorization right from the start, including a set of predefined roles.
By default this only affects management ops and it can be easily disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html#authorization&quot; class=&quot;bare&quot;&gt;https://infinispan.org/docs/stable/titles/server/server.html#authorization&lt;/a&gt; for details on this feature and how to tune it to your own needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan can now load configuration as YAML, as well as XML and JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;soft-index-file-store&quot;&gt;Soft-Index File Store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Soft-Index File Store (or SIFS for short) is one of our file-based stores, and it has received a number of improvements such as segmentation, non-blocking and requiring no additional threads.
Additionally, if you are lucky enough to have some persistent memory hardware, this file-store can support it via the very awesome &lt;a href=&quot;https://github.com/jhalliday/mashona&quot;&gt;Mashona library&lt;/a&gt;.
We hope to make this our default file-store in the future (replacing the Single File Store).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server-protocol-management&quot;&gt;Server protocol management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now enable/disable protocol endpoints at runtime or use &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html#endpoint_ipfilter&quot;&gt;IP filtering&lt;/a&gt; for fine-grained access control.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The console is now fully aware of the server authorization roles (if enabled) and many fixes are included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cli&quot;&gt;CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI is now available as &lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases&quot;&gt;native builds&lt;/a&gt; for Linux and MacOS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now enable automatic Cross Site &lt;a href=&quot;https://infinispan.org/docs/stable/titles/xsite/xsite.html#xsite_state_transfer-xsite&quot;&gt;state transfer&lt;/a&gt; for asynchronous backup strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Spring Cache and Spring Session integration now allows user keys and values to be stored in &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#configuring_protobuf_encoding-data&quot;&gt;Protostream&lt;/a&gt; format.
However, full integration with the Infinispan Spring Boot Starter is landing in the next minor release. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;marshallingprotobuf&quot;&gt;Marshalling/ProtoBuf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest ProtoStream release 4.4.0.Beta3 includes support for marshalling arrays and collections, built-in support for several community requested types (UUID, BigDEcimal,&amp;#8230;&amp;#8203;), a new method in ProtobufUtil for computing message size (without actually encoding the message) and a lot of bug fixes. This release also provides it’s own protobuf encoder and removes the dependency on protobuf-java artifact which was previously used for encoding the stream (without being exposed by the API).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now provide an  image containing a natively compiled version of the Infinispan CLI at quay.io/infinispan/cli&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;operator&quot;&gt;Operator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to numerous fixes, the operator has added many new features. Most notably:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grafana Dashboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batch CR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom library support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom labels on Resources created by Operator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable Authentication Option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decouple user and operator endpoint authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve made a lot of updates to our documentation this release, with lots more task-oriented content for new features and capabilities. Server credential stores, refactored authorization (RBAC) configuration, Operator Batch CR, Backup and Restore CRs, custom code deployments, automatic cross-site state transfer, querying values, configuring Protobuf annotations for marshalling… Hopefully you’ll find all the answers you need for using Infinispan 12.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the big highlights for docs in this release are the new tabbed configuration snippets we’re going to start adding. Right now you can find an example of tabbed configuration in the REST API docs here: &lt;a href=&quot;https://infinispan.org/docs/dev/titles/rest/rest.html#cache_configuration&quot; class=&quot;bare&quot;&gt;https://infinispan.org/docs/dev/titles/rest/rest.html#cache_configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve also done a lot of housekeeping in this release to make sure configuration examples are up to date and valid. In the next release you can expect to see more improvements there as well as a new title to improve our documentation around encoding and how Infinispan uses Protobuf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, thanks for reading and get in touch if you have comments, feedback, or suggestions on our documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes-and-upgrading&quot;&gt;Release notes and upgrading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the detailed &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12353337E&quot;&gt;release notes&lt;/a&gt; to see what has changed since CR1.
If you are upgrading from a previous version of Infinispan, please checkout our &lt;a href=&quot;https://infinispan.org/docs/stable/titles/upgrading/upgrading.html&quot;&gt;Upgrading guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What&amp;#8217;s next ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our next release, 13.0, should happen during the summer, and will hopefully introduce a new API which will make using Infinispan much easier, as well as a number of other improvements across the board. As usual, look out for blog postings about upcoming highlights. If you&amp;#8217;d like to contribute, just get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry></feed>