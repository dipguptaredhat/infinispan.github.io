<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2022-07-05T03:16:40-04:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Infinispan 14 indexing &amp;amp; query news</title><link href="https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news" rel="alternate" type="text/html" title="Infinispan 14 indexing &amp;amp; query news" /><published>2022-06-14T14:00:00-04:00</published><updated>2022-06-14T14:00:00-04:00</updated><id>https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news</id><content type="html" xml:base="https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;with the Infinispan 14 development release 03 we introduced improvements on indexing and search capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-indexing-annotations&quot;&gt;Infinispan indexing annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to replace Hibernate annotations with Infinispan indexing annotations.
The new annotations can be used in the same way for both embedded and remote queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are examples of two annotated POJOs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Poem.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Indexed
public class Poem {

   private Author author;
   private String description;
   private Integer year;

   @Embedded(includeDepth = 2, structure = Structure.NESTED)
   public Author getAuthor() {
      return author;
   }

   @Text(projectable = true, analyzer = &quot;whitespace&quot;, termVector = TermVector.WITH_OFFSETS)
   public String getDescription() {
      return description;
   }

   @Basic(projectable = true, sortable = true, indexNullAs = &quot;1800&quot;)
   public Integer getYear() {
      return year;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Author.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Indexed
public class Author {

   private String name;

   public Author(String name) {
      this.name = name;
   }

   @Keyword(projectable = true, sortable = true, normalizer = &quot;lowercase&quot;, indexNullAs = &quot;unnamed&quot;, norms = false)
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the &lt;code&gt;@Basic&lt;/code&gt; annotation for indexed fields without any special string/text transformation.
When you apply a normalizer to a String field, use the &lt;code&gt;@Keyword&lt;/code&gt; annotation.
When you apply an analyzer to a String field, use the &lt;code&gt;@Text&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new annotations allow you to set a single annotation per indexed field if the field should be &lt;code&gt;sortable&lt;/code&gt; or &lt;code&gt;projectable&lt;/code&gt; and if you want to use an &lt;code&gt;analyzer&lt;/code&gt; or &lt;code&gt;normalizer&lt;/code&gt; on the field.
However, the combination of an attribute and the annotation must be supported, for instance the attribute &lt;code&gt;sortable&lt;/code&gt; cannot be used with the &lt;code&gt;@Text&lt;/code&gt; annotation, since an analyzed field cannot be used to sort the result set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When indexing entities with null values, define a default value with the &lt;code&gt;indexNullAs&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For embedded indexes use the &lt;code&gt;@Embedded&lt;/code&gt; annotation and choose between two structures.
The &lt;code&gt;NESTED&lt;/code&gt; structure preserves the original object relationship structure and the &lt;code&gt;FLATTENED&lt;/code&gt; structure makes the leaf fields multi-valued of the parent entity, so the embedded entity will not be present in the index.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;index-startup-mode&quot;&gt;Index startup mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indexes can be persistent and cache data can be volatile and vice versa.
You can perform some operations to keep the index consistent with data in the cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduced the &lt;code&gt;startup-mode&lt;/code&gt; configuration. Here is an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;distributed-cache&amp;gt;
  &amp;lt;indexing storage=&quot;filesystem&quot; startup-mode=&quot;purge&quot;&amp;gt;
    &amp;lt;!-- Additional indexing configuration goes here. --&amp;gt;
  &amp;lt;/indexing&amp;gt;
&amp;lt;/distributed-cache&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration every time the cache is started, the indexes will be purged.
Possible values are: &lt;code&gt;purge&lt;/code&gt;, &lt;code&gt;reindex&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;auto&lt;/code&gt;.
When you choose &lt;code&gt;auto&lt;/code&gt; mode, Infinispan decides what is the right operation to run to align cache data and indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;index-schema-update&quot;&gt;Index schema update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an advanced feature to be used only in case your model needs to be evolved while continuing querying the cache data without data migrations or re-indexing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a comprehensive guide about when to use schema update instead of migrating or re-indexing the data refer to the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command can be triggered from the HotRod remote administration API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remoteCacheManager.administration().updateIndexSchema(CACHE_NAME);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or using the REST API, targeting the uri:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST .../v2/caches/{cacheName}/search/indexes?action=updateSchema&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or using the Infinispan CLI by running &lt;code&gt;update-schema&lt;/code&gt; on the runtime cache instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Fabio Massimo Ercoli</name></author><category term="indexing" /><category term="query" /><category term="schema" /><category term="startup" /><category term="annotations" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 14.0.0.Dev03</title><link href="https://infinispan.org/blog/2022/05/30/infinispan-14" rel="alternate" type="text/html" title="Infinispan 14.0.0.Dev03" /><published>2022-05-30T08:00:00-04:00</published><updated>2022-05-30T08:00:00-04:00</updated><id>https://infinispan.org/blog/2022/05/30/infinispan-14.0.0.Dev03</id><content type="html" xml:base="https://infinispan.org/blog/2022/05/30/infinispan-14">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 14 development release 03 is here! We plan to release Infinispan 14 Final this summer, so we want to share a preview of what&amp;#8217;s coming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-11&quot;&gt;Java 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan now requires Java 11 to run (it was only needed to build it before). This means we can use and expose all of the great new APIs that were added, such as &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt; which provides a standard interface for all things reactive.
Which brings us to the&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-api&quot;&gt;New API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have finalized the design of our new user-facing API, which brings the following, much-needed, features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a common API for both embedded and remote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clean separation between sync and async APIs, as well as a &lt;a href=&quot;https://smallrye.io/smallrye-mutiny/&quot;&gt;Mutiny&lt;/a&gt; variant which blends beautifully with all the great things happening over in &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a single entry-point to access all of the data-structures that we support (caches, counters, locks, multimaps, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;our own annotations for indexing entity fields (see below for details)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now working on implementing this API for the remote Hot Rod client, while the implementation for embedded will be available in Infinispan 15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jgroups-5&quot;&gt;JGroups 5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrading to Java 11 also allows us to upgrade to JGroups 5.x, which brings a bunch of improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved failure-detection protocols (&lt;code&gt;FD_ALL3&lt;/code&gt;, &lt;code&gt;FD_SOCK2&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Random Early Drop protocol (&lt;code&gt;RED&lt;/code&gt;), which starts dropping messages on the send side when the queue becomes full to prevent message storms caused by unneeded retransmissions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grouping&quot;&gt;Grouping&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The grouping API has a small improvement when searching for keys belonging to a group. The old code was inefficient because it iterates over all keys in the local nodes but that was changed in this release by iterating over a single segment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;transactional-caches&quot;&gt;Transactional caches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal codeis now non-blocking, reducing the overall threads spawning and making better use of resources when transactions are committed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The asynchronous cross-site replication updates are batched in the sender improving the overall resources utilization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jakarta-ee&quot;&gt;Jakarta EE&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaEE is dead. Long-live &lt;a href=&quot;https://jakarta.ee/&quot;&gt;JakartaEE&lt;/a&gt;. Wherever we used to depend on &lt;code&gt;javax&lt;/code&gt; APIs, we now depend on their &lt;code&gt;jakarta&lt;/code&gt; equivalent. We still provide compatibility artifacts for legacy deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hibernate-orm-6-0-compatibility&quot;&gt;Hibernate ORM 6.0 compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan&amp;#8217;s Hibernate ORM second-level cache (2LC) implementation has been upgraded to work with Hibernate 6.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;indexing-and-query&quot;&gt;Indexing and Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lots has been happening in the land of indexing and querying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgraded Hibernate Search to 6.1 and Lucene 8.11.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brand-new annotations for indexing annotations in place of the old Hibernate annotations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema index update to acquire ProtoBuf schema backward-compatible changes without touching the pre-existing index data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The removal of the &lt;code&gt;@ProtoDoc&lt;/code&gt; annotation to wrap indexing annotations for ProtoBuf generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New indexing startup mode configuration, to trigger purge or reindex automatically when the cache starts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support pagination for unbounded result size queries with the HotRod client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support query parameters for full-text analyzed fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support normalizers with the HotRod client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve the Hybrid query system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve replaced our use of SmallRye Metrics (an implementation of Microprofile Metrics), with the much better Micrometer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RESP&lt;/code&gt; endpoint: a Redis-compatible endpoint connector (implementing the RESP 3 protocol) with support for a subset of commands: &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;mget&lt;/code&gt;, &lt;code&gt;mset&lt;/code&gt;, &lt;code&gt;incr&lt;/code&gt;, &lt;code&gt;decr&lt;/code&gt;, &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;subscribe&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;ping&lt;/code&gt;. The connector integrates with our security and protocol auto-detections, so that it is easily usable from our single-port endpoint. The implemented commands should be enough for basic usage. If you would like to see more, reach out via our community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for FIPS environments (PKCS#11)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for masked and external credentials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The console now sports a cache-creation wizard: a feature-driven approach to configuring caches just the way you need them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and really value feedback from our community. If you think something is missing from the docs or spot a correction, please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12383368&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other-releases&quot;&gt;Other releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve also just recently updated our stable releases with important fixes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12385251&quot;&gt;13.0.10.Final release notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12379804&quot;&gt;12.1.12.Final release notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get them from our &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Crucial DSO server</title><link href="https://infinispan.org/blog/2022/04/07/crucial-dso" rel="alternate" type="text/html" title="Crucial DSO server" /><published>2022-04-07T08:00:00-04:00</published><updated>2022-04-07T08:00:00-04:00</updated><id>https://infinispan.org/blog/2022/04/07/crucial-dso</id><content type="html" xml:base="https://infinispan.org/blog/2022/04/07/crucial-dso">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, an object-relational mapping (ORM) converts the data between the application and storage tiers. The ORM materializes the frontier between the two tiers, and it reduces the coupling. However, it also forces to repeatedly convert the objects between their in-memory and their serialized representations back and forth. This negatively impacts performance and increases execution costs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crucial-project/dso&quot;&gt;Crucial DSO&lt;/a&gt; is a general-purpose synchronization and data sharing framework. With DSO, instead of fetching objects from storage, the application directly calls them. DSO ensures that the objects are persisted and shared consistently among several client machines.
DSO is built on top of Infinispan and leverages its extensibility.
The work was done in the context of the &lt;a href=&quot;https://cloudbutton.eu&quot;&gt;CloudButton&lt;/a&gt; project, which aims to build a serverless platform for quickly deploying
workloads to the cloud, but the advantages are available to everyone using Infinispan!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programming-with-dso&quot;&gt;Programming with DSO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO offers several client-side programming libraries. The most complete one is for the Java language. To declare a DSO object in Java, the programmer uses the &lt;code&gt;@Shared&lt;/code&gt; keyword on the field of an object. As an example, consider the following two classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example.py&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Hero {
    @Shared Room location;
}

class Room {
    Treasure loot();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Hero&lt;/code&gt; class contains a &lt;code&gt;location&lt;/code&gt; field annotated with &lt;code&gt;@Shared&lt;/code&gt;. This tells DSO to push the location to the storage tier, allowing several instances of Hero on several application machines to access the same location object transparently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO ensures that the objects are strongly consistent over time. In the example above, this means for instance that if two heroes stand in the same room, only one of them may loot the treasure. More precisely, the synchronization contract of every DSO object &lt;code&gt;o&lt;/code&gt; is that &lt;code&gt;o&lt;/code&gt; is atomic, aka. linearizable. In Java, this is equivalent to guarding every method &lt;code&gt;m&lt;/code&gt; of some object &lt;code&gt;o&lt;/code&gt; with &lt;code&gt;synchronized(o) { o.m }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO includes a library of shared objects (counter, integer, list, maps, barrier, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO follows a standard client-server architecture.
The server component is built as an Infinispan Server extension. To quickly setup a DSO-enabled Infinispan Server on Kubernetes using the Infinispan Operator, we can use the &lt;a href=&quot;https://infinispan.org/docs/infinispan-operator/2.2.x/operator.html#deploying-code&quot;&gt;code deployment capabilities&lt;/a&gt;. Until an official release of DSO is published, you will need to build it yourself and make the generated artifacts available from a local Maven repository or a simple web server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;dso.yaml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: infinispan.org/v1
kind: Infinispan
metadata:
  name: infinispan
spec:
  replicas: 2
  dependencies:
    artifacts:
      - url: https://repo1.maven.org/maven2/com/fasterxml/uuid/java-uuid-generator/3.3.0/java-uuid-generator-3.3.0.jar
        type: file
      - url: https://repo1.maven.org/maven2/com/google/guava/guava/18.0/guava-18.0.jar
        type: file
      - url: http://example.com/dso-core-2.0.jar
        type: file
      - url: http://example.com/dso-server-2.0.jar
        type: file
  service:
    type: DataGrid&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(We will soon make a bundle available for simpler installation)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the server starts, you should see the following log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  (main) [org.crucial.dso.Factory] Factory[Cache &apos;__dso&apos;@kashyyyk-4890] Created
INFO  (main) [org.crucial.dso.Factory] Factory singleton  is Factory[Cache &apos;__dso&apos;@kashyyyk-4890]
INFO  (main) [org.infinispan.CONTAINER] DSO cache initialized&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to Crucial&amp;#8217;s &lt;a href=&quot;https://github.com/crucial-project/dso&quot;&gt;DSO&lt;/a&gt; page for code, examples and more details about this exciting project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="crucial" /><category term="dso" /><category term="cloudbutton" /><summary type="html">Traditionally, an object-relational mapping (ORM) converts the data between the application and storage tiers. The ORM materializes the frontier between the two tiers, and it reduces the coupling. However, it also forces to repeatedly convert the objects between their in-memory and their serialized representations back and forth. This negatively impacts performance and increases execution costs.</summary></entry><entry><title type="html">.Net Core Client version 0.0.3-beta</title><link href="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta" rel="alternate" type="text/html" title=".Net Core Client version 0.0.3-beta" /><published>2022-03-22T08:00:00-04:00</published><updated>2022-03-22T08:00:00-04:00</updated><id>https://infinispan.org/blog/2022/03/22/dotnet-core-0.0.3-beta</id><content type="html" xml:base="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners and .NET Core lovers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we&amp;#8217;re pleased to annouce the new release of the .NET Core client.
Release 0.0.3-beta comes with a bunch of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remote event listener.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cluster failover configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS with server cert verification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some new hotrod operations. &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/class_infinispan_1_1_hotrod_1_1_core_1_1_cache.html&quot;&gt;(Check if your favourite Hotrod op is in!)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good starting point could be the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Application&quot;&gt;sample application&lt;/a&gt;.
Documentation is growing up, temporarily placed &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts. A good place to share them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><category term="listener" /><category term="cluster failover" /><summary type="html">Dear Infinispanners and .NET Core lovers,</summary></entry><entry><title type="html">Querying Infinispan with the new .NET core client</title><link href="https://infinispan.org/blog/2022/01/21/dotnet-core-query" rel="alternate" type="text/html" title="Querying Infinispan with the new .NET core client" /><published>2022-01-21T07:00:00-05:00</published><updated>2022-01-21T07:00:00-05:00</updated><id>https://infinispan.org/blog/2022/01/21/dotnet-core-query</id><content type="html" xml:base="https://infinispan.org/blog/2022/01/21/dotnet-core-query">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners and .NET Core lovers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Time has passed, keys have been pressed and features have been implemented since
we &lt;a href=&quot;https://infinispan.org/blog/2021/06/21/infinispan-dotnet-core-client&quot;&gt;presented&lt;/a&gt;,
some months ago, the new .NET core client project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To show you our progress with the project we&amp;#8217;ve decided to write a demo/tutorial on
how you can run remote queries against Infinispan Server deployments in your .NET Core application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo aims to prove the overall maturity of the client and highlight some key client features like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shipping as a NuGet package, making it easy to include in C# projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/beetlex-io/BeetleX&quot;&gt;BeetleX&lt;/a&gt; non-blocking core to add native support for concurrency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using language-neutral data types with the Protobuf media type for interoperability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to know more go to the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/query-demo&quot;&gt;demo page&lt;/a&gt; and try it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope this is a good start to 2022 for all Infinispan C# developers!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts. A good place to share them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><category term="query" /><category term="query" /><summary type="html">Dear Infinispanners and .NET Core lovers,</summary></entry><entry><title type="html">Infinispan and Log4j CVE-2021-45046 CVE-2021-45105</title><link href="https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases" rel="alternate" type="text/html" title="Infinispan and Log4j CVE-2021-45046 CVE-2021-45105" /><published>2021-12-23T07:00:00-05:00</published><updated>2021-12-23T07:00:00-05:00</updated><id>https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases</id><content type="html" xml:base="https://infinispan.org/blog/2021/12/23/infinispan-log4j-cve-releases">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released &lt;a href=&quot;https://downloads.jboss.org/infinispan/13.0.5.Final/infinispan-server-13.0.5.Final.zip&quot;&gt;13.0.5.Final&lt;/a&gt;, &lt;a href=&quot;https://downloads.jboss.org/infinispan/12.1.10.Final/infinispan-server-12.1.10.Final.zip&quot;&gt;12.1.10.Final&lt;/a&gt; and &lt;a href=&quot;https://downloads.jboss.org/infinispan/11.0.3.Final/infinispan-server-11.0.14.Final.zip&quot;&gt;11.0.14.Final&lt;/a&gt; to address the latest CVEs that affect log4j-core (&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-45046&quot;&gt;CVE-2021-45046&lt;/a&gt;, &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-45105&quot;&gt;CVE-2021-45105&lt;/a&gt;). Additionally, we have released upgraded versions of the Infinispan Operator to match the server versions: 2.2.3.Final for Infinispan 13.0 and 2.1.7.Final for Infinispan 12.1.
Please upgrade as soon as you can. Refer to our &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-13597&quot;&gt;tracking Jira ISPN-13597&lt;/a&gt; for versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;whats-affected&quot; class=&quot;sect0&quot;&gt;What&amp;#8217;s affected&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We include &lt;code&gt;log4j-core&lt;/code&gt; in our server distributions, including the &lt;a href=&quot;https://quay.io/repository/infinispan/server&quot;&gt;images&lt;/a&gt;.
We are fixing the issue by upgrading to Log4J 2.17.0.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;mitigation-strategies&quot; class=&quot;sect0&quot;&gt;Mitigation strategies&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot upgrade, there are a several &lt;a href=&quot;https://logging.apache.org/log4j/2.x/security.html&quot;&gt;mitigation strategies&lt;/a&gt; you can apply. But upgrading is always the best solution.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan and Log4j CVE-2021-44228</title><link href="https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases" rel="alternate" type="text/html" title="Infinispan and Log4j CVE-2021-44228" /><published>2021-12-13T07:00:00-05:00</published><updated>2021-12-13T07:00:00-05:00</updated><id>https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases</id><content type="html" xml:base="https://infinispan.org/blog/2021/12/13/infinispan-log4j-cve-releases">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve just released &lt;a href=&quot;https://downloads.jboss.org/infinispan/13.0.3.Final/infinispan-server-13.0.3.Final.zip&quot;&gt;13.0.3.Final&lt;/a&gt;, &lt;a href=&quot;https://downloads.jboss.org/infinispan/12.1.8.Final/infinispan-server-12.1.8.Final.zip&quot;&gt;12.1.8.Final&lt;/a&gt; and &lt;a href=&quot;https://downloads.jboss.org/infinispan/11.0.3.Final/infinispan-server-11.0.3.Final.zip&quot;&gt;11.0.13.Final&lt;/a&gt; to address the &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;very serious CVE that affects log4j-core&lt;/a&gt;. Additionally, we have released upgraded versions of the Infinispan Operator to match the server versions: 2.2.2.Final for Infinispan 13.0 and 2.1.6.Final for Infinispan 12.1.
Please upgrade as soon as you can. Refer to our &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-13562&quot;&gt;tracking Jira ISPN-13562&lt;/a&gt; for versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;whats-affected&quot; class=&quot;sect0&quot;&gt;What&amp;#8217;s affected&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We include &lt;code&gt;log4j-core&lt;/code&gt; in our server distributions, including the &lt;a href=&quot;https://quay.io/repository/infinispan/server&quot;&gt;images&lt;/a&gt;.
We are fixing the issue by upgrading to Log4J 2.15.0.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;mitigation-strategies&quot; class=&quot;sect0&quot;&gt;Mitigation strategies&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot upgrade, there are a several &lt;a href=&quot;https://www.lunasec.io/docs/blog/log4j-zero-day-mitigation-guide/&quot;&gt;mitigation strategies&lt;/a&gt; you can apply. But upgrading is always the best solution.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Lithops Hot Rod storage backend</title><link href="https://infinispan.org/blog/2021/12/01/lithops" rel="alternate" type="text/html" title="Lithops Hot Rod storage backend" /><published>2021-12-01T07:00:00-05:00</published><updated>2021-12-01T07:00:00-05:00</updated><id>https://infinispan.org/blog/2021/12/01/lithops-hotrod</id><content type="html" xml:base="https://infinispan.org/blog/2021/12/01/lithops">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very happy to announce a Hot Rod storage backend for &lt;a href=&quot;https://lithops-cloud.github.io/&quot;&gt;Lithops&lt;/a&gt;, an open source framework for big data analytics
and embarrassingly parallel jobs, that provides an universal API for building parallel applications in the cloud.
The work was done in the context of the &lt;a href=&quot;https://cloudbutton.eu&quot;&gt;CloudButton&lt;/a&gt; project, which aims to build a serverless platform for quickly deploying
workloads to the cloud, but the advantages are available to everyone using Infinispan!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/lithops.png&quot; alt=&quot;Lithops&quot; width=&quot;252&quot; height=&quot;205&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lithops is a Python multi-cloud distributed computing framework. It allows you to run unmodified local python code at massive scale in the main serverless
computing platforms. Lithops delivers the user’s code into the cloud without requiring knowledge of how it is deployed and run. Moreover, its
multicloud-agnostic architecture ensures portability across cloud providers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lithops has multiple storage backends and, up until now, it was able to access an Infinispan Server via its REST API.
While the REST API is functional, it doesn&amp;#8217;t offer all of the advantages that Hot Rod, our native protocol, provides, such as topology awareness and
client-side intelligence to automatically locate the owner of an entry, thus avoiding extra network hops.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-new-hot-rod-python-client&quot;&gt;The new Hot Rod Python client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We used to have a Hot Rod Python client that lied in semi-abandoned state for a long time. We decided it was time to get back on track.
The &lt;a href=&quot;https://github.com/infinispan/python-client&quot;&gt;Hot Rod Python client&lt;/a&gt; repository has been completely overhauled with our brand new implementation, which
supports modern Infinispan features such as authentication, cache creation, etc.
This is now installable using PIP, the Python Package Installer. The following is a short example that shows how to connect to a secure Infinispan server and manipulate an entry:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example.py&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from Infinispan import Infinispan
conf=Infinispan.Configuration()
conf.addServer(&quot;localhost&quot;,11222)
conf.setProtocol(&quot;2.4&quot;)
conf.setSasl(&quot;PLAIN&quot;, &quot;node0&quot;, &quot;writer&quot;, &quot;somePassword&quot;)
manager=Infinispan.RemoteCacheManager(conf)
manager.start()
key=Infinispan.UCharVector()
key.push_back(56)
value=Infinispan.UCharVector()
value.push_back(8)
cache=Infinispan.RemoteCache(manager)
cache.put(key,value)
res=cache.get(key)
print (res.pop())
manager.stop()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-lithops-backend&quot;&gt;The Lithops backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enabling the Lithops Hot Rod storage backend is very simple, as demonstrated by the code snippet below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;LithopsStorageHotRod.py&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from lithops import Storage

if __name__ == &quot;__main__&quot;:
    st = Storage(backend=&apos;infinispan_hotrod&apos;)
    st.put_object(bucket=&apos;mybucket&apos;,
                  key=&apos;test.txt&apos;,
                  body=&apos;Hello World&apos;)

    print(st.get_object(bucket=&apos;mybucket&apos;,
                        key=&apos;test.txt&apos;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="lithops" /><category term="python" /><category term="cloudbutton" /><summary type="html">We are very happy to announce a Hot Rod storage backend for Lithops, an open source framework for big data analytics and embarrassingly parallel jobs, that provides an universal API for building parallel applications in the cloud. The work was done in the context of the CloudButton project, which aims to build a serverless platform for quickly deploying workloads to the cloud, but the advantages are available to everyone using Infinispan!</summary></entry><entry><title type="html">Infinispan Operator 2.2.0.Final</title><link href="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final" rel="alternate" type="text/html" title="Infinispan Operator 2.2.0.Final" /><published>2021-10-27T08:00:00-04:00</published><updated>2021-10-27T08:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/27/operator-2.2.0</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/27/infinispan-operator-2-2-final">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 2.2.0.Final of the Infinispan Operator&lt;/a&gt;
for Kubernetes and Red Hat OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first Operator release based on Infinispan 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Custom server configuration. Add custom configuration for Infinispan Server using ConfigMap objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable number of relay nodes for cross-site replication. Relay nodes send and receive replication requests from backup locations. You can now increase the number of relay nodes with the &lt;code&gt;sites.local.maxRelayNodes&lt;/code&gt; field to achieve a better distribution of cross-site replication requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS security for cross-site replication traffic. You can now encrypt cross-site connections between Infinispan clusters with TLS by adding keystore secrets and configuring the &lt;code&gt;sites.local.encryption&lt;/code&gt; field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operator SDK upgraded to v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="operator" /><category term="kubernetes" /><summary type="html">We&amp;#8217;re pleased to announce version 2.2.0.Final of the Infinispan Operator for Kubernetes and Red Hat OpenShift.</summary></entry><entry><title type="html">Infinispan 13.0.0.Final</title><link href="https://infinispan.org/blog/2021/10/12/infinispan-13-final" rel="alternate" type="text/html" title="Infinispan 13.0.0.Final" /><published>2021-10-12T20:00:00-04:00</published><updated>2021-10-12T20:00:00-04:00</updated><id>https://infinispan.org/blog/2021/10/12/infinispan-13.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/10/12/infinispan-13-final">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) &apos;thirteen&apos;, and Ancient Greek φόβος (phóbos) &apos;fear&apos;) is fear or avoidance of the number 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as you should know by now, the Infinispan team is fearless, and for this reason we are not afraid to proudly announce “Infinispan 13 (Triskaidekaphobia)”. In the grand tradition of our codenames, this one also happens to be the name of a beer (&lt;a href=&quot;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&quot; class=&quot;bare&quot;&gt;https://www.thebreweryofbrokendreams.com/triskaidekaphobia&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/triskaidekaphobia.jpg&quot; alt=&quot;Triskaidekaphobia&quot; width=&quot;466&quot; height=&quot;325&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, don&amp;#8217;t be scared and let&amp;#8217;s dive into all the new great things that are in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core&quot;&gt;Core&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Polyglot configuration&lt;/strong&gt;: XML, JSON and YAML can now be used interchangeably to configure every part of Infinispan. Here is an example of how to configure a cache with eviction and Protobuf encoding:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;distributed-cache&amp;gt;
  &amp;lt;encoding media-type=&quot;application/x-protostream&quot;/&amp;gt;
  &amp;lt;memory max-size=&quot;1.5GB&quot; when-full=&quot;REMOVE&quot;/&amp;gt;
&amp;lt;/distributed-cache&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;distributed-cache&quot; : {
    &quot;encoding&quot; : {
      &quot;media-type&quot; : &quot;application/x-protostream&quot;
    },
    &quot;memory&quot; : {
      &quot;max-size&quot; : &quot;1.5GB&quot;,
      &quot;when-full&quot; : &quot;REMOVE&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;distributedCache:
  encoding:
    mediaType: &quot;application/x-protostream&quot;
  memory:
    maxSize: &quot;1.5GB&quot;
    whenFull: &quot;REMOVE&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Max-idle asynchronous touch&lt;/strong&gt;: max-idle expiration makes reading an entry behave like a write: all owners must update the last access timestamp. With asynchronous touch the reader does not wait for their confirmation, and reading a max-idle entry is as fast as reading any other entry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Metrics for cache size are now optional&lt;/strong&gt;: calculating the accurate size of a cache is an expensive operation. Starting with this release, &lt;code&gt;currentNumberOfEntries&lt;/code&gt; and &lt;code&gt;currentNumberOfEntriesInMemory&lt;/code&gt; and &lt;code&gt;totalNumberOfEntries&lt;/code&gt; will return &lt;code&gt;-1&lt;/code&gt; by default. You can re-enable accurate computation of these metrics if you really need them. We will be adding high-performance estimates for these metrics in a future release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delete by query&lt;/strong&gt;: Ickle (Infinispan&amp;#8217;s query language) now supports &lt;code&gt;DELETE FROM&lt;/code&gt; queries using all of the supported clauses, both for indexed and non-indexed caches:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;query.create(&quot;DELETE FROM books WHERE page_count &amp;gt; 500&quot;).executeStatement();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Soft-index file store is now our default persistent file-based cache store. Compared to the old single-file store, it no longer needs to store all keys in memory, plus it supports persistent memory via the awesome &lt;a href=&quot;https://github.com/jhalliday/mashona&quot;&gt;Mashona&lt;/a&gt; library. Old file stores will be automatically migrated on first use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SQL cache store&lt;/strong&gt; which maps database tables and queries to Protobuf, greatly simplifying accessing your existing data. For example, you can expose a single table &lt;code&gt;books&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;table-jdbc-store table-name=&quot;books&quot;&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/table-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use your own queries&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;query-jdbc-store&amp;gt;
    &amp;lt;queries key-columns=&quot;isbn&quot;&amp;gt;
        &amp;lt;select-single&amp;gt;SELECT isbn, title FROM books WHERE isbn = :isbn&amp;lt;/select-single&amp;gt;
        &amp;lt;select-all&amp;gt;SELECT isbn, title FROM books&amp;lt;/select-all&amp;gt;
        &amp;lt;delete&amp;gt;DELETE FROM books WHERE isbn = :key&amp;lt;/delete&amp;gt;
        &amp;lt;delete-all&amp;gt;DELETE FROM books&amp;lt;/delete-all&amp;gt;
        &amp;lt;upsert&amp;gt;INSERT INTO books (isbn, title) VALUES (:key, :value) ON CONFLICT (isbn) DO UPDATE SET title = :value&amp;lt;/upsert&amp;gt;
        &amp;lt;size&amp;gt;SELECT COUNT(*) FROM books&amp;lt;/size&amp;gt;
    &amp;lt;/queries&amp;gt;
    &amp;lt;schema message-name=&quot;books_value&quot;
            key-message-name=&quot;books_key&quot;
            package=&quot;library&quot;
            embedded-key=&quot;true&quot;/&amp;gt;
&amp;lt;/query-jdbc-store&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration overlays&lt;/strong&gt;: you can specify multiple configuration files, in any of the supported formats, and they will be combined to form the final configuration. You can even mix formats:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;server.sh -c base.xml -c layer.yml -c custom.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutable cache configuration&lt;/strong&gt;: you can now update cache configurations cluster-wide at runtime with the CLI. The following example changes the maximum number of entries of a cache:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;alter cache mycache --attribute=memory.max-count --value=10000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thread Pool Consolidation&lt;/strong&gt;: The prior Infinispan non blocking thread pool has been consolidated with the Netty event loop reducing the number of threads required in the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REST listeners&lt;/strong&gt;: It is now possible to listen to cache events over HTTP using Server-Sent Events.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl --digest -u user:password -N http://127.0.0.1:11222/rest/v2/caches/mycache?action=listen
event: cache-entry-created
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-modified
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }

event: cache-entry-removed
data:
data: {
data:    &quot;_type&quot;: &quot;string&quot;,
data:    &quot;_value&quot;: &quot;k1&quot;
data: }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rebalancing management&lt;/strong&gt;: control cluster re-balancing from the REST API, CLI, and Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simple TLS for clustering&lt;/strong&gt;: Infinispan Server can automatically enable TLS for the cluster transport simply by specifying a security realm with a keystore/truststore server identity:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;cache-container name=&quot;default&quot; statistics=&quot;true&quot;&amp;gt;
  &amp;lt;transport cluster=&quot;cluster&quot; server:security-realm=&quot;cluster&quot;/&amp;gt;
&amp;lt;/cache-container&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distributed Security Realm&lt;/strong&gt;: a server security realm which can aggregate multiple sub-realms, trying each one in turn. For example, you can use this to support both certificate and password authentication on the same server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEM key/trust stores&lt;/strong&gt;: Support for PEM files for both keys and certificates without the need to convert them to Java keystores first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support for TLSv1.3 via native OpenSSL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cluster-migration&quot;&gt;Cluster Migration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve done quite a lot of work on the cluster igration operations, making the process smoother from the REST API, CLI, and with our Kubernetes Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manually changing configurations of the cache(s) is no longer necessary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New methods in the REST API to control the migration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches created dynamically are now supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplified configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improve cross-site replication observability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cross-site view (sorted list of site names currently online) and relay-nodes (members who are responsible for relaying messages between sites) are now exposed via CLI/REST/JMX.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detailed metrics exposed per site and per cache (response times, number of messages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve some error messages with more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-console&quot;&gt;Infinispan Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encoding-aware entry editing&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingTextCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingTextCache.png&quot; alt=&quot;Text caches&quot; width=&quot;550&quot; height=&quot;278&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/encodingProtobufCache.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-encodingProtobufCache.png&quot; alt=&quot;Protobuf caches&quot; width=&quot;550&quot; height=&quot;390&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebalancing operations per-cache and per-cluster&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancingOffClusterLevel.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancingOffClusterLevel.png&quot; alt=&quot;Managing rebalancing at the cluster level&quot; width=&quot;550&quot; height=&quot;395&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-1.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;386&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/rebalancing-per-cache-2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/thumb-rebalancing-per-cache-2.png&quot; alt=&quot;Managing rebalancing per-cache&quot; width=&quot;550&quot; height=&quot;369&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud&quot;&gt;Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Helm charts&lt;/strong&gt;: create Infinispan clusters with a Helm chart that lets you specify values for build and deployment configuration. Server configuration is declared using Yaml in .Values. This allows the server configuration to be customized entirely without having to update helm-chart templates locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;: many fixes and improvements:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Migrated operator-sdk from v0.18.0 &amp;#8594; v1.3.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrated packagemanifest &amp;#8594; OLM bundle format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;K8s 1.22 deprecated APIs removed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kubernetes-cli&quot;&gt;Kubernetes CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easily connect a CLI to an operator-managed Infinispan cluster without having to specify connection details:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl infinispan shell -n default mycluster
[mycluster-0-37266@mycluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An InfinispanContainer which makes it easy to test your applications via the awesome &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt; library&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (InfinispanContainer container = new InfinispanContainer()) {
  container.start();
    try (RemoteCacheManager cacheManager = container.getRemoteCacheManager()) {
      RemoteCache&amp;lt;Object, Object&amp;gt; testCache = cacheManager.administration().getOrCreateCache(&quot;test&quot;, DefaultTemplate.DIST_SYNC);
      testCache.put(&quot;key&quot;, &quot;value&quot;);
      assertEquals(&quot;value&quot;, testCache.get(&quot;key&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clustered-counters&quot;&gt;Clustered Counters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strong counters can now expire (experimental). The counter value is reset to its initial value which may be useful to code a cluster-wide rate limiter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works with JDK 17 (and still works with JDK 8 and JDK 11)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of bug fixes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-tutorials&quot;&gt;Documentation and tutorials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated cache configuration docs with tabbed examples with JSON and YAML.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added new guides for indexing and querying caches, Hot Rod clients, and Helm charts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-organized Infinispan simple tutorials as part of the ongoing effort to clearly separate remote caches from embedded caches in our content. Infinispan simple tutorials now have their own documentation on our site at: &lt;a href=&quot;https://infinispan.org/tutorials/simple/simple_tutorials.html&quot; class=&quot;bare&quot;&gt;https://infinispan.org/tutorials/simple/simple_tutorials.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated documentation for configuring persistent cache stores and JVM memory management, including revisions to improve style, grammar, and provide high-level scanning and readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaced the Integration Guide with a dedicated guide for Spring users as well as a guide for Hibernate caches. We’ve also linked to community projects with Quarkus, Vert.x, Keycloak, Camel, and WildFly. Check out the new Integrations category on the docs home page at: &lt;a href=&quot;https://infinispan.org/documentation/&quot; class=&quot;bare&quot;&gt;https://infinispan.org/documentation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be sure to read through &lt;a href=&quot;https://infinispan.org/docs/13.0.x/titles/upgrading/upgrading.html&quot;&gt;Upgrading Infinispan&lt;/a&gt; before getting started with lucky 13.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Triskaidekaphobia (/ˌtrɪskaɪˌdɛkəˈfoʊbiə/ TRIS-kye-DEK-ə-FOH-bee-ə, /ˌtrɪskə-/ TRIS-kə-; from Ancient Greek τρεισκαίδεκα (treiskaídeka) &apos;thirteen&apos;, and Ancient Greek φόβος (phóbos) &apos;fear&apos;) is fear or avoidance of the number 13.</summary></entry></feed>