<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>//infinispan.org/</id>
<title>Infinispan</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<link href="//infinispan.org/feed.atom" rel="self" type="application/atom+xml" />
<link href="//infinispan.org/" rel="alternate" type="text/html" />
<entry>
<id>//infinispan.org/blog/2020/09/08/infinispan-12/</id>
<title>Infinispan 12.0.0.Dev03</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-09-08T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/09/08/infinispan-12/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term="release"></category>
<category term="development"></category>
<summary>
Dear Infinispan community,


Infinispan 12 development release 03 is here!




Cross Site Replication


With the new asynchronous cross-site replication algorithm introduced in Infinispan 11, this release brings
a long desired feature: conflict resolution.


It is possible to configure a merge policy where, in case of conflict between updates of different sites, the value
can be merged. Some predefined merge policies can be found
here.


See the docs for more information about conflict resolution.


Performance improvement
Another small improvement has been made to cross-site replication in this release.
When sites get requests targeting caches that don&#8217;t exist or aren&#8217;t started,
sender sites stop retrying the requests, which takes the backup location offline.
Administrators must...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 12 development release 03 is here!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cross_site_replication&quot; /&gt;Cross Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the new asynchronous cross-site replication algorithm introduced in Infinispan 11, this release brings
a long desired feature: &lt;strong&gt;conflict resolution&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to configure a merge policy where, in case of conflict between updates of different sites, the value
can be merged. Some predefined merge policies can be found
&lt;a href=&quot;https://docs.jboss.org/infinispan/12.0/apidocs/org/infinispan/xsite/spi/XSiteMergePolicy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the docs for more &lt;a href=&quot;https://infinispan.org/docs/dev/titles/xsite/xsite.html#conflict_resolution-xsite&quot;&gt;information about conflict resolution&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Performance improvement&lt;/div&gt;
&lt;p&gt;Another small improvement has been made to cross-site replication in this release.
When sites get requests targeting caches that don’t exist or aren’t started,
sender sites stop retrying the requests, which takes the backup location offline.
Administrators must then bring the sites back online and perform state transfer to sync possible
out-of-date data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_infinispan_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_infinispan_server&quot; /&gt;Infinispan Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version includes a new version of the web console, including mainly fixes, but also the ability to filter
between Strong and Weak counters and to remove counters from the list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispnDev03console1.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/img/ispnDev03console1.png&quot; alt=&quot;Console Counters Filter&quot; width=&quot;550&quot; height=&quot;400&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispnDev03console2.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/img/ispnDev03console2.png&quot; alt=&quot;Console Counters Remove Button&quot; width=&quot;550&quot; height=&quot;400&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispnDev03console3.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/img/ispnDev03console3.png&quot; alt=&quot;Console Counters Remove Modal&quot; width=&quot;550&quot; height=&quot;400&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12347011&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_documentation&quot; /&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/docs/dev/index.html&quot;&gt;Our documentation has been updated&lt;/a&gt; with some additional content as well as improvements for clarity and
technical accuracy, notably:
* Infinispan Operator Guide
* Server Guide
* Guide to Cross-Site Replication
* Security Guide&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and
really value feedback from our community. If you think something is missing from the docs or spot a correction,
please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_notes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_release_notes&quot; /&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12347011&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re hard at work on new features, improvements and fixes, so watch this space for more announcements!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.redhat.com/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/08/31/nonblocking_nearing/</id>
<title>Non Blocking Saga</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-08-31T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/08/31/nonblocking_nearing/" rel="alternate" type="text/html" />
<author>
<name>William Burns</name>
</author>
<category term="non-blocking"></category>
<category term="server"></category>
<category term="embedded"></category>
<summary>
As many you are probably aware recent trends have shown that making applications non blocking
provides quite a few benefits allowing for greater scalability with less resources. Infinispan
has been written and rewriting parts to take advantage of this as we can for
both embedded and server use cases.




Before Infinispan 11


The Infinispan Server has always utilized netty, however we may not have been the best about
ensuring we didn&#8217;t block the event loop.
The HotRod Client in 9.2.0 also utilizes netty to provide for non blocking operations.
The internal embedded interceptors were rewritten in 9.0.0 to provide for non blocking support for
internal cache operations, which include...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As many you are probably aware recent trends have shown that making applications non blocking
provides quite a few benefits allowing for greater scalability with less resources. Infinispan
has been written and rewriting parts to take advantage of this as we can for
both embedded and server use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_before_infinispan_11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_before_infinispan_11&quot; /&gt;Before Infinispan 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Server has always utilized netty, however we may not have been the best about
ensuring we didn’t block the event loop.
The HotRod Client in 9.2.0 also utilizes netty to provide for non blocking operations.
The internal embedded interceptors were rewritten in 9.0.0 to provide for non blocking support for
internal cache operations, which include put/get.
Cache store operations in 10.0.0 were offloaded to a blocking thread pool to provide non
blocking support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_infinispan_11_non_blocking_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_infinispan_11_non_blocking_changes&quot; /&gt;Infinispan 11 Non Blocking Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the newest release we have rewritten lots of the internals of Infinispan to take advantage
of non blocking as much as possible.
The amount of changes is quite large and a bit hard to describe them all in this blog post.
The various JIRA can be seen from &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-10309&quot; class=&quot;bare&quot;&gt;https://issues.redhat.com/browse/ISPN-10309&lt;/a&gt;,
which isn’t even complete yet despite how many different changes we have done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The persistence SPI was completely rewritten in 11 with non blocking in mind as well and this will
be covered in a future post as it has much more detailing it.
For now you can rest assure that all prior stores will still work, however they may have or
can be optimized to take into account non blocking support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conversions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_conversions&quot; /&gt;Conversions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty much every module in the Infinispan code base has been changed to support non blocking.
If code relies upon an API that is blocking that is known to be blocking, we offload those calls
to a blocking thread pool to ensure we never block the non blocking thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately some modules have not yet been updated and those are ones related to query.
Query is in the middle of a giant refactoring and doing so would have caused massive
conflicts and thus has been delayed to Infinispan 12.
The server works around this by ensuring write operations performed upon a cache with
query are always done in a blocking thread to ensure safety.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_thread_pools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_thread_pools&quot; /&gt;Thread Pools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan utilizes various thread pools for handling of operations.
This table details how many thread pools each version of
Infinispan can have.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Thread Pools&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Embedded&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see there is more than a 50 percent reduction of the number of thread pools in
both embedded and server modes. This in turn has allowed for a reduction of the default
number of threads as well as seen in the next table. Note that N is how many cores that
are available to the JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Maximum Default Thread Count&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Embedded&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;310 + N&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;470 + (2 * N)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;150 + (2 * N)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;150 + (4 * N)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this consolidation we have non blocking and blocking thread pools.
As you can see this allows us to reduce the maximum number of threads in embedded by about half and
the server to a third of what it used to be before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server has an additional thread pool for the netty event loop and unfortunately we cannot
consolidate this thread pool, but it is planned for Infinispan 12, which will get us to the
same number of threads and thread pools for both embedded and server modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this doesn’t talk about the JGroups thread pool as this is unchanged and is the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/col&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_blockhound&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_blockhound&quot; /&gt;BlockHound&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are familiar with making code non blocking it can be a very difficult task as even the
most mundane call can be hiding something blocking, even if it is very brief.
We could write something to do detect such calls, but there is already an open source tool that
does exactly what we needed.
This tool is BlockHound, which can detect blocking calls at runtime.
More information about it can be found at &lt;a href=&quot;https://github.com/reactor/BlockHound&quot; class=&quot;bare&quot;&gt;https://github.com/reactor/BlockHound&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan takes advantage of blockhound in that we configure it at the module level.
This allows the end user to even add block hound with Infinispan in embedded mode
and it should work to test out to ensure that interactions with Infinispan are not blocking
when needed.
Note that we do not yet support block hound for the client, despite many methods
are not blocking today.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_remains_for_infinispan_12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_what_remains_for_infinispan_12&quot; /&gt;What remains for Infinispan 12&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 12 should bring the entire non blocking saga to its hopfully final completion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_the_aforementioned_query_modules_need_to_be_revamped&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_the_aforementioned_query_modules_need_to_be_revamped&quot; /&gt;The aforementioned query modules need to be revamped&lt;/h1&gt;

&lt;h1 id=&quot;_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking&quot; /&gt;Existing supported cache stores need to be rewritten to directly support non blocking&lt;/h1&gt;

&lt;h1 id=&quot;_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread&quot; /&gt;Cache retrieval needs to be offloaded to a blocking thread&lt;/h1&gt;

&lt;h1 id=&quot;_combine_server_event_loop_with_non_blocking_thread_pool&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_combine_server_event_loop_with_non_blocking_thread_pool&quot; /&gt;Combine server event loop with non blocking thread pool&lt;/h1&gt;
&lt;div class=&quot;openblock partintro&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
Also if time permits the Infinispan Client would be ensured to be fully non blocking and
integrate with BlockHound to ensure client apps behave properly.
&lt;/div&gt;
&lt;/div&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/08/28/infinispan-tdc-sp/</id>
<title>The developer Conference Sao Paulo</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-08-28T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/08/28/infinispan-tdc-sp/" rel="alternate" type="text/html" />
<author>
<name>Gustavo Lira</name>
</author>
<category term="tutorial"></category>
<category term="learning"></category>
<category term="presentation"></category>
<category term="quarkus"></category>
<category term="event"></category>
<category term="tdc"></category>
<summary>
Dear Infinispan community,




What is The Developer’s Conference?


The Developer’s Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it&#8217;s realized.


TDC is a very dynamic conference aimed to present the most important topics according to local and international needs and, for this reason, there are more than ten parallel tracks a day.


This event takes place once a year in some cities in Brazil, but this year the event will be totally online due to COVID-19 impact.


Red Hat will be...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_the_developers_conference&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_what_is_the_developers_conference&quot; /&gt;What is The Developer’s Conference?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Developer’s Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it’s realized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TDC is a very dynamic conference aimed to present the most important topics according to local and international needs and, for this reason, there are more than ten parallel tracks a day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This event takes place once a year in some cities in Brazil, but this year the event will be totally online due to COVID-19 impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat will be present on this event with 6 principal lectures and one room occurring simultaneously throughout the event.
We will have an Infinispan presentation showing some important features, what’s new, demos and Quarkus integration at Red Hat sponsor room.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_when_the_infinispan_presentation_will_happen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_when_the_infinispan_presentation_will_happen&quot; /&gt;When the Infinispan presentation will happen?&lt;/h5&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch table&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Friday, 28th August&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Hour&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Timezone&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BRT (GMT-3)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EDT (UTC-4)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BST (UTC+1)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CEST (UTC+2)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/07/28/infinispan-server-tutorial/</id>
<title>Infinispan Server Tutorial</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-07-28T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/07/28/infinispan-server-tutorial/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term="tutorial"></category>
<category term="learning"></category>
<category term="server"></category>
<summary>
Dear Infinispan community,


If you are wondering how to start with Infinispan Server from your Java Application,
a new Tutorial is available.
This tutorial covers the essentials to get started with Infinispan Server and
takes around half an hour to complete.


In this tutorial you will learn how to:




Run Infinispan Server.


Access and use the Infinispan Console.


Create Infinispan caches.


Read and write data as primitive types and Java objects.


Add lifespans to entries so data expires.


Deploy client listeners to get event notifications.


Search the data store for specific values.


Use out-of-the-box testing with Junit 5 for verification.




Complete the tutorial, ask us anything about it, give us feedback
and feel free to...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are wondering how to start with Infinispan Server from your Java Application,
a new &lt;a href=&quot;https://infinispan.org/infinispan-server-tutorial/&quot;&gt;Tutorial&lt;/a&gt; is available.
This tutorial covers the essentials to get started with Infinispan Server and
takes around half an hour to complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this tutorial you will learn how to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Run Infinispan Server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access and use the Infinispan Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Infinispan caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read and write data as primitive types and Java objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add lifespans to entries so data expires.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy client listeners to get event notifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search the data store for specific values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use out-of-the-box testing with Junit 5 for verification.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Complete the tutorial, ask us anything about it, give us feedback
and feel free to share it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.redhat.com/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/07/27/infinispan-12/</id>
<title>Infinispan 12.0.0.Dev01</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-07-27T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/07/27/infinispan-12/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<category term="development"></category>
<summary>
Dear Infinispan community,


The first of our development releases of Infinispan 12 is here and it features our upgrade to Hibernate Search 6 which finally allows us to upgrade to Lucene 8.x. We&#8217;ve had to change a few things in our query implementation to accommodate the latest and greatest and to make the feature simpler to use. As expected, being a development release, there are some rough edges and we&#8217;d really love YOUR help in making sure that we get everything right for the final release later this year.


You can look at the release notes to see what has changed.


We&#8217;re hard...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first of our development releases of Infinispan 12 is here and it features our upgrade to &lt;a href=&quot;https://hibernate.org/search/&quot;&gt;Hibernate Search 6&lt;/a&gt; which finally allows us to upgrade to &lt;a href=&quot;https://lucene.apache.org/&quot;&gt;Lucene 8.x&lt;/a&gt;. We’ve had to change a few things in our query implementation to accommodate the latest and greatest and to make the feature simpler to use. As expected, being a development release, there are some rough edges and we’d really love &lt;strong&gt;YOUR&lt;/strong&gt; help in making sure that we get everything right for the final release later this year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12346555&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re hard at work on new features, improvements and fixes, so watch this space for more announcements!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.redhat.com/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/07/22/anchored-keys/</id>
<title>Anchored keys - scaling up a cluster without transferring values</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-07-22T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/07/22/anchored-keys/" rel="alternate" type="text/html" />
<author>
<name>Dan Berindei</name>
</author>
<category term="anchored keys"></category>
<category term="state transfer"></category>
<summary>
Background


For background, the preferred way to scale up the storage capacity of a Infinispan cluster
is to use distributed caches.
A distributed cache stores each key/value pair on num-owners nodes,
and each node can compute the location of a key (aka the key owners) directly.


Infinispan achieves this by statically mapping cache keys to num-segments consistent hash segments,
and then dynamically mapping segments to nodes based on the cache&#8217;s topology
(roughly the current plus the historical membership of the cache).
Whenever a new node joins the cluster, the cache is rebalanced, and the new node replaces an existing node
as the owner of some segments.
The key/value pairs in...
</summary>
<content type="html">
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_background&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_background&quot; /&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For background, the preferred way to scale up the storage capacity of a Infinispan cluster
is to use distributed caches.
A distributed cache stores each key/value pair on &lt;code&gt;num-owners&lt;/code&gt; nodes,
and each node can compute the location of a key (aka the key owners) directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan achieves this by statically mapping cache keys to &lt;code&gt;num-segments&lt;/code&gt; &lt;strong&gt;consistent hash segments&lt;/strong&gt;,
and then dynamically mapping segments to nodes based on the cache’s &lt;strong&gt;topology&lt;/strong&gt;
(roughly the current plus the historical membership of the cache).
Whenever a new node joins the cluster, the cache is &lt;strong&gt;rebalanced&lt;/strong&gt;, and the new node replaces an existing node
as the owner of some segments.
The key/value pairs in those segments are copied to the new node and removed from the no-longer-owner node
via &lt;strong&gt;state transfer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because the allocation of segments to nodes is based on random UUIDs generated at start time,
it is common (though less so after
&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-11679&quot;&gt;ISPN-11679&lt;/a&gt;
), for segments to also move from one old node to another old node.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_architecture&quot; /&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic idea is to skip the static mapping of keys to segments and to map keys directly to nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a key/value pair is inserted into the cache,
the newest member becomes the &lt;strong&gt;anchor owner&lt;/strong&gt; of that key, and the only node storing the actual value.
In order to make the anchor location available without an extra remote lookup,
all the other nodes store a reference to the anchor owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, when another node joins, it only needs to receive the location information from the existing nodes,
and values can stay on the anchor owner, minimizing the amount of traffic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_limitations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_limitations&quot; /&gt;Limitations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Only one node can be added at a time&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An external actor (e.g. a Kubernetes/OpenShift operator, or a human administrator)
must monitor the load on the current nodes, and add a new node whenever the newest node
is close to &quot;full&quot;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because the anchor owner information is replicated on all the nodes, and values are never moved off a node,
the memory usage of each node will keep growing as new entries and nodes are added.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;There is no redundancy&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Every value is stored on a single node.
When a node crashes or even stops gracefully, the values stored on that node are lost.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Transactions are not supported&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A later version may add transaction support, but the fact that any node stop or crash
loses entries makes transactions a lot less valuable compared to a distributed cache.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Hot Rod clients do not know the anchor owner&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Hot Rod clients cannot use the topology information from the servers to locate the anchor owner.
Instead, the server receiving a Hot Rod get request must make an additional request to the anchor owner
in order to retrieve the value.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configuration&quot; /&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The module is still very young and does not yet support many Infinispan features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, if it proves useful, it may become another cache mode, just like scattered caches.
For now, configuring a cache with anchored keys requires a replicated cache with a custom element &lt;code&gt;anchored-keys&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;infinispan&lt;/span&gt;
      &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:11.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;attribute-name&quot;&gt;xmlns:anchored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:anchored:11.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:11.0&lt;/span&gt;
            &lt;span class=&quot;content&quot;&gt;https://infinispan.org/schemas/infinispan-config-11.0.xsd&lt;/span&gt;
            &lt;span class=&quot;content&quot;&gt;urn:infinispan:config:anchored:11.0&lt;/span&gt;
            &lt;span class=&quot;content&quot;&gt;https://infinispan.org/schemas/infinispan-anchored-config-11.0.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;default-cache&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;transport&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;replicated-cache&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;anchored:anchored-keys&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/replicated-cache&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;code&gt;&amp;lt;anchored-keys/&amp;gt;&lt;/code&gt; element is present, the module automatically enables anchored keys
and makes some required configuration changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disables &lt;code&gt;await-initial-transfer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enables conflict resolution with the equivalent of&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;partition-handling when-split=&quot;ALLOW_READ_WRITES&quot; merge-policy=&quot;PREFER_NON_NULL&quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cache will fail to start if these attributes are explicitly set to other values,
if state transfer is disabled, or if transactions are enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementation_status&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_implementation_status&quot; /&gt;Implementation status&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basic operations are implemented: &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;putIfAbsent&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;putAll&lt;/code&gt;, &lt;code&gt;getAll&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_functional_commands&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_functional_commands&quot; /&gt;Functional commands&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FunctionalMap&lt;/code&gt; API is not implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other operations that rely on the functional API’s implementation do not work either: &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;compute&lt;/code&gt;,
&lt;code&gt;computeIfPresent&lt;/code&gt;, &lt;code&gt;computeIfAbsent&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_partition_handling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_partition_handling&quot; /&gt;Partition handling&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a node crashes, surviving nodes do not remove anchor references pointing to that node.
In theory, this could allow merges to skip conflict resolution, but currently the &lt;code&gt;PREFERRED_NON_NULL&lt;/code&gt;
merge policy is configured automatically and cannot be changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_listeners&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_listeners&quot; /&gt;Listeners&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cluster listeners and client listeners are implemented and receive the correct notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non-clustered embedded listeners currently receive notifications on all the nodes, not just the node
where the value is stored.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_performance_considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_performance_considerations&quot; /&gt;Performance considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_clientserver_latency&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_clientserver_latency&quot; /&gt;Client/Server Latency&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client always contacts the primary owner, so any read has a
&lt;code&gt;(N-1)/N&lt;/code&gt; probability of requiring a unicast RPC from the primary to the anchor owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writes require the primary to send the value to one node and the anchor address
to all the other nodes, which is currently done with &lt;code&gt;N-1&lt;/code&gt; unicast RPCs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In theory we could send in parallel one unicast RPC for the value and one multicast RPC for the address,
but that would need additional logic to ignore the address on the anchor owner
and with TCP multicast RPCs are implemented as parallel unicasts anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_memory_overhead&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_memory_overhead&quot; /&gt;Memory overhead&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compared to a distributed cache with one owner, an anchored-keys cache
contains copies of all the keys and their locations, plus the overhead of the cache itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, a node with anchored-keys caches should stop accepting new entries when it has less than
&lt;code&gt;(&amp;lt;key size&amp;gt; + &amp;lt;per-key overhead&amp;gt;) * &amp;lt;number of entries not yet inserted&amp;gt;&lt;/code&gt; bytes available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The number of entries not yet inserted is obviously very hard to estimate.
In the future we may provide a way to limit the overhead of key location information,
e.g. by using a distributed cache.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The per-key overhead is lowest for off-heap storage, around 63 bytes:
8 bytes for the entry reference in &lt;code&gt;MemoryAddressHash.memory&lt;/code&gt;,
29 bytes for the off-heap entry header,
and 26 bytes for the serialized &lt;code&gt;RemoteMetadata&lt;/code&gt; with the owner’s address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The per-key overhead of the ConcurrentHashMap-based on-heap cache,
assuming a 64-bit JVM with compressed OOPS, would be around 92 bytes:
32 bytes for &lt;code&gt;ConcurrentHashMap.Node&lt;/code&gt;, 32 bytes for &lt;code&gt;MetadataImmortalCacheEntry&lt;/code&gt;,
24 bytes for &lt;code&gt;RemoteMetadata&lt;/code&gt;, and 4 bytes in the &lt;code&gt;ConcurrentHashMap.table&lt;/code&gt; array.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_state_transfer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_state_transfer&quot; /&gt;State transfer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;State transfer does not transfer the actual values, but it still needs
to transfer all the keys and the anchor owner information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming that the values are much bigger compared to the keys,
the anchor cache’s state transfer should also be much faster
compared to the state transfer of a distributed cache of a similar size.
But for small values, there may not be a visible improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initial state transfer does not block a joiner from starting,
because it will just ask another node for the anchor owner.
However, the remote lookups can be expensive, especially in embedded mode,
but also in server mode, if the client is not &lt;code&gt;HASH_DISTRIBUTION_AWARE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/07/03/infinispan-11/</id>
<title>Infinispan 11.0.1.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-07-03T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/07/03/infinispan-11/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<summary>
Dear Infinispan community,


we hope you&#8217;ve been enjoying all the new goodies included in our latest major release, Infinispan 11.
To show that we care about you, we have a brand new micro release for you which addresses a number of issues.


In particular, if you are using HTTP/2 with TLS/SSL, JCache with persistence, Spring Boot or RocksDB, we have fixes for you.


Additionally, the Infinispan Archetypes have been resurrected and are now being maintained as part of the main repository to ensure they won&#8217;t fall out of sync anymore. Read more about how to get started with a Maven archetype.


The following list shows...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we hope you’ve been enjoying all the new goodies included in our latest major release, Infinispan 11.
To show that we care about you, we have a brand new micro release for you which addresses a number of issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, if you are using HTTP/2 with TLS/SSL, JCache with persistence, Spring Boot or RocksDB, we have fixes for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the Infinispan Archetypes have been resurrected and are now being maintained as part of the main repository to ensure they won’t fall out of sync anymore. Read more about how to &lt;a href=&quot;//infinispan.org/docs/stable/titles/getting_started/getting_started.html#mvn_archetypes&quot;&gt;get started with a Maven archetype&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following list shows what we have fixed:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_component_upgrade&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_component_upgrade&quot; /&gt;Component Upgrade&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;https://issues.redhat.com/browse/ISPN-11843[ISPN-11843] - Upgrade SB starter to 2.3
https://issues.redhat.com/browse/ISPN-12009[ISPN-12009] - Upgrade Hibernate to latest micro
https://issues.redhat.com/browse/ISPN-12013[ISPN-12013] - Upgrade H2 database engine to 1.4.200
https://issues.redhat.com/browse/ISPN-12014[ISPN-12014] - Upgrade mojo-executor&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_enhancement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_enhancement&quot; /&gt;Enhancement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;https://issues.redhat.com/browse/ISPN-11151[ISPN-11151] - Migrating some remote tests from jdg-functional-tests to upstream
https://issues.redhat.com/browse/ISPN-11549[ISPN-11549] - Move Infinispan SB starter simple tutorials to simple tutorials repository
https://issues.redhat.com/browse/ISPN-11782[ISPN-11782] - Docs: Cross-Site monitoring
https://issues.redhat.com/browse/ISPN-11828[ISPN-11828] - Docs: Add stable docs to infinispan.org/documentation
https://issues.redhat.com/browse/ISPN-11913[ISPN-11913] - Docs: Add search and improve index pages
https://issues.redhat.com/browse/ISPN-11996[ISPN-11996] - Allow customize memory and memory swap for Testcontainers images
https://issues.redhat.com/browse/ISPN-12001[ISPN-12001] - Add jboss-parent to upstream projects
https://issues.redhat.com/browse/ISPN-12006[ISPN-12006] - Test upload schema with CLI
https://issues.redhat.com/browse/ISPN-12007[ISPN-12007] - Elytron 1.12.1.Final
https://issues.redhat.com/browse/ISPN-12010[ISPN-12010] - Remove Apache Commons Codec
https://issues.redhat.com/browse/ISPN-12012[ISPN-12012] - Force the same Guava version in all transitive dependencies
https://issues.redhat.com/browse/ISPN-12021[ISPN-12021] - Docs: Creating Caches Remotely
https://issues.redhat.com/browse/ISPN-12039[ISPN-12039] - Docs: Hot Rod Per-Cache Simple Tutorial
https://issues.redhat.com/browse/ISPN-12045[ISPN-12045] - Clarify jboss-marshalling deprecation message
https://issues.redhat.com/browse/ISPN-12047[ISPN-12047] - Merge Async and Sync Cross-Site attributes
https://issues.redhat.com/browse/ISPN-12053[ISPN-12053] - Remove jetty-client from the REST testsuite
https://issues.redhat.com/browse/ISPN-12059[ISPN-12059] - CliIT allow external module use
https://issues.redhat.com/browse/ISPN-12065[ISPN-12065] - Add the anchored-keys module to the server
https://issues.redhat.com/browse/ISPN-12068[ISPN-12068] - HTTP/2 pipeline missing chunked handler&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_bug&quot; /&gt;Bug&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;https://issues.redhat.com/browse/ISPN-11998[ISPN-11998] - Eviction new and legacy attributes should stay in sync
https://issues.redhat.com/browse/ISPN-12017[ISPN-12017] - Explicitly disable the java8-test execution defined in the jboss-parent POM
https://issues.redhat.com/browse/ISPN-12018[ISPN-12018] - Fix JpaStoreCompatibilityTest failure
https://issues.redhat.com/browse/ISPN-12019[ISPN-12019] - Always attempt to initialize openssl
https://issues.redhat.com/browse/ISPN-12026[ISPN-12026] - Fetch the correct IP:port when NodePort is used
https://issues.redhat.com/browse/ISPN-12027[ISPN-12027] - RemoteCacheContainer missing getCache overrides
https://issues.redhat.com/browse/ISPN-12030[ISPN-12030] - BlockHound is not active on JDK 13/14
https://issues.redhat.com/browse/ISPN-12032[ISPN-12032] - JCache cache loader should not require marshalling
https://issues.redhat.com/browse/ISPN-12038[ISPN-12038] - RocksDB compression options incomplete and incorrectly applied
https://issues.redhat.com/browse/ISPN-12043[ISPN-12043] - Shared stores should not have (add|remove)Segments methods invoked
https://issues.redhat.com/browse/ISPN-12046[ISPN-12046] - Out of the box server testing is broken
https://issues.redhat.com/browse/ISPN-12056[ISPN-12056] - Some tests are failing on windows when they try to delete the SingleFileStore
https://issues.redhat.com/browse/ISPN-12058[ISPN-12058] - wildfly/feature-pack module doesn&#39;t build with profile java8-test
https://issues.redhat.com/browse/ISPN-12060[ISPN-12060] - WildFly modules integration tests do not work on WildFly 19
https://issues.redhat.com/browse/ISPN-12064[ISPN-12064] - REST server returns 403 (forbidden) for same origin request
https://issues.redhat.com/browse/ISPN-12067[ISPN-12067] - HTTP/2 framing error for invalid requests
https://issues.redhat.com/browse/ISPN-12069[ISPN-12069] - Unable to override the marshaller in SB starter&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sub_task&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_sub_task&quot; /&gt;Sub-task&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;https://issues.redhat.com/browse/ISPN-11953[ISPN-11953] - Create client archetype
https://issues.redhat.com/browse/ISPN-11954[ISPN-11954] - Move archetypes to Infinispan repository
https://issues.redhat.com/browse/ISPN-11955[ISPN-11955] - Remove testcase-archetype
https://issues.redhat.com/browse/ISPN-11956[ISPN-11956] - Rework store-archetype to use the new NonBlockingStore SPI
https://issues.redhat.com/browse/ISPN-11957[ISPN-11957] - Upgrade embedded archetype to 11.0
https://issues.redhat.com/browse/ISPN-11958[ISPN-11958] - Document Archetypes&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/16/native-server-announce/</id>
<title>Infinispan Native Server Image</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-16T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/16/native-server-announce/" rel="alternate" type="text/html" />
<author>
<name>Ryan Emerson</name>
</author>
<category term="docker"></category>
<category term="native"></category>
<category term="quarkus"></category>
<summary>
Starting with Infinispan 11, it&#8217;s now possible to create a natively compiled version of the Infinispan server.




TL;DR


We have a new image that contains a natively compiled Infinispan server and has a footprint of only 286MB. Try it now:



docker run -p 11222:11222 quay.io/infinispan/server-native:11.0





Infinispan Quarkus Extensions


Quarkus provides built in support for generating native executables, providing several
abstractions to improve the development experience of creating native binaries. Building upon the
new server, the Infinispan team have created a
Quarkus extension for both embedded and server use-cases.
These extensions allow a native binary version of the server to be compiled and ran by simply executing:



mvn clean install -Dnative
./server-runner/target/infinispan-quarkus-server-runner-11.0.0.Final-runner
...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Infinispan 11, it’s now possible to create a natively compiled version of the Infinispan server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tldr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_tldr&quot; /&gt;TL;DR&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a new image that contains a natively compiled Infinispan server and has a footprint of only 286MB. Try it now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -p 11222:11222 quay.io/infinispan/server-native:11.0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_infinispan_quarkus_extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_infinispan_quarkus_extensions&quot; /&gt;Infinispan Quarkus Extensions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; provides built in support for generating native executables, providing several
abstractions to improve the development experience of creating native binaries. Building upon the
&lt;a href=&quot;https://infinispan.org/blog/2019/11/11/serverng/&quot;&gt;new server&lt;/a&gt;, the Infinispan team have created a
&lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus&quot;&gt;Quarkus extension&lt;/a&gt; for both embedded and server use-cases.
These extensions allow a native binary version of the server to be compiled and ran by simply executing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn clean install -Dnative
./server-runner/target/infinispan-quarkus-server-runner-11.0.0.Final-runner
    -Dquarkus.infinispan-server.config-file=infinispan.xml \
    -Dquarkus.infinispan-server.config-path=server/conf \
    -Dquarkus.infinispan-server.data-path=data \
    -Dquarkus.infinispan-server.server-path=/opt/infinispan &amp;amp;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_native_server_image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_native_server_image&quot; /&gt;Native Server Image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For many developers compiling your own Infinispan native binary manually is not desirable, therefore we
provide the &lt;code&gt;infinispan/server-native&lt;/code&gt; image that uses a native server binary. The advantage of this over our JVM
based &lt;code&gt;infinispan/server&lt;/code&gt; image is that we can no provide a much smaller image, 286 vs 468 MB, as we no longer need to
include an openjdk JVM in the image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;server-native&lt;/code&gt; image is configured exactly the same as the JVM based &lt;code&gt;infinispan/server&lt;/code&gt; image. We can run an authenticated Infinispan server with
a single user with the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -p 11222:11222 -e USER=&quot;user&quot; -e PASS=&quot;pass&quot; quay.io/infinispan/server-native:11.0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the output below, you can see the Quarkus banner as well various &lt;code&gt;io.quarkus&lt;/code&gt; logs indicating which extensions are being used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;################################################################################
#                                                                              #
# IDENTITIES_PATH not specified                                                #
# Generating Identities yaml using USER and PASS env vars.                     #
################################################################################
2020-06-16 09:27:39,638 INFO  [io.quarkus] (main) config-generator 2.0.0.Final native (powered by Quarkus 1.5.0.Final) started in 0.069s.
2020-06-16 09:27:39,643 INFO  [io.quarkus] (main) Profile prod activated.
2020-06-16 09:27:39,643 INFO  [io.quarkus] (main) Installed features: [cdi, qute]
2020-06-16 09:27:39,671 INFO  [io.quarkus] (main) config-generator stopped in 0.001s
2020-06-16 09:27:40,306 INFO  [ListenerBean] (main) The application is starting...
2020-06-16 09:27:40,481 INFO  [org.inf.CONTAINER] (main) ISPN000128: Infinispan version: Infinispan &#39;Corona Extra&#39; 11.0.0.Final
2020-06-16 09:27:40,489 INFO  [org.inf.CLUSTER] (main) ISPN000078: Starting JGroups channel infinispan with stack image-tcp
2020-06-16 09:27:45,560 INFO  [org.inf.CLUSTER] (main) ISPN000094: Received new cluster view for channel infinispan: [82914efa63fe-12913|0] (1) [82914efa63fe-12913]
2020-06-16 09:27:45,562 INFO  [org.inf.CLUSTER] (main) ISPN000079: Channel infinispan local address is 82914efa63fe-12913, physical addresses are [10.0.2.100:7800]
2020-06-16 09:27:45,566 INFO  [org.inf.CONTAINER] (main) ISPN000390: Persisted state, version=11.0.0.Final timestamp=2020-06-16T09:27:45.563303Z
2020-06-16 09:27:45,584 INFO  [org.inf.CONTAINER] (main) ISPN000104: Using EmbeddedTransactionManager
2020-06-16 09:27:45,617 INFO  [org.inf.SERVER] (ForkJoinPool.commonPool-worker-3) ISPN080018: Protocol HotRod (internal)
2020-06-16 09:27:45,618 INFO  [org.inf.SERVER] (main) ISPN080018: Protocol REST (internal)
2020-06-16 09:27:45,629 INFO  [org.inf.SERVER] (main) ISPN080004: Protocol SINGLE_PORT listening on 10.0.2.100:11222
2020-06-16 09:27:45,629 INFO  [org.inf.SERVER] (main) ISPN080034: Server &#39;82914efa63fe-12913&#39; listening on http://10.0.2.100:11222
2020-06-16 09:27:45,629 INFO  [org.inf.SERVER] (main) ISPN080001: Infinispan Server 11.0.0.Final started in 5457ms
2020-06-16 09:27:45,629 INFO  [io.quarkus] (main) infinispan-quarkus-server-runner 11.0.0.Final native (powered by Quarkus 1.5.0.Final) started in 5.618s.
2020-06-16 09:27:45,629 INFO  [io.quarkus] (main) Profile prod activated.
2020-06-16 09:27:45,629 INFO  [io.quarkus] (main) Installed features: [cdi, infinispan-embedded, infinispan-server]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_further_reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_further_reading&quot; /&gt;Further Reading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more detailed information abou how to use the &lt;code&gt;infinispan/server&lt;/code&gt; and &lt;code&gt;infinispan/server-native&lt;/code&gt; image, please consult the
&lt;a href=&quot;https://github.com/infinispan/infinispan-images/blob/master/README.md&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus extension and the &lt;code&gt;server-native&lt;/code&gt; image are currently provided as a tech preview, so please try them out and let us know
if you run into any issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/15/infinispan-11/</id>
<title>Infinispan 11.0.0.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-15T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/15/infinispan-11/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<summary>
Dear Infinispan community,


We&#8217;re proud to announce the release of Infinispan 11. In the tradition of assigning beer codenames to our releases, we decided that "Corona Extra" would be a significant representation of the period during which most of the development has happened.
We hope that you, your families and friends have not been impacted by the pandemic.




But didn&#8217;t you release 10.x not long ago ?


Indeed, but version numbers are just that: numbers. We are still continuing our near-quarterly releases, but, from now on, these will be identified by major version numbers.




So, what&#8217;s new in Infinispan 11 ?


As usual we added new...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re proud to announce the release of Infinispan 11. In the tradition of assigning beer codenames to our releases, we decided that &quot;Corona Extra&quot; would be a significant representation of the period during which most of the development has happened.
We hope that you, your families and friends have not been impacted by the pandemic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_but_didnt_you_release_10_x_not_long_ago&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_but_didnt_you_release_10_x_not_long_ago&quot; /&gt;But didn’t you release 10.x not long ago ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indeed, but version numbers are just that: numbers. We are still continuing our near-quarterly releases, but, from now on, these will be identified by major version numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_so_whats_new_in_infinispan_11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_so_whats_new_in_infinispan_11&quot; /&gt;So, what’s new in Infinispan 11 ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual we added new features, improved existing ones and prepared the groundwork for upcoming features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conflict_detection_and_resolution_for_asynchronous_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_conflict_detection_and_resolution_for_asynchronous_cross_site_replication&quot; /&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cross-site replication is one of our most used features, as it enables a number of very useful use-cases such as geographical load distribution, zero-downtime disaster recovery and follow-the-sun data centers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release we completely overhauled the way we implement asynchronous cross-site replication by introducing conflict resolution, based on vector clocks, as well as multiple site masters to increase throughput and reliability.
This means that you can have multiple active sites safely replicating data between each other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_server_security_overhaul&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server_security_overhaul&quot; /&gt;Server security overhaul&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Server’s security, while very powerful, was also tricky to set up because of the configuration complexity.
Since we wanted to make the &lt;a href=&quot;//infinispan.org/blog/2020/06/04/server-secure-by-default/&quot;&gt;server secure by default&lt;/a&gt;, we put a lot of work in simplifying the configuration and removing all of the boilerplate.
Additionally, if you are securing the server with &lt;a href=&quot;https://keycloak.org&quot;&gt;Keycloak&lt;/a&gt;, accessing the console will correctly obtain credentials through the realm login page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_non_blocking_internals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking_internals&quot; /&gt;Non-blocking internals&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our quest to make better use of the available hardware resources in all deployment models (bare-metal, containerized, virtualized) continues as we’ve now consolidated a lot of thread-pools into just two: non-blocking and blocking.
Most of the code now makes use of the non-blocking pool. Paths which may block, such as certain persistent stores, use the blocking pool so that they don’t hold up work that may be processed without blocking.
This release also includes a new non-blocking Store SPI, so that you can take advantage of stores with real non-blocking I/O.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_clustering&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_clustering&quot; /&gt;Clustering&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Infinispan is participating in &lt;a href=&quot;https://cloudbutton.eu/&quot;&gt;CloudButton&lt;/a&gt;, a Serverless Data Analytics Platform which is part of the
&lt;a href=&quot;https://ec.europa.eu/programmes/horizon2020/&quot;&gt;European Union’s Horizon 2020 research and innovation programme&lt;/a&gt;, we have introduced a new optional feature which allows scaling by adding new nodes to a cluster without state-transfer. This means that you can add capacity with zero-impact to your operations. Obviously this comes at the cost of reduced resilience in case of failures, but, for scenarios where high availability is not required, this gives you a highly scalable in-memory storage solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If high availability is your thing, the rebalancing algorithm which decides how segments (our subdivision of the data space) are mapped to nodes has been overhauled to be much more accurate and fairer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_queryindexing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_queryindexing&quot; /&gt;Query/Indexing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Querying and indexing will be the major focus in Infinispan 12 (with the long awaited upgrade to &lt;a href=&quot;https://hibernate.org/search/&quot;&gt;Hibernate Search 6&lt;/a&gt; and &lt;a href=&quot;https://lucene.apache.org/&quot;&gt;Lucene 8&lt;/a&gt;).
In preparation for that, &lt;strong&gt;a lot&lt;/strong&gt; of work has gone into deprecations, usability, clean ups and documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hot_rod_client_improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_hot_rod_client_improvements&quot; /&gt;Hot Rod Client improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many usability changes have been added to our Java Hot Rod client:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a Hot Rod URI as a compact way to configure a connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;automatic creation of caches on demand using supplied configurations/templates with support for wildcards&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;improved iteration of entries by concurrently splitting work across segments/nodes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_other_server_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_other_server_changes&quot; /&gt;Other Server changes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the JDBC cache store to persist your cache entries to a database, Infinispan Server now restores the ability to create shared datasources which was lost when we abandoned the WildFly base.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cli&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cli&quot; /&gt;CLI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI received a number of new features such as logging manipulation, obtaining sever reports and user management, superseding the &lt;code&gt;user-tool&lt;/code&gt; script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispn110cli.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/thumb/ispn101welcome.png&quot; alt=&quot;CLI&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_console&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_console&quot; /&gt;Console&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our console overhaul, which started in 10, continues with lots of new features, integrations and polishing.
Highlights are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;entry creation dialog box&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;querying&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KeyCloak integration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispn110console.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/thumb/ispn110console.png&quot; alt=&quot;onsole&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_clouds_containers_and_operators&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_clouds_containers_and_operators&quot; /&gt;Clouds, containers and operators&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Infinispan Server image is now based on &lt;code&gt;ubi-minimal:8.2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And thanks to our friends over at &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;, Infinispan Server is now also available as a native image built using &lt;a href=&quot;https://graalvm.org&quot;&gt;GraalVM&lt;/a&gt;. This image is available on Quay.io and Docker Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Kubernetes Operator adds a new Cache Custom Resource and the ability to expose services via Ingress and Routes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_documentation&quot; /&gt;Documentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation has also received a lot of love in all areas:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_whats_next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_whats_next&quot; /&gt;What’s next ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As briefly mentioned above, Infinispan 12 will be our next release, scheduled for this autumn. We will be working on query/index improvements, backup/restore capabilities as well as the usual load of improvements, clean-ups across the board. We will keep you posted with development release and blogs about upcoming highlights. If you’d like to contribute, just get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/09/offheap-resize/</id>
<title>Off Heap enhancements</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-09T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/09/offheap-resize/" rel="alternate" type="text/html" />
<author>
<name>William Burns</name>
</author>
<category term="off-heap"></category>
<category term="storage"></category>
<summary>
The off heap implementation in Infinispan has become much more widely used since its introduction.
There have been some issues and improvements identified to get this storage type more in line with
its heap counterpart.
For those of you that are unware the off-heap setting is actually only "off" the JVM heap and still resides in
the native memory of the application.


The best part of all the below changes is the user does not need to change anything, other than
configuring Off Heap storage.




Resizing Off Heap Container


For those of you that have used/configured off heap storage before you may have noticed that there
was a configuration...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The off heap implementation in Infinispan has become much more widely used since its introduction.
There have been some issues and improvements identified to get this storage type more in line with
its heap counterpart.
For those of you that are unware the off-heap setting is actually only &quot;off&quot; the JVM heap and still resides in
the native memory of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best part of all the below changes is the user does not need to change anything, other than
configuring Off Heap storage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_resizing_off_heap_container&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_resizing_off_heap_container&quot; /&gt;Resizing Off Heap Container&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those of you that have used/configured off heap storage before you may have noticed that there
was a configuration option named address count.
This setting allowed you to configure how many address pointers the container had.
You can think of this as essentially how many buckets you have in a HashMap.
Unfortunately the number of pointers was fixed and therefore the user would have to know
how many elements they expected to have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This setting also had another problem.
If the user required a larger size of elements this would increase startup time
as the container can be iterated upon multiple times when it is empty.
Iterating over a container of one million empty pointers would be much slower
than iterating over one of only 1024 for example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am glad to say as of Infinispan 10.0.0.Final this setting and the performance of
iteration have been greatly improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configuration&quot; /&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The address count variable is now ignored and instead the off heap based
container will start at smaller amount of &quot;buckets&quot; in the range of 128 or 256.
We then apply a load factor of .75, which means we will automatically increase
the size of the underlying &quot;buckets&quot; once we have inserted a number of entries
being 75% or larger than the current &quot;bucket&quot; size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resize operation will grow to have double the amount of &quot;buckets&quot; it had prior.
The resize operation will be performed concurrently with other operations, providing
minimal blocking as we have locks equal to the number of CPUs times two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will allow for a cache with off heap to be started significantly faster and
relieves some configuration options that were unneeded.
Note that the map, just like a java.util.HashMap, will not decrease the number of
&quot;buckets&quot; once it grows to a given size.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_iteration_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_iteration_changes&quot; /&gt;Iteration changes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I mentioned that iteration was slower during startup of larger number of &quot;buckets&quot;.
This was due to it possibly having a large number of them, however it was also
plauged by an ineffecient way of iterating over them.
In addition to rewriting the resize operation, we have also optimized the memory
layout so that &quot;buckets&quot; can be iterated sequentially which provides more mechanical
sympathy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hash_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_hash_changes&quot; /&gt;Hash changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This one is rather short and sweet, but the old hash algorithm we used would cause
too many collisions for objects that had hash functions that returned values in a
similar range, such as java.lang.Integer and java.util.String (with shared startubg
characters).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore it has been changed to provide a bit better spreading. This is part
of ISPN 10.0.0.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_expiration_bugs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_expiration_bugs&quot; /&gt;Expiration bugs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately off heap had a few issues with expiration.
It didn’t support max idle and expiration metadata was not properly transferred
to new nodes during state transfer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to max idle algorithm being rewritten, Off heap now properly supports
max idle as of 10.1.4.Final and 11.0.0.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Off heap metadata transferred to new nodes has been fixed in 10.1.8.Final and
11.0.0.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/08/infinispan-operator-1/</id>
<title>Infinispan Operator 1.1.2 is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-08T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/08/infinispan-operator-1/" rel="alternate" type="text/html" />
<author>
<name>Vittorio Rigamonti</name>
</author>
<category term="release"></category>
<category term="operator"></category>
<summary>
We&#8217;re pleased to announce
version 1.1.2 of the Infinispan Operator
for Kubernetes and Red Hat OpenShift.


Release highlights:




Simplified configuration for external services.


Improved readability of CR yaml output.


Now available from the Operator image registry at quay.io.




Get full release information at version 1.1.2.


Our community documentation has also been updated and improved! Be sure to check out the
Infinispan Operator v1.1.x Guide.




Update Channels and Automatic Upgrades on OpenShift


Starting with this release we are moving channels from a stable/preview structure to a micro-stream structure. This means
you&#8217;ll get channels for each major.minor version of Infinispan.


For now version 1.1.x is available on the dev-preview channel but you should switch your...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 1.1.2 of the Infinispan Operator&lt;/a&gt;
for Kubernetes and Red Hat OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplified configuration for external services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved readability of CR yaml output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now available from the &lt;a href=&quot;https://quay.io/repository/infinispan/operator?tag=latest&amp;amp;tab=tags&quot;&gt;Operator image registry&lt;/a&gt; at quay.io.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get full release information at &lt;a href=&quot;https://github.com/infinispan/infinispan-operator/milestone/10?closed=1&quot;&gt;version 1.1.2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our community documentation has also been updated and improved! Be sure to check out the
&lt;a href=&quot;https://infinispan.org/infinispan-operator/1.1.x/operator.html&quot;&gt;Infinispan Operator v1.1.x Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update_channels_and_automatic_upgrades_on_openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_update_channels_and_automatic_upgrades_on_openshift&quot; /&gt;Update Channels and Automatic Upgrades on OpenShift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with this release we are moving channels from a stable/preview structure to a micro-stream structure. This means
you’ll get channels for each major.minor version of Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For now version 1.1.x is available on the dev-preview channel but you should switch your Operator subscription to
the 1.1.x channel before the next release to continue receiving updates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use the Automatic Approval upgrade policy on OpenShift, your cluster is now running Infinispan Operator version 1.1.2
with the Infinispan 10.1.7.Final server image.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try the
&lt;a href=&quot;https://github.com/infinispan/infinispan-simple-tutorials/tree/operator-1.1.x/operator&quot;&gt;simple tutorial for 1.1.x&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/infinispan/infinispan-operator/issues&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/05/xsite-improvements/</id>
<title>Cross Site Replication improvements</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-05T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/05/xsite-improvements/" rel="alternate" type="text/html" />
<author>
<name>Pedro Ruivo</name>
</author>
<category term="xsite"></category>
<category term="cross site replication"></category>
<summary>
Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to
support state transfer.
With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication.
Let&#8217;s take a look at them.




Support for multiple site masters


Infinispan uses JGroups' RELAY2
protocol to enable inter-site communication.
Each site has Site Masters: these are nodes with special roles, and are responsible for the communication between sites.


RELAY2 can use more than one Site Master per site allowing load balancing of the inter-site requests.
The new algorithm is now able to take advantage of multiple Site Masters.


The attribute max_site_masters configures the number of Site...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to
support state transfer.
With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication.
Let’s take a look at them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_support_for_multiple_site_masters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_support_for_multiple_site_masters&quot; /&gt;Support for multiple site masters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan uses JGroups&#39; &lt;a href=&quot;http://www.jgroups.org/manual4/index.html#Relay2Advanced&quot;&gt;RELAY2&lt;/a&gt;
protocol to enable inter-site communication.
Each site has Site Masters: these are nodes with special roles, and are responsible for the communication between sites.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RELAY2 can use more than one Site Master per site allowing load balancing of the inter-site requests.
The new algorithm is now able to take advantage of multiple Site Masters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The attribute &lt;code&gt;max_site_masters&lt;/code&gt; configures the number of Site Masters, and it defaults to 1.
To take advantage of the new algorithm, increase the number of Site Masters in RELAY2 configuration by changing
&lt;code&gt;max_site_masters&lt;/code&gt; to a value higher than 1.
A number greater than the number of nodes can be used, and it enables the Site Master role in all nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;site&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;lt;LOCAL_SITE_NAME&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;gt;&lt;/span&gt;&quot; max_site_masters=&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;PUT_VALUE_HERE&amp;gt;&lt;/span&gt;&quot;/&lt;span class=&quot;error&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information about RELAY2 is available in &lt;a href=&quot;http://www.jgroups.org/manual4/index.html#RELAY2&quot;&gt;JGroups&#39; Manual&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conflict_detection_and_resolution_for_asynchronous_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_conflict_detection_and_resolution_for_asynchronous_cross_site_replication&quot; /&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan is able to detect conflicts in asynchronous mode by taking advantage of vector clocks.
A conflict happens when 2 or more sites update the same key at the same time.
Let’s look at an example between 2 sites (&lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;            LON       NYC

k1=(n/a)    0,0       0,0

k1=2        1,0  --&amp;gt;  1,0   k1=2

k1=3        1,1  &amp;lt;--  1,1   k1=3

k1=5        2,1       1,2   k1=8

                 --&amp;gt;  2,1 (conflict)
(conflict)  1,2  &amp;lt;--

k1=5        2,1  &amp;lt;-&amp;gt;  2,1   k1=5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=2&lt;/code&gt;, with vector clock &lt;code&gt;1,0&lt;/code&gt;, and replicates it to &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=3&lt;/code&gt;, with vector clock &lt;code&gt;1,1&lt;/code&gt;, and replicates it to &lt;em&gt;LON&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However if &lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=5&lt;/code&gt; (with vector &lt;code&gt;2,1&lt;/code&gt;), and &lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=8&lt;/code&gt; in &lt;em&gt;NYC&lt;/em&gt; (with vector clock &lt;code&gt;1,2&lt;/code&gt;)
at the same time, Infinispan detects the conflict since none of the vector clocks are greater than the other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan resolves the conflicts by comparing using the site names in lexicographical order.
The site’s name lower in lexicographical order takes priority.
In the example above, both &lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt; end up with &lt;code&gt;k1=5&lt;/code&gt; since &lt;em&gt;LON&lt;/em&gt; &amp;lt; &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can choose the priority by prepending a number to the site name.
For example, if you want updates from &lt;em&gt;NYC&lt;/em&gt; to take priority over &lt;em&gt;LON&lt;/em&gt; updates,
you can prepend a number to the site name, example: &lt;em&gt;1NYC&lt;/em&gt;, &lt;em&gt;2LON&lt;/em&gt; and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information check the
&lt;a href=&quot;https://infinispan.org/docs/dev/titles/xsite/xsite.html#conflicting_entries-xsite&quot;&gt;Infinispan Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/06/04/server-secure-by-default/</id>
<title>Secure server by default</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-06-04T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/06/04/server-secure-by-default/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="server"></category>
<category term="security"></category>
<summary>
The Infinispan server we introduced in 10.0 exposes a single port through which both Hot Rod and HTTP clients can connect.


While Infinispan has had very extensive security support since 7.0, the out-of-the-box default configuration did not enable authentication.


Infinispan 11.0&#8217;s server&#8217;s default configuration, instead, requires authentication.
We have made several improvements to how authentication is configured and the tooling we provide to make the experience as smooth as possible.




Automatic authentication mechanism selection


Previously, when enabling authentication, you had to explicitly define which mechanisms had to be enabled per-protocol, with all of the peculiarities specific to each one (i.e. SASL for Hot Rod, HTTP...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan server we introduced in 10.0 exposes a single port through which both Hot Rod and HTTP clients can connect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Infinispan has had &lt;strong&gt;very&lt;/strong&gt; extensive security support since 7.0, the out-of-the-box default configuration did not enable authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 11.0’s server’s default configuration, instead, requires authentication.
We have made several improvements to how authentication is configured and the tooling we provide to make the experience as smooth as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automatic_authentication_mechanism_selection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_automatic_authentication_mechanism_selection&quot; /&gt;Automatic authentication mechanism selection&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, when enabling authentication, you had to explicitly define which mechanisms had to be enabled per-protocol, with all of the peculiarities specific to each one (i.e. SASL for Hot Rod, HTTP for REST). Here is an example configuration with Infinispan 10.1 that enables DIGEST authentication:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;socket-binding&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;security-realm&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;authentication&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;sasl&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;mechanisms&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DIGEST-MD5&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;server-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;infinispan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/authentication&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/hotrod-connector&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;authentication&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;mechanisms&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DIGEST&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/rest-connector&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Infinispan 11.0, the mechanisms are automatically selected based on the capabilities of the security realm. Using the following configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;socket-binding&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;security-realm&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;together with a properties security realm, will enable DIGEST for HTTP and SCRAM-*, DIGEST-* and CRAM-MD5 for Hot Rod. BASIC/PLAIN will only be implicitly enabled when the security realm has a TLS/SSL identity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following tables summarize the mapping between realm type and implicitly enabled mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch table&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. SASL Authentication Mechanisms (Hot Rod)&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Security Realm&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;SASL Authentication Mechanism&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Property Realms and LDAP Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SCRAM-*, DIGEST-*, CRAM-MD5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Token Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OAUTHBEARER&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trust Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EXTERNAL&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Kerberos Identities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;GSSAPI, GS2-KRB5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SSL/TLS Identities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PLAIN&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch table&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. HTTP Authentication Mechanisms (REST)&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Security Realm&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;HTTP Authentication Mechanism&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Property Realms and LDAP Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DIGEST&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Token Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BEARER_TOKEN&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trust Realms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CLIENT_CERT&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Kerberos Identities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SPNEGO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SSL/TLS Identities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BASIC&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automatic_encryption&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_automatic_encryption&quot; /&gt;Automatic encryption&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the security realm has a TLS/SSL identity, the endpoint will automatically enable TLS for all protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_encrypted_properties_security_realm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_encrypted_properties_security_realm&quot; /&gt;Encrypted properties security realm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The properties realm that is part of the default configuration has been greatly improved in Infinispan 11. The passwords are now stored in multiple encrypted formats in order to support the various DIGEST, SCRAM and PLAIN/BASIC mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;user&lt;/code&gt; functionality that is now built into the CLI allows easy creation and manipulation of users, passwords and groups:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[disconnected]&amp;gt; user create --password=secret --groups=admin admin
[disconnected]&amp;gt; connect --username=admin --password=secret
[ispn-29934@cluster//containers/default]&amp;gt; user ls
[ &quot;admin&quot; ]
[ispn-29934@cluster//containers/default]&amp;gt; user describe admin
{ username: &quot;admin&quot;, realm: &quot;default&quot;, groups = [admin] }
[ispn-29934@cluster//containers/default]&amp;gt; user password admin
Set a password for the user: ******
Confirm the password for the user: ******
[ispn-29934@cluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_authorization_simplified&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_authorization_simplified&quot; /&gt;Authorization: simplified&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Authorization is another security aspect of Infinispan. In previous versions, setting up authorization was complicated by the need to add all the needed roles to each cache:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;infinispan&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;authorization&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;identity-role-mapper&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;AdminRole&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;permissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ReaderRole&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;permissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WriterRole&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;permissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SupervisorRole&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;permissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;READ WRITE EXEC BULK_READ&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/authorization&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;distributed-cache&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;secured&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;authorization&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;roles&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;AdminRole ReaderRole WriterRole SupervisorRole&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/distributed-cache&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt;
   ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Infinispan 11 you can avoid specifying all the roles at the cache level: just enable authorization and all roles will implicitly apply. As you can see, the cache definition is much more concise:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;infinispan&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      ...
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;distributed-cache&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;secured&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;authorization&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/distributed-cache&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt;
   ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_conclusions&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_conclusions&quot; /&gt;Conclusions&lt;/h1&gt;
&lt;div class=&quot;openblock partintro&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
We hope that the changes we’ve made to improve security will make your servers more secure and easier to configure.
For more information read the &lt;a href=&quot;https://infinispan.org/docs/dev/titles/server/server.html#security&quot;&gt;server security documentation&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/05/30/hotrod-percache-configuration/</id>
<title>Hot Rod per-cache configuration</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-05-30T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/05/30/hotrod-percache-configuration/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="hot rod"></category>
<category term="configuration"></category>
<summary>
Aside from being able to configure a Java Hot Rod client through a compact URI representation, Infinispan 11 brings some additional changes to remote cache configuration.


While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the getCache() method, for example to obtain a transactional cache, or enabling near-caching.


Infinispan 11 now allows specifying per-cache configuration both through the API and through the declarative properties file.


Let&#8217;s look at a few examples.



ConfigurationBuilder builder = new ConfigurationBuilder()
    .uri(&quot;hotrod://127.0.0.1&quot;);
    .remoteCache(&quot;closecache&quot;)
        .nearCacheMode(NearCacheMode.INVALIDATED)
  ...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aside from being able to configure a Java Hot Rod client through a &lt;a href=&quot;https://infinispan.org/blog/&quot;&gt;compact URI&lt;/a&gt; representation, Infinispan 11 brings some additional changes to remote cache configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the &lt;code&gt;getCache()&lt;/code&gt; method, for example to obtain a transactional cache, or enabling near-caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 11 now allows specifying per-cache configuration both through the API and through the declarative properties file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s look at a few examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;ConfigurationBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConfigurationBuilder()
    .uri(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    .remoteCache(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;closecache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
        .nearCacheMode(NearCacheMode.INVALIDATED)
        .nearCacheMaxEntries(&lt;span class=&quot;integer&quot;&gt;10000&lt;/span&gt;)
    .remoteCache(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;txcache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
        .transactionMode(TransactionMode.NON_XA);
RemoteCacheManager manager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RemoteCacheManager(builder.build());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the above code snippet, we enable near-caching for the cache &lt;code&gt;closecache&lt;/code&gt; and we enable NON_XA transactions on the cache &lt;code&gt;txcache&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The equivalent &lt;code&gt;hotrod-client.properties&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1
infinispan.client.hotrod.cache.closecache.near_cache.mode=INVALIDATED
infinispan.client.hotrod.cache.closecache.near_cache.max_entries=10000
infinispan.client.hotrod.cache.txcache.transaction.transaction_mode=NON_XA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automatic_cache_creation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_automatic_cache_creation&quot; /&gt;Automatic cache creation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A neat feature that has been implemented as part of per-cache configuration, is the ability to automatically create a cache on the server on first use, if it is missing, by supplying either an existing template or a full-blown configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;ConfigurationBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConfigurationBuilder()
    .uri(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    .remoteCache(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;mydistcache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
        .templateName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.infinispan.DIST_SYNC&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
RemoteCacheManager manager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RemoteCacheManager(builder.build());
Cache&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; cache = manager.getCache(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;mydistcache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above example using a properties file would look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1
infinispan.client.hotrod.cache.mydistcache.template=org.infinispan.DIST_SYNC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/05/28/cli/</id>
<title>CLI enhancements</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-05-28T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/05/28/cli/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="cli"></category>
<category term="server"></category>
<category term="management"></category>
<category term="administration"></category>
<category term="logging"></category>
<summary>
One of the key aspects of our new server architecture is the management API exposed through the single port.


While I&#8217;m sure there will be those of you who like to write scripts with plenty of curl/wget magic, and those who prefer the comfort of our new web console,
the Infinispan CLI offers a powerful tool which combines the power of the former with the usability of the latter.


During the Infinispan 11 development cycle, the CLI has received numerous enhancements. Let&#8217;s look at some of them !




User management


When using the built-in properties-based security realm, you had to use the user-tool script to...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the key aspects of our new server architecture is the management API exposed through the single port.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I’m sure there will be those of you who like to write scripts with plenty of &lt;code&gt;curl/wget&lt;/code&gt; magic, and those who prefer the comfort of our new web console,
the Infinispan CLI offers a powerful tool which combines the power of the former with the usability of the latter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the Infinispan 11 development cycle, the CLI has received numerous enhancements. Let’s look at some of them !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_user_management&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_user_management&quot; /&gt;User management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the built-in properties-based security realm, you had to use the &lt;code&gt;user-tool&lt;/code&gt; script to manage users, passwords and groups. That functionality has now
been built into the CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[disconnected]&amp;gt; user create --password=secret --groups=admin john
[disconnected]&amp;gt; connect --username=joe --password=secret
[infinispan-29934@cluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_remote_logging_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_remote_logging_configuration&quot; /&gt;Remote logging configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now modify the server logging configuration from the CLI.
For example, to enable TRACE logging for the &lt;code&gt;org.jgroups&lt;/code&gt; category, use the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[infinispan-29934@cluster//containers/default]&amp;gt; logging set --level=TRACE org.jgroups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
logging configuration changes are volatile, i.e. they will be lost when restarting a node.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_report&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server_report&quot; /&gt;Server report&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To help with debugging issues, the server now implements an aggregate log which includes information such as a thread dump, memory configuration, open sockets/files, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[bespin-29934@cluster//containers/default]&amp;gt; server report
Downloaded report &#39;infinispan-bespin-29934-20200522114559-report.tar.gz&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
this feature currently only works on Linux/Unix systems.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_real_cli_mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_real_cli_mode&quot; /&gt;Real CLI mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to invoke all CLI commands directly from the command-line, without having to resort to interactive mode or a batch. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;cli.sh user create --password=secret --groups=admin john&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_native_cli&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_native_cli&quot; /&gt;Native CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI can now be built as a native executable, courtesy of &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;&#39;s &lt;code&gt;native-image&lt;/code&gt; tool. We will soon be shipping binaries/images of this, so look out for an announcement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/05/26/hotrod-uri/</id>
<title>Hot Rod URI</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-05-26T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/05/26/hotrod-uri/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="documentation"></category>
<summary>
Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API.


While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios.


Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you&#8217;d connect to a database via a JDBC driver URL.


The Hot Rod URI allows you to specify the addresses of the server cluster, authentication parameters and any other property in a simple compact String format.


The URI specification is:


hotrod[s]://[username:password]@host[:port][,host[:port]&#8230;&#8203;][?property=value[&amp;property=value&#8230;&#8203;]]




the protocol can be...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you’d connect to a database via a JDBC driver URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hot Rod URI allows you to specify the addresses of the server cluster, authentication parameters and any other property in a simple compact String format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The URI specification is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;hotrod[s]://[username:password]@host[:port][,host[:port]…​][?property=value[&amp;amp;property=value…​]]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the protocol can be either &lt;code&gt;hotrod&lt;/code&gt; (plain, unencrypted) or &lt;code&gt;hotrods&lt;/code&gt; (TLS/SSL, encrypted)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if username and password are specified, they will be used to authenticate with the server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;one or more addresses. If a port is not specified, the default &lt;code&gt;11222&lt;/code&gt; will be used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zero or more &lt;a href=&quot;https://docs.jboss.org/infinispan/11.0/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html&quot;&gt;properties&lt;/a&gt;, without the &lt;code&gt;infinispan.client.hotrod&lt;/code&gt; prefix, through which you can configure all other aspects such as connection pooling, authentication mechanisms, near caching, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;hotrod://localhost&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;simple connection to a server running on &lt;code&gt;localhost&lt;/code&gt; using the default port&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;authenticated connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; and &lt;code&gt;infinispan-host-2&lt;/code&gt; with explicit port&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;hotrods://infinispan-host-1?socket_timeout=1000&amp;amp;connect_timeout=2000&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;TLS/SSL connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; using the default port and with custom connection and socket timeouts&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The URI format can also be used as a starting point in your usual properties file or API configuration and further enriched using the traditional methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222
infinispan.client.hotrod.connect_timeout=100
infinispan.client.hotrod.socket_timeout=100
infinispan.client.hotrod.tcp_keep_alive=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;ConfigurationBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConfigurationBuilder()
    .uri(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    .socketTimeout(&lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;)
    .connectionTimeout(&lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;)
    tcpKeepAlive(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope this makes configuration simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/05/25/infinispan-11/</id>
<title>Infinispan 11.0.0.CR1</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-05-25T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/05/25/infinispan-11/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<summary>
Dear Infinispan community,


we&#8217;ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements.




Cross-Site Replication Improvements


The cross-site replication feature received two major improvements:




Support for multiple site masters

The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increase the number of site masters in RELAY2 configuration:



&lt;relay.RELAY2 site=&quot;LON&quot; max_site_masters=&quot;1000&quot;/&gt;




Conflict detection and resolution for Asynchronous Cross-Site Replication

Taking advantage of vector clocks, in asynchronous mode, Infinispan is able to detect conflicts.
A conflict happens when 2 or more sites update the same key at the same time.
Conflicts are resolved based on the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cross_site_replication_improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cross_site_replication_improvements&quot; /&gt;Cross-Site Replication Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cross-site replication feature received two major improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for multiple site masters&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increase the number of site masters in RELAY2 configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;site&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LON&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;max_site_masters&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Taking advantage of vector clocks, in asynchronous mode, Infinispan is able to detect conflicts.
A conflict happens when 2 or more sites update the same key at the same time.
Conflicts are resolved based on the site’s names. Updates from the site lexicographically lower, take priority, in case of  conflicts.
As an example, if you have 3 sites, LON, NYC and SFO, conflicts between LON and NYC discards updates from NYC and keeps the updates from LON.
You can choose the priority by prepending a number to the site name. For example, if you want updates from NYC to take priority, you can set the site name to “1-NYC”.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a future update, Infinispan will allow you to set a custom conflict resolution algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_non_blocking_internals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking_internals&quot; /&gt;Non-blocking internals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All thread pools collapsed into two pools: blocking and non-blocking&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_persistence&quot; /&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new non-blocking Store SPI&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_clustering&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_clustering&quot; /&gt;Clustering&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More accurate segment rebalancing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scaling without state-transfer (experimental)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_queryindexing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_queryindexing&quot; /&gt;Query/Indexing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SearchManager, CacheQuery are deprecated. Users are encouraged to migrate to Ickle String queries obtained from Search.getQueryFactory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server_security&quot; /&gt;Server Security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The server is now secure by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New encrypted properties realm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplified authentication and authorization configuration to be as automatic as possible&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_other_server_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_other_server_changes&quot; /&gt;Other Server changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime logging configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server report&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cli&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cli&quot; /&gt;CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;User Tool merged into CLI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLI can be compiled natively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-interactive usage&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_console&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_console&quot; /&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lots of UX improvements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kubernetesopenshift_operator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_kubernetesopenshift_operator&quot; /&gt;Kubernetes/OpenShift operator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cache CR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service .Expose with Ingress and Route&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_container_images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_container_images&quot; /&gt;Container images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Images based upon ubi-minimal:8.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native generation of config files in all images&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native server image available at &lt;code&gt;infinispan/server-native&lt;/code&gt; (Experimental)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_documentation&quot; /&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/03/03/infinispan-11/</id>
<title>Infinispan 11.0.0.Alpha2 and 10.1.3.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-03-03T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/03/03/infinispan-11/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<summary>
Dear Infinispan community,


we&#8217;ve just tagged a couple of releases.


First off is the second Alpha release of what will eventually become Infinispan 11. The release notes may not be exciting, but it is mostly preparatory work for the big features we are working on: vastly improved async cross-site replication, monitoring, query improvements, the console and the CLI, and more.


We also released a micro-update to 10.1 which fixes quite a few bugs, especially in the way we handle JMX and MP metrics and further improves the documentation.



New release naming scheme


Starting with the next development release of Infinispan 11, we will be adopting...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we’ve just tagged a couple of releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First off is the second Alpha release of what will eventually become Infinispan 11. The &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12344572&quot;&gt;release notes&lt;/a&gt; may not be exciting, but it is mostly preparatory work for the big features we are working on: vastly improved async cross-site replication, monitoring, query improvements, the console and the CLI, and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released a micro-update to 10.1 which fixes quite a few bugs, especially in the way we handle JMX and MP metrics and further improves the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_new_release_naming_scheme&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_new_release_naming_scheme&quot; /&gt;New release naming scheme&lt;/h1&gt;
&lt;div class=&quot;openblock partintro&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
Starting with the next development release of Infinispan 11, we will be adopting a new naming scheme. We will no longer be using the &lt;em&gt;Alpha&lt;/em&gt; and &lt;em&gt;Beta&lt;/em&gt; monikers, but we will use a progressive &lt;em&gt;Dev&lt;/em&gt; suffix to indicate that it’s a development release. The next release will therefore be called 11.0.0.Dev03.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/03/03/documentation-strategy/</id>
<title>Infinispan Documentation Strategy</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-03-03T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/03/03/documentation-strategy/" rel="alternate" type="text/html" />
<author>
<name>Don Naro</name>
</author>
<category term="documentation"></category>
<summary>
Hi there, Infinispan community.


I&#8217;m sure by now you&#8217;ve noticed a few changes in the docs so I&#8217;d like to take
the opportunity to explain what&#8217;s been going on.


Let&#8217;s go.




Set the Controls


The mission is to provide quality documentation for the Infinispan community.
But how do you define what that means? What is quality documentation?


Documentation exists to help you solve problems. And the effectiveness of
documentation in helping you do so is generally a good yardstick for measuring
quality.


Over time I&#8217;ve defined what I believe to be the primary criteria for effective
technical documentation:




Technically accurate and complete.


Concise.


Task-oriented.






Defining the Strategy


Perhaps the most challenging aspect for working on the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hi there, Infinispan community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m sure by now you’ve noticed a few changes in the docs so I’d like to take
the opportunity to explain what’s been going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_set_the_controls&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_set_the_controls&quot; /&gt;Set the Controls&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mission is to provide quality documentation for the Infinispan community.
But how do you define what that means? What is quality documentation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation exists to help you solve problems. And the effectiveness of
documentation in helping you do so is generally a good yardstick for measuring
quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time I’ve defined what I believe to be the primary criteria for effective
technical documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technically accurate and complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task-oriented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_defining_the_strategy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_defining_the_strategy&quot; /&gt;Defining the Strategy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perhaps the most challenging aspect for working on the Infinispan documentation
set is getting into that sweet spot that exists between the bleeding edge and
the gardening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bleeding edge is where the action happens. Ideally docs should stay up to
date with the code base and go through the same iterations, making improvements
with each development cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gardening is how I like to think of the maintenance work that docs require.
Much like an actual garden, documentation requires continual upkeep and
management to avoid turning into an overgrown, unnavigable jungle of
information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a team we’ve been implementing a documentation strategy to overcome these
challenges and achieve our mission of delivering quality tech docs. This
strategy centers around two things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Focusing on the tasks&lt;/div&gt;
&lt;p&gt;As I mentioned previously, documentation exists to help you solve problems.
Nobody ever sits down and reads the docs like you would a novel. Usually you
dip in when you hit a snag or are trying to work out how to do something.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Procedural content should provide a set of end-to-end steps that help you
succeed with your goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation that enumerates all available parameters and explains each
possible value is great but if it doesn’t tell you how to combine parameters in
the right way or when to set them, then it’s just giving users a long rope to
go hang themselves with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So hopefully one of the biggest things you’ll notice in the Infinispan
documentation is that we’re adding more procedures. We want to give you the
recommended fast path that gets you up and running as quickly as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Taking a topic-based approach&lt;/div&gt;
&lt;p&gt;Topics are logical units of information that can stand alone and map to various
information types, of which the three most common are Task, Concept, and
Reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the benefits of a topic-based writing is that it helps simplify things.
A big obstacle for any kind of writing is just getting a handle on what you
need to explain. Technical writers get writer’s block too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Topic-based writing helps to eliminate that obstacle and take the struggle out
of developing content. Start with the task and break things down according to
classification and figuring &lt;em&gt;what&lt;/em&gt; you need to write becomes much easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time topic-based writing reduces maintenance overhead. A huge win
for topics is that they allow reuse. Write something once and use it in
different contexts as needed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_quick_tour_of_the_repository_layout&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_quick_tour_of_the_repository_layout&quot; /&gt;Quick Tour of the Repository Layout&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I’ve explained some of the motivation, I’d like to briefly delve into
how we’ve organized the docs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation source lives in &lt;a href=&quot;https://github.com/infinispan/infinispan/tree/master/documentation/src/main/asciidoc&quot;&gt;documentation/src/main/asciidoc&lt;/a&gt; and has three
main subdirectories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan/tree/master/documentation/src/main/asciidoc/topics&quot;&gt;/topics&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Topics are all the different pieces of information that make up the
documentation. Asciidoc files in this directory are prefixed with &lt;code&gt;proc_*&lt;/code&gt; for
procedural content, &lt;code&gt;con_*&lt;/code&gt; for concepts, and &lt;code&gt;ref_*&lt;/code&gt; for reference material.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the prefixes, topic filenames should be readable and match headings
as they appear in the rendered version.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan/tree/master/documentation/src/main/asciidoc/stories&quot;&gt;/stories&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are asciidoc files prefixed with &lt;code&gt;assembly_*&lt;/code&gt; that organize topics into
complete, end-to-end sets of content that target specific use cases .&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinispan/infinispan/tree/master/documentation/src/main/asciidoc/titles&quot;&gt;/titles&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the main asciidoc files that pull together all the user stories into
the titles in the &lt;a href=&quot;https://infinispan.org/documentation/&quot;&gt;Infinispan community documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_finding_the_balance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_finding_the_balance&quot; /&gt;Finding the Balance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We really believe in all the changes we’ve been making to the docs. It’s been
exciting to see just how much transformation the doc set has undergone in just
over a year (&lt;a href=&quot;https://github.com/infinispan/infinispan/pull/6674&quot;&gt;PR 6674&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, given that Infinispan is a community project, we also recognize that
these changes have the potential to discourage contributions. Most
documentation updates that come from community contributors are small edits or
minor updates, usually one or two lines of text. Moving to a topic-based
structure adds complexity and creates extra work to make those small changes
because you have to sift through many more asciidoc files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Planning for the new docs strategy was done with core contributors with the
goal to preserve and encourage community participation. There have been doc PRs
that introduced structural changes that others didn’t agreed with. Getting
rejected and going back to the drawing board can feel like a setback but
ultimately it’s about finding the solution where everyone’s a winner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a balance to be had and, like so many things, you find it through
conversation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, on that note, I’ll leave it with a request to join us and keep the
conversation going.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;Report doc bugs (or ask for new content)&lt;/a&gt;, &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;stop by our Zulip room and hang out for a while&lt;/a&gt;, or &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;ask questions on StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/02/24/infinispan-operator-1/</id>
<title>Infinispan Operator 1.1.1 is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-02-24T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/02/24/infinispan-operator-1/" rel="alternate" type="text/html" />
<author>
<name>Vittorio Rigamonti</name>
</author>
<category term="release"></category>
<category term="operator"></category>
<summary>
We&#8217;re pleased to announce
version 1.1.1 of the Infinispan Operator
for Kubernetes and OpenShift.


This release has focused on fixing bugs and improving robustness, mainly related to the following:




improving reconcile flow stability


reducing Operator CPU load


cleaning up logs




Our community documentation on https://infinispan.org/documentation has also been updated and improved. You can find some of the
changes at:




Creating Infinispan Services


Setting Up Network Services


Monitoring Infinispan with Prometheus


Connecting to Infinispan Clusters






Automatic Upgrades


If you installed the Infinispan Operator on Red Hat OpenShift with the Automatic Approval upgrade policy,
your cluster should already be running the latest versions (Infinispan Operator 1.1.1 with Infinispan 10.1.2.Final).


We would like to hear opinions from you about...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 1.1.1 of the Infinispan Operator&lt;/a&gt;
for Kubernetes and OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release has focused on fixing bugs and improving robustness, mainly related to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;improving reconcile flow stability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reducing Operator CPU load&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cleaning up logs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our community documentation on &lt;a href=&quot;https://infinispan.org/documentation&quot; class=&quot;bare&quot;&gt;https://infinispan.org/documentation&lt;/a&gt; has also been updated and improved. You can find some of the
changes at:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#creating_services&quot;&gt;Creating Infinispan Services&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#network_services&quot;&gt;Setting Up Network Services&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#prometheus&quot;&gt;Monitoring Infinispan with Prometheus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#remote_connections&quot;&gt;Connecting to Infinispan Clusters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automatic_upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_automatic_upgrades&quot; /&gt;Automatic Upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you installed the Infinispan Operator on Red Hat OpenShift with the Automatic Approval upgrade policy,
your cluster should already be running the latest versions (Infinispan Operator 1.1.1 with Infinispan 10.1.2.Final).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to hear opinions from you about the automated upgrade process, so get in touch if you
have any issues or want to give any feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try the
&lt;a href=&quot;https://github.com/infinispan/infinispan-simple-tutorials/tree/master/operator&quot;&gt;simple tutorial&lt;/a&gt;
for the Operator, which has been updated for this version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/infinispan/infinispan-operator/issues&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, a detailed list of issues and features for this version can be found
&lt;a href=&quot;https://github.com/infinispan/infinispan-operator/issues?q=milestone%3A1.1.1+is%3Aclosed&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/02/20/server-config/</id>
<title>Infinispan Server configuration</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-02-20T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/02/20/server-config/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="server"></category>
<summary>
The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x.
One of the big differences is that the new server&#8217;s configuration is just an extension of the embedded configuration.


The XML snippet below shows the configuration used by the server "out-of-the-box":



&lt;infinispan
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd
                            urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&quot;
     ...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x.
One of the big differences is that the new server’s configuration is just an extension of the embedded configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The XML snippet below shows the configuration used by the server &quot;out-of-the-box&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;infinispan&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt;
                            &lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns:server&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;statistics&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot; /&gt;&lt;b&gt;(1)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;transport&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;cluster&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;stack&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;node-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;server&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot; /&gt;&lt;b&gt;(2)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot; /&gt;&lt;b&gt;(3)&lt;/b&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;inet-address&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.bind.address:127.0.0.1}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;default-interface&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port-offset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot; /&gt;&lt;b&gt;(4)&lt;/b&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;memcached&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;11221&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot; /&gt;&lt;b&gt;(5)&lt;/b&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Uncomment to enable TLS on the realm --&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- server-identities&amp;gt;
                  &amp;lt;ssl&amp;gt;
                     &amp;lt;keystore path=&quot;application.keystore&quot; relative-to=&quot;infinispan.server.config.path&quot;
                               keystore-password=&quot;password&quot; alias=&quot;server&quot; key-password=&quot;password&quot;
                               generate-self-signed-certificate-host=&quot;localhost&quot;/&amp;gt;
                  &amp;lt;/ssl&amp;gt;
               &amp;lt;/server-identities--&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;groups-attribute&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;users.properties&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;relative-to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;plain-text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;groups.properties&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;relative-to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;socket-binding&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;security-realm&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot; /&gt;&lt;b&gt;(6)&lt;/b&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s have a look at the various elements, describing their purposes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot; /&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;cache-container&lt;/code&gt; element is a standard Infinispan cache manager configuration like you’d use in embedded deployments. You can decide to leave it empty and create any caches at runtime using the CLI, Console or Hot Rod and RESTful APIs, or statically predefine your caches here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot; /&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;server&lt;/code&gt; element holds the server-specific configuration which includes network, security and protocols.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot; /&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;interface&lt;/code&gt; element declares named interfaces which are associated with specific addresses/interfaces. The default &lt;code&gt;public&lt;/code&gt; interface will use the loopback address &lt;code&gt;127.0.0.1&lt;/code&gt; unless overridden with the &lt;code&gt;-b&lt;/code&gt; switch or the &lt;code&gt;infinispan.bind.address&lt;/code&gt; system property. Refer to &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html#server_interfaces-server&quot;&gt;server interfaces&lt;/a&gt; documentation for a detailed list of all possible ways of selecting an address.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot; /&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;socket-bindings&lt;/code&gt; element associates addresses and ports with unique names you can use later on configuring the protocol endpoints. For convenience, a &lt;em&gt;port offset&lt;/em&gt; can be added to all port numbers to ease starting multiple servers on the same host. Use the &lt;code&gt;-o&lt;/code&gt; switch or the &lt;code&gt;infinispan.socket.binding.port-offset&lt;/code&gt; system property to change the offset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot; /&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;security&lt;/code&gt; element configures the server’s realms and identities. We will ignore this for now as this deserves its own dedicated blog post in the near future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot; /&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;endpoints&lt;/code&gt; element configures the various protocol servers. Unless overridden, all sub protocols are aggregated into a &lt;em&gt;single-port&lt;/em&gt; endpoint which, as its name suggests, listens on a single port and automatically detects the incoming protocol, delegating to the appropriate handler.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;rest-connector&lt;/code&gt; has a special role in the new server, since it now also handles administrative tasks. It is therefore required if you want to use the CLI or the Console. You may wish to have the protocols listen on different ports, as outlined in the configuration below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;infinispan&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt;
                            &lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;attribute-name&quot;&gt;xmlns:server&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;statistics&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;transport&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;cluster&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;stack&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;node-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;server&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;match-interface&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eth0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;loopback&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;default-interface&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port-offset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;interface&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;groups-attribute&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;users.properties&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;relative-to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;plain-text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;groups.properties&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;relative-to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;socket-binding&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;security-realm&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hotrod&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;socket-binding&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This creates two &lt;em&gt;socket bindings&lt;/em&gt;, one named &lt;strong&gt;public&lt;/strong&gt; bound to the &lt;code&gt;eth0&lt;/code&gt; interface and one named &lt;strong&gt;admin&lt;/strong&gt; bound to the loopback interface. The server will therefore listen for Hot Rod traffic only on the &lt;strong&gt;public&lt;/strong&gt; network and for HTTP/REST traffic on the &lt;strong&gt;admin&lt;/strong&gt; network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details on how to configure Infinispan Server, refer to our &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next blog post we will have an in-depth look at security.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/02/10/spring-boot-release-2/</id>
<title>Infinispan Spring Boot Starter released with Spring Boot 2.2.4.RELEASE</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-02-10T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/02/10/spring-boot-release-2/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term="release"></category>
<category term="spring boot"></category>
<category term="spring"></category>
<summary>
Dear Infinispan and Spring Boot users,


We are pleased to announce the release of
Infinispan Spring Boot 
2.1.8.Final and 2.2.0.Final.


2.1.8.Final uses Infinispan 9.4.17.Final and Spring Boot 2.2.2.RELEASE


2.2.0.Final uses Infinispan 10.1.1.Final and Spring Boot 2.2.2.RELEASE 




Configuring Marshalling with Infinispan 10.x


Infinispan 10.x servers have some significant changes to marshalling that impact Spring Boot users.


The default Marshaller for Infinispan 10.x is ProtoStream, which uses
Protocol Buffers to provide extensible, language and platform neutral
serialization.


Unfortunately ProtoStream does not currently work with Infinispan Spring Cache and Session support.
As a result, Spring users in Remote Client/Server Mode must use the Java Serialization Marshaller and add classes
to a Java serialization whitelist.


Add the following configuration properties:


infinispan.remote.marshaller=org.infinispan.commons.marshall.JavaSerializationMarshaller
infinispan.remote.java-serial-whitelist=org.infinispan.tutorial.simple.spring.remote.*


The...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are pleased to announce the release of
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan Spring Boot&lt;/a&gt; 
&lt;strong&gt;2.1.8.Final&lt;/strong&gt; and &lt;strong&gt;2.2.0.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.8.Final&lt;/strong&gt; uses &lt;strong&gt;Infinispan 9.4.17.Final&lt;/strong&gt; and &lt;strong&gt;Spring Boot 2.2.2.RELEASE&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.2.0.Final&lt;/strong&gt; uses &lt;strong&gt;Infinispan 10.1.1.Final&lt;/strong&gt; and &lt;strong&gt;Spring Boot 2.2.2.RELEASE&lt;/strong&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_marshalling_with_infinispan_10_x&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configuring_marshalling_with_infinispan_10_x&quot; /&gt;Configuring Marshalling with Infinispan 10.x&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10.x servers have some significant changes to &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#marshalling&quot;&gt;marshalling&lt;/a&gt; that impact Spring Boot users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default Marshaller for Infinispan 10.x is &lt;a href=&quot;https://github.com/infinispan/protostream&quot;&gt;ProtoStream&lt;/a&gt;, which uses
&lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protocol Buffers&lt;/a&gt; to provide extensible, language and platform neutral
serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately ProtoStream does not currently work with Infinispan Spring Cache and Session support.
As a result, Spring users in Remote Client/Server Mode must use the &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#java_serialization_marshaller&quot;&gt;Java Serialization Marshaller&lt;/a&gt; and add classes
to a Java serialization whitelist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following configuration properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;infinispan.remote.marshaller=org.infinispan.commons.marshall.JavaSerializationMarshaller&lt;/code&gt;
&lt;code&gt;infinispan.remote.java-serial-whitelist=org.infinispan.tutorial.simple.spring.remote.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;infinispan.remote.java-serial-whitelist&lt;/code&gt; property specifies the classes, or packages, that Java
serialization can marshall. Separate multiple class names with a comma (&lt;code&gt;,&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that, in previous versions, JBoss Marshaller was the default for Infinispan. Spring users can also use &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#jboss_marshalling&quot;&gt;JBoss Marshalling&lt;/a&gt;,
but it is deprecated as of Infinispan 10.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find these releases in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2020/01/24/infinispan-operator-1/</id>
<title>Infinispan Operator 1.1.0 is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2020-01-24T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2020/01/24/infinispan-operator-1/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term="release"></category>
<category term="operator"></category>
<summary>
We&#8217;re pleased to announce
version 1.1.0 of the Infinispan Operator
for Kubernetes and OpenShift.


This release includes a bunch of very exciting features! Let&#8217;s dig into them:




Full Lifecycle


Infinispan Operator 1.1.0 is rated at the Full Lifecycle capacity level, which
means the Operator now provides advanced cluster management capabilities and
functionality to handle demanding workloads.


One of the key new features in this release is graceful shutdown, which lets
you bring clusters down safely to avoid data loss.


During cluster shutdown, caches can passivate in-memory entries
to persistent storage along with the internal Infinispan state that maps
which nodes own which entries. When you bring Infinispan clusters back,
all your data is...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re pleased to announce
&lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;version 1.1.0 of the Infinispan Operator&lt;/a&gt;
for Kubernetes and OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes a bunch of very exciting features! Let’s dig into them:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_full_lifecycle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_full_lifecycle&quot; /&gt;Full Lifecycle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Operator 1.1.0 is rated at the &lt;code&gt;Full Lifecycle&lt;/code&gt; capacity level, which
means the Operator now provides advanced cluster management capabilities and
functionality to handle demanding workloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the key new features in this release is graceful shutdown, which lets
you bring clusters down safely to avoid data loss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During cluster shutdown, caches can passivate in-memory entries
to persistent storage along with the internal Infinispan state that maps
which nodes own which entries. When you bring Infinispan clusters back,
all your data is restored to memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#shutting_down-start&quot;&gt;Graceful Shutdown&lt;/a&gt;
docs for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Graceful shutdown also enables the Infinispan Operator to
perform reliable upgrades.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a new version of the Infinispan Operator starts,
it checks for running Infinispan clusters that were created by an older Operator version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the Operator detects a cluster that requires upgrade, it invokes a graceful shutdown
on the cluster and then brings it back with the new Infinispan version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can perform upgrade manually or automatically with the
&lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/operators/understanding-olm/olm-understanding-olm.html&quot;&gt;Operator Lifecycle Manager&lt;/a&gt; on OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that Operators installed via the OperatorHub on OpenShift Container Platform are managed by the Operator Lifecyle Manager.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cache_vs_datagrid&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cache_vs_datagrid&quot; /&gt;Cache vs DataGrid&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version of the Infinispan Operator delivers Cache and DataGrid services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default the Operator starts Infinispan clusters as Cache services, which
provides a quick way to set up in-memory caching that stores data off-heap and
keeps single copies of data in the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DataGrid services, on the other hand, are suited to more advanced use cases where
you control and define the configuration that you need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cross_site_replication&quot; /&gt;Cross-Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Operator simplifies cross-site replication set up with DataGrid services
so you can back data up between separate Kubernetes or OpenShift clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All you need to do is specify which type of external Kubernetes service to expose,
the list of all backup locations, access secrets, and the local site name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more at:
&lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html#configuring_backup_sites&quot;&gt;Cross-Site Replication&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automatic_tls_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_automatic_tls_configuration&quot; /&gt;Automatic TLS configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re running on Openshift and have a service that serves certificates,
the Operator automatically asks for certificates sets up TLS for your
endpoint connections. Encrypted by default with zero effort!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try the
&lt;a href=&quot;https://github.com/infinispan/infinispan-simple-tutorials/tree/master/operator&quot;&gt;simple tutorial&lt;/a&gt;
for the Operator, which has been updated for this version.
The tutorial shows how to install the Operator manually,
but it can also be installed via the Operator Hub on OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/infinispan/infinispan-operator/issues&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, a detailed list of issues and features for this version can be found
&lt;a href=&quot;https://github.com/infinispan/infinispan-operator/issues?q=milestone%3A1.1.0+is%3Aclosed&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/12/23/infinispan-10/</id>
<title>Infinispan 10.1.0.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-12-23T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/12/23/infinispan-10/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release"></category>
<summary>
Hi there,


we finish 2019 in style with the Final release of Infinispan 10.1, codenamed "Turia".




Server console


The highlight of this release is the new server console which is now based on Patterfly 4 and React.js.
We will soon have a blog post detailing the work that has been done and our future plans. In the meantime, here are a few screenshots:



















Security


Many changes related to security have happened since 10.0:




Native SSL/TLS provided by WildFly OpenSSL. The server only ships with native libraries for Linux x86_64, but you can download natives for other platforms and architectures


Improved usability of the Hot Rod client configuration with...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hi there,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we finish 2019 in style with the Final release of Infinispan 10.1, codenamed &lt;a href=&quot;https://www.cervezaturia.es&quot;&gt;&quot;Turia&quot;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_console&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server_console&quot; /&gt;Server console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The highlight of this release is the new server console which is now based on &lt;a href=&quot;https://www.patternfly.org/v4/&quot;&gt;Patterfly 4&lt;/a&gt; and &lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt;.
We will soon have a blog post detailing the work that has been done and our future plans. In the meantime, here are a few screenshots:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispn101welcome.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/thumb/ispn101welcome.png&quot; alt=&quot;Welcome Page&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispn101console.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/thumb/ispn101console.png&quot; alt=&quot;Console Caches&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;//infinispan.org/blog/img/ispn101console2.png&quot;&gt;&lt;img src=&quot;//infinispan.org/blog/thumb/ispn101console2.png&quot; alt=&quot;Console Cache Stats&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_security&quot; /&gt;Security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many changes related to security have happened since 10.0:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Native SSL/TLS provided by &lt;a href=&quot;https://github.com/wildfly-security/wildfly-openssl&quot;&gt;WildFly OpenSSL&lt;/a&gt;. The server only ships with native libraries for Linux x86_64, but you can download natives for other platforms and architectures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved usability of the Hot Rod client configuration with better defaults&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support for authorization for admin operations via the RESTful endpoint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Console authentication support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kerberos authentication for both Hot Rod (GSSAPI, GS2) and HTTP/Rest (SPNEGO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved LDAP realm configuration with connection tuning and attribute references&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rewritten client/server security documentation including examples on how to create certificate chains, connecting to various LDAP directories and &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;KeyCloak&lt;/a&gt;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server&quot; /&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A command-line switch to specify an alternate logging configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query and indexing operations/stats are now exposed over the RESTful API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks and Scripting support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for binding the endpoints to 0.0.0.0 / ::0 (aka INADDR_ANY)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_non_blocking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking&quot; /&gt;Non-blocking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More work has landed on the quest to completely remove blocking calls from our internals. The following have been made non-blocking:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;State transfer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The size operation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache stream ops with primitive types&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally caches now have a reactive Publisher which is intended as a fully non-blocking approach to distributed operations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_query&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_query&quot; /&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The query components have been reorganized so that they are more modular.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_monitoring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_monitoring&quot; /&gt;Monitoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The introduction of histogram and timer metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;/metrics&lt;/code&gt; endpoint now includes &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; microprofile metrics&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stores&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_stores&quot; /&gt;Stores&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The REST cache store has been updated to use the v2 RESTful API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_removals_and_deprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removals_and_deprecations&quot; /&gt;Removals and deprecations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The old RESTful API (v1) has been partially reinstated until 11.0. Bulk ops are disabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Infinispan Lucene Directory has been deprecated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The memcached protocol server has been deprecated. If you were relying on this, come and talk to us about working on a binary protocol implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_fixes_clean_ups_and_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_bug_fixes_clean_ups_and_documentation&quot; /&gt;Bug fixes, clean-ups and documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over 160 issues fixed including a lot of documentation updates. See the &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12344079&quot;&gt;full list of changes and fixes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/12/09/infinispan-10/</id>
<title>Infinispan 10.1.0.CR1</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-12-09T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/12/09/infinispan-10/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="release candidate"></category>
<category term="release"></category>
<summary>
Dear Infinispan community,


as we are closing in on 10.1, we have been working on a lot of polishing and bugfixing.




Server




The new console has received a lot of improvements,


A new welcome page


A command-line switch to specify an alternate logging configuration file






Query


The query components have been reorganized so that they are more modular.




Monitoring




The introduction of histogram and timer metrics.






Stores




The REST cache store has been updated to use the v2 RESTful API.






Removals and deprecations




The old RESTful API (v1) has been removed


The Infinispan Lucene Directory has been deprecated.


The memcached protocol server has been deprecated. If you were relying on this, come and talk to...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;as we are closing in on 10.1, we have been working on a lot of polishing and bugfixing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server&quot; /&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The new console has received a lot of improvements,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new welcome page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A command-line switch to specify an alternate logging configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_query&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_query&quot; /&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The query components have been reorganized so that they are more modular.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_monitoring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_monitoring&quot; /&gt;Monitoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The introduction of histogram and timer metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stores&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_stores&quot; /&gt;Stores&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The REST cache store has been updated to use the v2 RESTful API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_removals_and_deprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removals_and_deprecations&quot; /&gt;Removals and deprecations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The old RESTful API (v1) has been removed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Infinispan Lucene Directory has been deprecated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The memcached protocol server has been deprecated. If you were relying on this, come and talk to us about working on a binary protocol implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_fixes_clean_ups_and_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_bug_fixes_clean_ups_and_documentation&quot; /&gt;Bug fixes, clean-ups and documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over 40 issues fixed including a lot of documentation updates. See the &lt;a href=&quot;&quot;&gt;full list of changes and fixes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10.1.0.Final is scheduled for December the 20th.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/12/02/image/</id>
<title>Infinispan&#39;s new image</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-12-02T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/12/02/image/" rel="alternate" type="text/html" />
<author>
<name>Ryan Emerson</name>
</author>
<category term="docker"></category>
<summary>
Infinispan 10 introduced a new server, which does not utilise the same
launch commands and configuration as the legacy 9.4 wildfly based server. Therefore, we decided that this was an excellent
opportunity to rewrite our container image from scratch to better suite the capabilities of the new server and to provide
all the functionality required by the Infinispan Operator.


This post focuses on the server image&#8217;s architecture. Future blog posts will focus on more advanced configurations, as well as
example usage and deployment scenarios such as deploying a cluster using Kubernetes StatefulSets.




Show me the code!


The source code for the Infinispan image has a new home....
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10 introduced a &lt;a href=&quot;https://infinispan.org/blog/2019/11/11/serverng/&quot;&gt;new server&lt;/a&gt;, which does not utilise the same
launch commands and configuration as the legacy 9.4 wildfly based server. Therefore, we decided that this was an excellent
opportunity to rewrite our container image from scratch to better suite the capabilities of the new server and to provide
all the functionality required by the &lt;a href=&quot;https://infinispan.org/blog/2019/11/25/infinispan-operator-1/&quot;&gt;Infinispan Operator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post focuses on the server image’s architecture. Future blog posts will focus on more advanced configurations, as well as
example usage and deployment scenarios such as deploying a cluster using Kubernetes StatefulSets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_show_me_the_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_show_me_the_code&quot; /&gt;Show me the code!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code for the Infinispan image has a new home. The image can be found at &lt;a href=&quot;https://github.com/infinispan/infinispan-images&quot; class=&quot;bare&quot;&gt;https://github.com/infinispan/infinispan-images&lt;/a&gt;.
Currently this repository only contains the server image, however our intention is for this to also be the home for all
future Infinispan related images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wheres_the_dockerfile&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_wheres_the_dockerfile&quot; /&gt;Where’s the Dockerfile?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most noticable change when looking at the repository is that there is no &lt;code&gt;Dockerfile&lt;/code&gt; in the source tree. This is because
we decided to utilise the open-source tool &lt;a href=&quot;https://cekit.io/&quot;&gt;CEKit&lt;/a&gt; to build our images. CEKit is an image creation tool
that allows container images to be created using multiple build engines (e.g. docker, &lt;a href=&quot;https://buildah.io/&quot;&gt;Buildah&lt;/a&gt;, &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt;)
with a single configuration. Installation instructions can be found &lt;a href=&quot;https://docs.cekit.io/en/latest/handbook/installation/instructions.html&quot;&gt;here&lt;/a&gt;,
but the basic command to create a Docker based image is as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;cekit build docker&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CEKit leverages &lt;code&gt;.yaml&lt;/code&gt; files for all configuration, opposed to a Dockerfile, as this allows for build time overriding of
image properties. For example, with CEKit it’s possible to override the server artifact version without modifying any files,
instead the following is passed as a build parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;cekit build --overrides &#39;{&quot;artifacts&quot;: [{&quot;name&quot;: &quot;server.zip&quot;, &quot;path&quot;: &quot;infinispan-server-10.0.0-SNAPSHOT.zip&quot;}]}&#39; docker&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More detailed instructions about how to build the server image from source can be found in the
&lt;a href=&quot;https://github.com/infinispan/infinispan-images/tree/10.0.x#creating-images&quot;&gt;image’s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ok_so_where_can_i_get_a_pre_built_image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_ok_so_where_can_i_get_a_pre_built_image&quot; /&gt;Ok so where can I get a pre-built image?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously the Infinispan images were deployed exclusively under the &lt;code&gt;jboss&lt;/code&gt; namespace at &lt;a href=&quot;https://hub.docker.com/r/jboss/infinispan-server/&quot;&gt;jboss/infinispan-server&lt;/a&gt;,
however this repository has now been deprecated and will be removed eventually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, all Infinispan images will now be released under the &lt;code&gt;infinispan&lt;/code&gt; namespace and are hosted at both &lt;a href=&quot;https://quay.io/infinispan/server&quot;&gt;Quay.io&lt;/a&gt;
and &lt;a href=&quot;https://hub.docker.com/r/infinispan/server&quot;&gt;Docker Hub&lt;/a&gt;, as &lt;code&gt;quay.io/infinispan/server&lt;/code&gt; and &lt;code&gt;infinispan/server&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_getting_started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_getting_started&quot; /&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with infinispan server on your local machine simply execute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -p 11222:11222 infinispan/server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default the image has authentication enabled on all exposed endpoints. When executing the above command the image
automatically generates a username/password combo, prints the values to stdout and then starts the Infinispan server with
the authenticated Hotrod and Rest endpoints exposed on port 11222. Therefore, it’s necessary to utilise the printed
credentials when attempting to access the exposed endpoints via clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s also possible to provide a username/password combination via environment variables like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -p 11222:11222 -e USER=&quot;Titus Bramble&quot; -e PASS=&quot;Shambles&quot; infinispan/server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_connecting_via_hotrod&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_connecting_via_hotrod&quot; /&gt;Connecting via Hotrod&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the credentials passed in the command above, it is now possible to connect via the HotRod client using the following
&lt;code&gt;hotrod-client.properties&lt;/code&gt; file. Note, that the following SASL properties must be configured on your client, with the
username and password properties changed as required, otherwise the connection will fail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;infinispan.remote.auth-realm=default
infinispan.remote.auth-server-name=infinispan
infinispan.remote.auth-username=Titus Bramble
infinispan.remote.auth-password=Shambles&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_connecting_via_rest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_connecting_via_rest&quot; /&gt;Connecting via REST&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The REST endpoint is configured to utilise the DIGEST protocol, therefore it’s necessary for the HTTP client to authenticate
requests. For example, the name of all caches can be retrieved via the following curl command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt; curl --digest -u &quot;Titus Bramble:Shambles&quot; http://localhost:11222/rest/v2/cache&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_further_reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_further_reading&quot; /&gt;Further Reading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more detailed information abou how to use the image, please consult the
&lt;a href=&quot;https://github.com/infinispan/infinispan-images/blob/10.0.x/README.md&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next blog post we will look at how the server can be configured for more advanced use-cases by supplying configuration
and identity &lt;code&gt;.yaml&lt;/code&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/11/25/infinispan-operator-1/</id>
<title>Infinispan Operator 1.0.1</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-11-25T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/11/25/infinispan-operator-1/" rel="alternate" type="text/html" />
<author>
<name>Vittorio Rigamonti</name>
</author>
<category term="dev-preview"></category>
<category term="release"></category>
<summary>
Dear Infinispan community,


we know you are happy with the new shining 10.0.0 Infinispan release, but if you are among those who are missing a new operator version for safely running your Infinispan Chupachabra in the clound, this post is for you!




Versioning and channels

This is our first blog post about 1.0.x operator series (yeah, sorry 1.0.0 we forgot about you) and as you can notice there&#8217;s no Alpha, Beta or CR label at the end of the release tag.  This is because OperatorHub and Openshift Catalog only allow numerical version like Maj.Min.Mic and instead of labels we now use the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we know you are happy with the new shining 10.0.0 Infinispan release, but if you are among those who are missing a new operator version for safely running your Infinispan Chupachabra in the clound, this post is for you!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_versioning_and_channels&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_versioning_and_channels&quot; /&gt;Versioning and channels&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is our first blog post about 1.0.x operator series (yeah, sorry 1.0.0 we forgot about you) and as you can notice there’s no Alpha, Beta or CR label at the end of the release tag.  This is because OperatorHub and Openshift Catalog only allow numerical version like Maj.Min.Mic and instead of labels we now use the channel to indicate the stability of a release. We have 2 live channels at the moment for the Infinispan operator: &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;dev-preview&lt;/code&gt;. Current &lt;code&gt;stable&lt;/code&gt; is 0.3.2 which is for the 9.x Infinispan cluster and current &lt;code&gt;dev-preview&lt;/code&gt; is 1.0.1 which works with 10.x clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_new_features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_new_features&quot; /&gt;New features&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New Infinispan image configuration: we cleaned up the image configuration process: instead of rely on a large set of env variables, now the operator configures the Infinispan image via a single .yaml file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container configurability: CR .yaml file lets you configure memory and CPU (and also extras Java opts) assigned to the container;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encryption: TLS can be setup providing TLS certificates or using platform service as the Openshift seriving certs service (TLS will be on by default in the next release);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We now have some good docs: &lt;a href=&quot;https://infinispan.org/infinispan-operator/master/operator.html&quot; class=&quot;bare&quot;&gt;https://infinispan.org/infinispan-operator/master/operator.html&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project README has been also improved: &lt;a href=&quot;https://github.com/infinispan/infinispan-operator/blob/1.0.1/README.md&quot; class=&quot;bare&quot;&gt;https://github.com/infinispan/infinispan-operator/blob/1.0.1/README.md&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_get_it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it&quot; /&gt;Get it&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Operator 1.0.1 works on Kind/Kubernetes 1.16 (CI) and Openshift 3.11, 4.x (developed on). You can install it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;manually, follow the README;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with OLM on Kubernetes, &lt;a href=&quot;https://operatorhub.io/operator/infinispan/dev-preview/infinispan-operator.v1.0.0&quot; class=&quot;bare&quot;&gt;https://operatorhub.io/operator/infinispan/dev-preview/infinispan-operator.v1.0.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with OLM from the Openshift Operator Catalog&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And remember: it’s a dev-preview release, you can have a lot of fun with it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_contribute&quot; /&gt;Contribute&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual source code is open at: &lt;a href=&quot;https://github.com/infinispan/infinispan-operator&quot; class=&quot;bare&quot;&gt;https://github.com/infinispan/infinispan-operator&lt;/a&gt;. You can see what’s going on, comment the code or the new pull requests, ask for new features and also develop them!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for following us,
Infinispan&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/11/18/infinispan-1010beta1/</id>
<title>Infinispan 10.1.0.Beta1</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-11-18T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/11/18/infinispan-1010beta1/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="beta"></category>
<category term="release"></category>
<summary>
Dear Infinispan community,


Quick on the heels of Infinispan 10.0 here comes the first Beta or 10.1.




Server


This release closes the gap between the legacy server and the new server we introduced in 10.0. In particular:




The reworked console (which will be described in detail in an upcoming series of blog posts)


Kerberos authentication for both Hot Rod (GSSAPI, GS2) and HTTP/Rest (SPNEGO)


Query and indexing operations/stats are now exposed over the RESTful API


Tasks and Scripting support






Non-blocking


More work has landed on the quest to completely remove blocking calls from our internals. The following have been made non-blocking:




the size operation


cache stream ops with primitive types




Additionally caches...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quick on the heels of Infinispan 10.0 here comes the first Beta or 10.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server&quot; /&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release closes the gap between the legacy server and the new server we introduced in 10.0. In particular:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The reworked console (which will be described in detail in an upcoming series of blog posts)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kerberos authentication for both Hot Rod (GSSAPI, GS2) and HTTP/Rest (SPNEGO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query and indexing operations/stats are now exposed over the RESTful API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks and Scripting support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_non_blocking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking&quot; /&gt;Non-blocking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More work has landed on the quest to completely remove blocking calls from our internals. The following have been made non-blocking:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the size operation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cache stream ops with primitive types&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally caches now have a reactive Publisher which is intended as a fully non-blocking approach to distributed operations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_components_upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_components_upgrades&quot; /&gt;Components upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rxjava 2.2.12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye metrics 2.3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;microprofile metrics 2.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_fixes_clean_ups_and_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_bug_fixes_clean_ups_and_documentation&quot; /&gt;Bug fixes, clean-ups and documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over 40 bug fixes. See the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12343102&quot;&gt;full list of changes and fixes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10.1.0.CR1 is scheduled for December the 7th.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/11/11/serverng/</id>
<title>Infinispan&#39;s new server</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-11-11T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/11/11/serverng/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="server"></category>
<summary>
One of the biggest changes in Infinispan 10 is the new server, which replaces the WildFly-based server we had been using up until 9.x.


This is the first of a series of blog posts which will describe the new server, how to use it, how to configure it and how to deploy it in your environment. More specifically, this post will focus mostly on the reasons behind the change, while the next ones will be of a more practical nature.




A history of servers


Infinispan has had a server implementing the Hot Rod protocol since 4.1. Originally it was just a main class...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the biggest changes in Infinispan 10 is the new server, which replaces the WildFly-based server we had been using up until 9.x.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first of a series of blog posts which will describe the new server, how to use it, how to configure it and how to deploy it in your environment. More specifically, this post will focus mostly on the reasons behind the change, while the next ones will be of a more practical nature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_history_of_servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_a_history_of_servers&quot; /&gt;A history of servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan has had a server implementing the Hot Rod protocol since 4.1. Originally it was just a main class which bootstrapped the server protocol. It was configured via the same configuration file used by the embedded library, it had no security and only handled Hot Rod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time both a RESTful HTTP and a Memcached protocol were added and could be bootstrapped in the same way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the server bootstrap code was trivial, it was not going to scale to support all the things we needed (security, management, provisioning, etc). We therefore decided to build our next server on top of the very robust foundation provided by WildFly (aka, the application server previously known as JBoss AS 7), which made its first appearance in 5.3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Integration with WildFly’s management model was not trivial but it gave us all of the things we were looking for and more, such as deployments, data sources, CLI, console, etc. It also came with a way to provision multiple nodes and manage them from a central controller, i.e. domain mode. All of these facilities however came at the cost of a lot of extra integration code to maintain as well as a larger footprint, both in terms of memory and storage use, caused by a number of subsystems which we had to carry along, even though we didn’t use them directly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_different_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_a_different_server&quot; /&gt;A different server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fast-forward several versions, and the computing landscape has changed considerably: services are containerized, they are provisioned and managed via advanced orchestration tools like Kubernetes or via configuration management tools like Ansible and the model we were using was overlapping (if not altogether clashing) with the container model, where global configuration is immutable and managed externally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the above in mind, we have therefore decided to &lt;em&gt;reboot&lt;/em&gt; our server implementation. During planning and development it has been known affectionately as &lt;em&gt;ServerNG&lt;/em&gt;, but nowadays it is just the &lt;em&gt;Infinispan Server&lt;/em&gt;. The WildFly-based server is now the &lt;em&gt;legacy server&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configuration&quot; /&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new server separates global configuration (clustering, endpoints, security) from the configuration of dynamic resources like caches, counters, etc. This means that global configuration can be made immutable while the mutable configuration is stored separately in the global persistence location. In a containerized environment you will place the persistence location onto a volume that will survive restarts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_a_quick_two_node_cluster_with_docker&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_a_quick_two_node_cluster_with_docker&quot; /&gt;A quick two-node cluster with Docker&lt;/h1&gt;
&lt;div class=&quot;openblock partintro&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting a two-node cluster using the latest version of the server image is easy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ docker run --name ispn1 --hostname ispn1 -e USER=admin -e PASS=admin -p 11222:11222 infinispan/server
$ docker run --name ispn2 --hostname ispn2 -e USER=admin -e PASS=admin -p 11322:11222 infinispan/server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two nodes will discover each other, as can be seen from the logs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;15:58:21,201 INFO  [org.infinispan.CLUSTER] (jgroups-5,ispn-1-42736) ISPN000094: Received new cluster view for channel infinispan: [ispn-1-42736|1] (2) [ispn-1-42736, ispn-2-51789]
15:58:21,206 INFO  [org.infinispan.CLUSTER] (jgroups-5,ispn-1-42736) ISPN100000: Node ispn-2-51789 joined the cluster&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we will connect to the cluster using the CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ docker run -it --rm infinispan/server /opt/infinispan/bin/cli.sh
[disconnected]&amp;gt; connect http://172.17.0.2:11222
Username: admin
Password: *****
[ispn-1-42736@infinispan//containers/DefaultCacheManager]&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we will create a distributed cache and select it for future operations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[ispn-1-42736@infinispan//containers/DefaultCacheManager]&amp;gt; create cache --template=org.infinispan.DIST_SYNC distcache
[ispn-1-42736@infinispan//containers/DefaultCacheManager]&amp;gt; cache distcache
[ispn-1-42736@infinispan//containers/DefaultCacheManager/caches/distcache]&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s insert some data now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[ispn-1-42736@infinispan//containers/DefaultCacheManager/caches/distcache]&amp;gt; put k1 v1
[ispn-1-42736@infinispan//containers/DefaultCacheManager/caches/distcache]&amp;gt; put k2 v2
[ispn-1-42736@infinispan//containers/DefaultCacheManager/caches/distcache]&amp;gt; ls
k2
k1
[ispn-1-42736@infinispan//containers/DefaultCacheManager/caches/distcache]&amp;gt; get k1
v1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let’s use the RESTful API to fetch one of the entries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ curl --digest -u admin:admin http://localhost:11222/rest/v2/caches/distcache/k2
v2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we didn’t map persistent volumes to our containers, both the cache and its contents will be lost when we terminate the containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next blog post we will look at configuration and persistence in more depth.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/11/01/infinispan-10/</id>
<title>Infinispan 10.0.1.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-11-01T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/11/01/infinispan-10/" rel="alternate" type="text/html" />
<author>
<name>Ryan Emerson</name>
</author>
<category term="final"></category>
<category term="release"></category>
<summary>
We are pleased to announce the availability of Infinispan 10.0.1.Final, which contains several bug fixes.


The release notes can be found here.


As usual you can ask questions on the
forum,
StackOverflow
and interactively on our Zulip Chat.
Please report any bugs you find on our
Issue Tracker...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are pleased to announce the availability of Infinispan 10.0.1.Final, which contains several bug fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release notes can be found &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12343101&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual you can ask questions on the
&lt;a href=&quot;https://developer.jboss.org/en/infinispan/content&quot;&gt;forum&lt;/a&gt;,
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;
and interactively on our &lt;a href=&quot;http://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt;.
Please report any bugs you find on our
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN/summary&quot;&gt;Issue Tracker&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/10/28/infinispan-10-final/</id>
<title>Infinispan 10.0.0.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-10-28T12:00:00+00:00</published>
<link href="//infinispan.org/blog/2019/10/28/infinispan-10-final/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="final"></category>
<category term="release"></category>
<summary>
Dear Infinispan community,


We are very pleased to announce the release of Infinispan 10.0 codenamed “Chupacabra”!
We have been busy making many changes over the last months.




Server


Infinispan 10 features a brand new server, replacing the WildFly-based server we’ve had since 5.3 with a smaller, leaner implementation. Here are the highlights:




Reduced disk (50MB vs 170MB) and memory footprint (18MB vs 40MB at boot)


Simpler to configure, since it shares the configuration schema with embedded with server-specific extensions


Single-port design: the Hot Rod, REST and management endpoint are now served through a single port (11222) with automatic protocol detection between HTTP/1.1, HTTP/2 and Hot Rod. The...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very pleased to announce the release of Infinispan 10.0 codenamed “Chupacabra”!
We have been busy making many changes over the last months.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server&quot; /&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10 features a brand new server, replacing the WildFly-based server we’ve had since 5.3 with a smaller, leaner implementation. Here are the highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reduced disk (50MB vs 170MB) and memory footprint (18MB vs 40MB at boot)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simpler to configure, since it shares the configuration schema with embedded with server-specific extensions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Single-port design: the Hot Rod, REST and management endpoint are now served through a single port (11222) with automatic protocol detection between HTTP/1.1, HTTP/2 and Hot Rod. The memcached endpoint is handled separately since we don’t implement the binary protocol yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New CLI with data manipulation operations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New REST-based API for administration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security implemented using WildFly Elytron:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hot Rod authentication support for PLAIN, DIGEST-MD5, SCRAM, EXTERNAL, OAUTHBEARER&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP authentication support for BASIC, DIGEST, CLIENT_CERT and TOKEN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Properties, Certificate Store and LDAP realms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with KeyCloak&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches/counters are created and managed dynamically through Hot Rod / REST&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of the amount of restructuring, the web-based Console is not yet available in this release.
We are working on it and it will be included in 10.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rest_endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_rest_endpoint&quot; /&gt;REST Endpoint&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new API (v2) was introduced and users are encouraged to migrate their applications from the old API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The v2 API offers a completely redesigned endpoint, including dozens of new operations. Besides allowing to manage caches, it also covers cache containers, counters, cross-site replication, servers and clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the new API, the REST server is now fully non-blocking and also has better performance than 9.4.x.
It also fully supports authorization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_marshalling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_marshalling&quot; /&gt;Marshalling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal marshalling capabilities of Infinispan have undergone a significant refactoring in 10.0. The marshalling of internal Infinispan objects and user objects are now truly isolated. This means that it’s now possible to configure Marshaller implementations in embedded mode or on the server, without having to handle the marshalling of Infinispan internal classes. Consequently, it’s possible to easily change the marshaller implementation user for user types, in a similar manner to how users of the HotRod client are accustomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a consequence of the above changes, the default marshaller used for marshalling user types is no longer based upon JBoss Marshalling. Instead we now utilise the ProtoStream library to store user types in the language agnostic Protocol Buffers format. The ProtoStream library provides several advantages over jboss-marshalling, most notably it does not make use of reflection and so is more suitable for use in AOT environments such as Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_persistence&quot; /&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The persistence SPI has had some much needed TLC, with several deprecations and additions.
The aim of this work was to ensure that internal Infinispan classes were no longer leaking into the SPI, in order to ensure that custom store implementations only have to be concerned with their data, not internal Infinispan objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stores by default are now segmented when the segmented attribute is not set.
A segmented store allows for greater iteration performance and less memory usage.
This is useful for things such as state transfer and other operations that require an entire view of the cache (iteration, size, mass indexer distributed streams etc).
All of our provided stores now provided being segmented; these include file store, soft index file store, rocks db, jdbc and remote stores.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_container_image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_container_image&quot; /&gt;Container Image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To accommodate our brand new server, Infinispan 10.0 also introduces a completely new container image which is much smaller than the old one (366MB vs 684MB) and supports the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Red Hat’s Minimal Universal Base Image based&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple yaml configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication (Enabled by default)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XSite support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new image can be pulled from any of the following repositories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quay.io/infinispan/server&quot; class=&quot;bare&quot;&gt;https://quay.io/infinispan/server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/infinispan/server&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/infinispan/server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jboss/infinispan-server/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/jboss/infinispan-server/&lt;/a&gt; (deprecated)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_metrics_and_logging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_metrics_and_logging&quot; /&gt;Metrics and Logging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan has adopted the MicroProfile Metrics ver. 2.0.2 specification and uses the SmallRye Metrics implementation. MicroProfile Metrics allows applications to gather various metrics and statistics that provide insights into what is happening inside an Infinispan cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current offering includes both cache container and cache level Gauge type metrics. Histograms and Timers will arrive in the next release of the 10.x stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics can be read remotely at the well-known /metrics REST endpoint and use JSON format or optionally the OpenMetrics format, so that they can be processed, stored, visualized and analyzed by compatible tools such as Prometheus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But rest assured, the existing JMX support for metrics has not been superseded by REST. JMX is still alive and kicking and we plan to continue developing it and have it available on all runtimes that support it (Quarkus being the notable exception).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logging categories for the major subsystems have been introduced (CLUSTER, CONTAINER, PERSISTENCE, SERVER, etc) so that it easier to understand what they refer to.
The server also comes with a JSON logger for easy integration with tools such as Fluentd or the ELK stack.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_quarkus&quot; /&gt;Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan is an official extension in Quarkus!
If you wish to find out more about Quarkus you can find it at &lt;a href=&quot;https://quarkus.io/&quot; class=&quot;bare&quot;&gt;https://quarkus.io/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a very featureful client extension allowing your Quarkus apps to connect to a remote server with lots of the features you are used to: querying, authentication, encryption, counter, dependency injection and others.
We recently added support for protostream based annotation marshalling.
If you are curious you can find the code at &lt;a href=&quot;https://github.com/quarkusio/quarkus/tree/master/extensions/infinispan-client&quot; class=&quot;bare&quot;&gt;https://github.com/quarkusio/quarkus/tree/master/extensions/infinispan-client&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan embedded extension was also just added, but has limited functionality due to its infancy.
Although it will allow you to run an embedded clustered cache in a native executable.
If you are curious you can find the code at &lt;a href=&quot;https://github.com/quarkusio/quarkus/tree/master/extensions/infinispan-embedded&quot; class=&quot;bare&quot;&gt;https://github.com/quarkusio/quarkus/tree/master/extensions/infinispan-embedded&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team has also started adding a standalone project to have a Quarkus based Infinispan Server using Infinispan 10 and newer.
This is still a work in progress, but the new repository can be found at &lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus-server&quot; class=&quot;bare&quot;&gt;https://github.com/infinispan/infinispan-quarkus-server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus has a different release cycle than Infinispan, so watch out for more improvements over the following weeks !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cross_site_replication&quot; /&gt;Cross-Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Async mode cross-site replication received 3 major improvements:
Concurrent requests (i.e. write on different keys for example) will be handled simultaneously instead of sequentially.
Asynchronous mode is now able to detect disconnections between sites and bring the site offline based on &amp;lt;take-offline&amp;gt; configuration (ISPN-10180)
Tracks and exposes some metrics for asynchronous requests (ISPN-9457)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_internals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_internals&quot; /&gt;Internals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dependency_injection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_dependency_injection&quot; /&gt;Dependency Injection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan’s internal dependency-injection has been completely rewritten so that factories, components and dependencies are discovered and resolved at compile time instead of using runtime reflection. This, together with the marshalling changes and recent JGroups changes, paves the way for usage and native compilation with Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_non_blocking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking&quot; /&gt;Non-blocking&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several internal subsystems have been rewritten to be non-blocking, meaning that they will not hold-on to threads while waiting for I/O:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking Hot Rod authentication (ISPN-9841)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking REST endpoint (ISPN-10210)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update internal remote listener code to support non blocking (ISPN-9716)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update internal embedded listeners to be non blocking (ISPN-9715)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passivation throughput is increased as well as these operations are done asynchronously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition cache stores have been made non blocking for the cases of loading an entry and storing into the data container as well write skew checks. With this we should be at a point where we can start consolidating thread pools, so keep a look-out in the upcoming releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed Streams utilizing a terminal operator that returns a single value use non blocking communication methods (ISPN-9813)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_off_heap_storage_improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_off_heap_storage_improvements&quot; /&gt;Off Heap Storage Improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Off Heap has added a few improvements to increase performance and reduce memory usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Iteration imrpovements (ISPN-10574)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removes the need for the address count configuration option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamically resize underlying bucket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reorder bucket iteration to more CPU friendly, less lock acquisiations as well&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StampedLock instead of ReadWriteLock (ISPN-10681)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_expiration_improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_expiration_improvements&quot; /&gt;Expiration Improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cluster Expiration has been improved to only expire entries on the primary node to reduce the amount of concurrent expirations from multiple nodes in the cluster.
Also the amount of concurrent expirations on a single node has been improved for better handling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, expirations are not replicated cross site to reduce chattiness on the cross site link.
Also to note that lifespan works fine without this and max-idle expiration does not work properly with cross site.
So in this case the messages were providing no benefit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_api&quot; /&gt;API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now have a proper sizeAsync method on the Cache interface.
This is both for remote and embedded APIs. This method should be preferred over the current size due to not blocking the invoking thread as well as being able to retrieve the size as a long instead of a int.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configuration&quot; /&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to configure JGroups stacks directly from the Infinispan configuration file.
We use this ability to also allow easily creating multiple stacks (for easy cross-site configuration).
The distribution comes with several pre-built JGroups stacks for cloud environments which you can quickly adapt for your configuration.
Additionally you can extend existing JGroups configurations replacing individual protocols.
This makes it easy, for example, to use a different discovery without worrying about all the other protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_documentation&quot; /&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan community documentation has been going through some big changes over the past year.
The Infinispan 10 release marks the first major step towards adopting a modular structure that supports flexible content for specific use cases.
On top of that we’ve also been putting lots of effort into transforming our documentation set to adhere to the principles of minimalism that put focus on user goals and delivering leaner, more concise content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our 10.0 release also incorporates work to organize content into three main types: task, concept, and reference.
Mapping content to information types makes it easier to write and maintain content by removing worries about style, scope, and other complexities.
Writers can separate documentation into logical units of information that can stand alone and then assemble topics into tutorials, how-to articles, explanations, and reference material.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might also notice some changes to the documentation section of our site and updates to the index page for Infinispan 10 docs.
Hopefully the new layout makes it easier to navigate and find the information you’re looking for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope you find the improvements to the documentation helpful.
As always, we’re keen to get your feedback and would appreciate.
And if you feel like getting involved, see the Contributor’s Guide and start writing Infinispan docs today!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_experimental_features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_experimental_features&quot; /&gt;Experimental features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_reactive_api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_reactive_api&quot; /&gt;Reactive API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First steps to a new Reactive API. This is still a work in progress and the API will see major changes.
We plan on making this API final and default in Infinispan 11.
The new API includes a new API module and a new KeyValueStore Hot Rod client where search, continuous search and Key Value store methods are included&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_removaldeprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removaldeprecations&quot; /&gt;Removal/deprecations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new major release is also an opportunity to do some house-cleaning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_deprecations&quot; /&gt;Deprecations&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deprecate GridFileSystem and org.infinispan.io stream implementations (ISPN-10298)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deprecated Total Order transaction mode (ISPN-10259)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deprecated Externalizer, AdvancedExternalizer and @SerializeWith (ISPN-10280)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_removals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removals&quot; /&gt;Removals&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AtomicMap implementations (ISPN-10230)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deprecated org.infinispan.io classes (ISPN-10297)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;org.infinispan.tools.ConfigurationConverter (ISPN-10231)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compatibility mode (ISPN-10370)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AtomicObjectFactory (ISPN-10414)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C3P0 and Hikari Connection Pools (ISPN-8087)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delta and DeltaAware interfaces (ISPN-8071)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HotRod 1.x support (ISPN-9169)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tree module (ISPN-10054)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed Executor (ISPN-9784)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_it_use_it_ask_us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_get_it_use_it_ask_us&quot; /&gt;Get it, Use it, Ask us!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://infinispan.org/download/&quot;&gt;download&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;report bugs&lt;/a&gt;,
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;chat with us&lt;/a&gt;,
ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_future&quot; /&gt;Future&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that Infinispan 10 is out we plan on delivering a 10.1 release in a couple of months.
10.1 will generally be a polishing release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/07/15/infinispan-1000beta4/</id>
<title>Infinispan 10.0.0.Beta4</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-07-15T03:02:00-07:00</published>
<link href="//infinispan.org/blog/2019/07/15/infinispan-1000beta4/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term="beta"></category>
<category term="release"></category>
<summary>
Dear Infinispan users,


it has been a while since our last release and quite a few things have
been cooking in the Infinispan furnace. Bear in mind that the list below
should just serve as a summary and that dedicated blogs, documentation
and examples will appear in the near future.




Server


Since 5.3, our server has been built on top of WildFly (JBoss AS7 at the
time). WildFly gave us a very solid base, including integration with a
lot of useful components (security, datasources, management etc) but it
also forced us to maintain a large amount of integration code. We have
therefore decided to start from a much leaner base...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;it has been a while since our last release and quite a few things have
been cooking in the Infinispan furnace. Bear in mind that the list below
should just serve as a summary and that dedicated blogs, documentation
and examples will appear in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_server&quot; /&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since 5.3, our server has been built on top of WildFly (JBoss AS7 at the
time). WildFly gave us a very solid base, including integration with a
lot of useful components (security, datasources, management etc) but it
also forced us to maintain a large amount of integration code. We have
therefore decided to start from a much leaner base to build the new
server which, internally we’ve been calling ServerNG, but which we’re
now releasing as &quot;Infinispan Server&quot;. The old WildFly-based server is
still available, but it should be considered &quot;legacy&quot; and will no longer
receive any feature enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new server deserves its own dedicated post, but its main features
are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;smaller size (36MB vs 130MB)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smaller memory footprint (20MB heap usage at boot vs 40MB)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;single-port: the Hot Rod, REST and management endpoint are now served
through a single-port (11222) with automatic protocol detection between
HTTP/1.1, HTTP/2 and Hot Rod. The memcached endpoint is handled
separately since we don’t implement the binary protocol yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;security implemented using
&lt;a href=&quot;https://docs.jboss.org/author/display/WFLY/WildFly+Elytron+Security&quot;&gt;WildFly
Elytron&lt;/a&gt; currently supporting PLAIN, DIGEST-MD5, SCRAM, EXTERNAL mechs
for Hot Rod, BASIC, DIGEST, CLIENT_CERT for REST/HTTP
(OAuth/JWT/GS2/GSSAPI/SPNEGO will be coming in the next releases)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the server configuration extends the embedded configuration scheme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;caches/counters are created and managed dynamically through Hot Rod /
REST.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_marshalling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_marshalling&quot; /&gt;Marshalling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan’s marshalling has received a significant overhaul and it is
now split into three distinct marshallers: Internal, Persistence and
User (&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-7409&quot;&gt;ISPN-7409&lt;/a&gt;
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9621&quot;&gt;ISPN-9621&lt;/a&gt;)
The Persistence marshaller is now based on ProtoBuf allowing for
long-term compatibility of data stored in memory and in cache stores.
The Store Migrator has been updated to allow migration from Infinispan
8.x/9.x cache stores to the new format
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10276&quot;&gt;ISPN-10276&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_core_changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_core_changes&quot; /&gt;Core changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan’s internal dependency-injection has been completely rewritten
so that factories, components and dependencies are discovered and
resolved at compile time instead of using runtime reflection. This,
together with the marshalling changes and recent JGroups changes, paves
the way for usage and native compilation with
&lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_rest&quot; /&gt;REST&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The REST API is continuing its overhaul with the following additions to
the v2 API&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cluster Resource
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10268&quot;&gt;ISPN-10268&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache Resource (&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9772&quot;&gt;ISPN-9772&lt;/a&gt;
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10392&quot;&gt;ISPN-10392&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Counter Resource
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10151&quot;&gt;ISPN-10151&lt;/a&gt;
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10152&quot;&gt;ISPN-10152&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The REST endpoint now fully supports authorization
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-8736&quot;&gt;ISPN-8736&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_reactive_api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_reactive_api&quot; /&gt;Reactive API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first implementation of our new Reactive API have been merged. This
is still work in progress and the API will receive major changes until
the Final release.
The new API includes a new API module and a new KeyValueStore Hot Rod
client where search, continuous search and Key Value store methods are
included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cross_site_replication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cross_site_replication&quot; /&gt;Cross-Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Async mode cross-site replication received 2 major improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;async mode is now able to detect disconnections between sites and
bring the site offline based on &amp;lt;take-offline&amp;gt; configuration
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10180&quot;&gt;ISPN-10180&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;track and exposes the average replication times for asynchronous
requests (&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9457&quot;&gt;ISPN-9457&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_non_blocking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_non_blocking&quot; /&gt;Non-blocking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking Hot Rod authentication
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9841&quot;&gt;ISPN-9841&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking REST endpoint
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10210&quot;&gt;ISPN-10210&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update internal remote listener code to support non blocking
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9716&quot;&gt;ISPN-9716&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update internal embedded listeners to be non blocking
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9715&quot;&gt;ISPN-9715&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_removaldeprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removaldeprecations&quot; /&gt;Removal/deprecations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new major release is also an opportunity to do some house cleaning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deprecations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_deprecations&quot; /&gt;Deprecations&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deprecate GridFileSystem and org.infinispan.io stream implementations
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10298&quot;&gt;ISPN-10298&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deprecated Total Order transaction mode
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10259&quot;&gt;ISPN-10259&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_removals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_removals&quot; /&gt;Removals&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AtomicMap implementations removed
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10230&quot;&gt;ISPN-10230&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove deprecated org.infinispan.io classes
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10297&quot;&gt;ISPN-10297&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove org.infinispan.tools.ConfigurationConverter
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10231&quot;&gt;ISPN-10231&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove compatibility mode
(&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-10370&quot;&gt;ISPN-10370&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are curious you can read the
&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12340951&quot;&gt;detailed
release notes&lt;/a&gt; including all fixed issues.
As usual you can ask questions on the
&lt;a href=&quot;https://developer.jboss.org/en/infinispan/content&quot;&gt;forum&lt;/a&gt;,
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;
and interactively on our &lt;a href=&quot;http://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt;.
Please report any bugs you find on our
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN/summary&quot;&gt;Issue Tracker.&lt;/a&gt;
Going back to our three-week schedule, our next release will be Beta5,
three weeks from now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/07/12/infinispan-operator-030-expands/</id>
<title>Infinispan Operator 0.3.0 expands container and security configuration!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-07-12T02:58:00-07:00</published>
<link href="//infinispan.org/blog/2019/07/12/infinispan-operator-030-expands/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term="release"></category>
<category term="openshift"></category>
<category term="kubernetes"></category>
<category term="operator"></category>
<summary>
Infinispan Operator 0.3.0 is now available with expanded configuration
and security options:




Container Configuration

With this release of the Infinispan Operator, you can configure explicit
CPU and memory limits for individual containers. The defaults
are 0.5 CPUs and 512Mi of memory.


The Operator also lets you pass extra JVM options, which is useful for
tracking native memory consumption or extra GC logging parameters.



Security Configuration

Starting with 0.3.0, credentials are automatically generated for data
connector and management users when you instantiate the Infinispan
Operator.


The default usernames are developer and admin for the data connector
user and management user, respectively.


Generated passwords are stored in Kubernetes
Secret instances.
You can extract the passwords as follows:


For convenience, the default usernames are also stored in the secret.
Using...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Operator 0.3.0 is now available with expanded configuration
and security options:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_container_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_container_configuration&quot; /&gt;Container Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release of the Infinispan Operator, you can configure explicit
CPU and memory limits for individual containers. The defaults
are 0.5 CPUs and 512Mi of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Operator also lets you pass extra JVM options, which is useful for
tracking native memory consumption or extra GC logging parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_security_configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_security_configuration&quot; /&gt;Security Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with 0.3.0, credentials are automatically generated for data
connector and management users when you instantiate the Infinispan
Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default usernames are developer and admin for the data connector
user and management user, respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generated passwords are stored in Kubernetes
&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;Secret&lt;/a&gt; instances.
You can extract the passwords as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For convenience, the default usernames are also stored in the secret.
Using the &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; command line tool, you can
inspect both the username and password values with a single command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to set custom credentials for the data connector and
management users, create Kubernetes Secret instances as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using a Credentials type authentication, the referenced secrets
must contain username and password fields.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_trying_it_out&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_trying_it_out&quot; /&gt;Trying It Out!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to get started with the Infinispan Operator is via the
&lt;a href=&quot;https://github.com/infinispan/infinispan-simple-tutorials/tree/master/operator&quot;&gt;simple
tutorial&lt;/a&gt;. The Operator is compatible with vanilla Kubernetes
environments, such as Minikube, as well as Red Hat OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_available_via_operator_hub&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_available_via_operator_hub&quot; /&gt;Available via Operator Hub&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Install the Infinispan Operator directly from the Operator Hub, which is
available out of the box on all OpenShift 4 versions. If you’re using a
vanilla Kubernertes environment, you might need to install the Operator
Lifecycle Manager before you can install via the Operator Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Operator is also included in the community for Kubernetes
Operators is available
from &lt;a href=&quot;https://operatorhub.io/operator/infinispan&quot;&gt;operatorhub.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_whats_next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_whats_next&quot; /&gt;What’s Next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Operator configuration does not yet provide all capabilities
available for Infinispan servers. We’re working through a process of
configuration specification that distills the server configuration into
a simple, easy to use, set of configuration options. The current
proposal is being discussed openly
&lt;a href=&quot;https://github.com/infinispan/infinispan-operator/pull/77&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10 brings a brand new server that’s no longer based on
WildFly. The Operator 0.x series will remain focused on Infinispan 9.x
server, with Operator 1.x series focusing on Infinispan 10 and
onwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers,
Galder&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/04/15/infinispan-on-tour-march-april-2019/</id>
<title>Infinispan on tour, March-April 2019</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-04-15T04:08:00-07:00</published>
<link href="//infinispan.org/blog/2019/04/15/infinispan-on-tour-march-april-2019/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term=" conference"></category>
<category term="public speaking"></category>
<category term="greach conf"></category>
<category term="breizh camp"></category>
<category term="voxxed days milano"></category>
<summary>
*
*


Infinispan has been on tour!!


 I - Katia Aresti - had the chance to
present 3 talks in 3 different conferences and countries during the last
month:


Breizh Camp 2019 the 22th March, Rennes
(France)





Greach Conf 2019, 29th March, Madrid
(Spain)





Voxxed Days Milano 2019, 13th April,
Milan (Italy)







Breizh Camp


2019 has been BreizhCamp&#8217;s 9th - Code Busters - edition and they
sold-out the conference in a matter of hours (wow).


I did not have the time to attend any talk. Unfortunately, due to my
personal schedule, I arrived on Thursday night, and I was presenting on
Friday after lunch. This was the second time I was giving this
presentation, but I did lot&#8217;s...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*
*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Infinispan has been on tour!!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt; I - &lt;a href=&quot;https://twitter.com/karesti&quot;&gt;Katia Aresti&lt;/a&gt; - had the chance to
present 3 talks in 3 different conferences and countries during the last
month:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.breizhcamp.org/&quot;&gt;Breizh Camp 2019&lt;/a&gt; the 22th March, Rennes
(France)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://www.breizhcamp.org/img/logo.png&quot; alt=&quot;BreizhCamp - 9Ã¨me Ã©dition - 20&quot; width=&quot;21 et 22 Mars 2019 logo&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.greachconf.com/&quot;&gt;Greach Conf 2019&lt;/a&gt;, 29th March, Madrid
(Spain)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://static1.squarespace.com/static/5bbb8964ab1a624b2849c12c/t/5bbb89d3ec212de44fe418ea/1553429592481/?format=1500w&quot; alt=&quot;Greach 2019&quot; width=&quot;200&quot; height=&quot;57&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://voxxeddays.com/milan/&quot;&gt;Voxxed Days Milano 2019&lt;/a&gt;, 13th April,
Milan (Italy)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://voxxeddays.com/milan/wp-content/uploads/sites/47/2018/06/Milano-grey.png&quot; alt=&quot;VoxxedDays Milan&quot; width=&quot;200&quot; height=&quot;55&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_breizh_camp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_breizh_camp&quot; /&gt;Breizh Camp&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2019 has been BreizhCamp’s 9th - Code Busters - edition and they
sold-out the conference in a matter of hours (wow).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did not have the time to attend any talk. Unfortunately, due to my
personal schedule, I arrived on Thursday night, and I was presenting on
Friday after lunch. This was the second time I was giving this
presentation, but I did lot’s of changes since the first time,
including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Big upgrades to my presentation look and feel &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harry-Potterize my
&lt;a href=&quot;https://github.com/karesti/harry-potter-vertx&quot;&gt;Vert.x Clustered
Infinispan Embedded&lt;/a&gt;. An original demo containing more examples of
Vert.x and Infinispan can be found
&lt;a href=&quot;https://github.com/infinispan-demos/vertx-api&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating and live-coding an
&lt;a href=&quot;https://github.com/infinispan-demos/harry-potter-quarkus&quot;&gt;Infinispan
Client/Server + Quarkus Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using
&lt;a href=&quot;https://blog.infinispan.org/2019/04/operator-021-out-with-dns-ping-and.html&quot;&gt;Infinispan
Operator&lt;/a&gt; to create an Infinispan Cluster in
&lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Openshift 4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-VB—​7t2qCfs/XLRiXygkwOI/AAAAAAAACiI/idqpzL07zNsD4_ozwPYvzfIKzM9Lv4jWQCLcBGAs/s1600/Katia_BreizhCamp.jpg&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-VB—​7t2qCfs/XLRiXygkwOI/AAAAAAAACiI/idqpzL07zNsD4_ozwPYvzfIKzM9Lv4jWQCLcBGAs/s400/Katia_BreizhCamp.jpg&quot; alt=&quot;image&quot; width=&quot;400&quot; height=&quot;301&quot; /&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Breizh Camp Code Busters Edition, Photo credit @BreizhCamp 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/thead&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Friday morning I was stressed and I ran my presentation at the hotel.
I arrived at the venue, delivered my talk and headed back to Paris. I
deeply regretted not spending more time hanging out with other speakers
and attendees, but I really couldn’t make it this time :(&lt;/p&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_greach_conf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_greach_conf&quot; /&gt;Greach Conf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Greach Conf is a lovely conference held in Madrid (Spain) for several
years now. A 100% international conference, it has been organized by the
Groovy community. &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year they have changed the conference lineup adding an
Android/Testing track and focusing on a bigger spectrum of technologies
around the JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-4m4cQgITzVo/XLRd37LS7wI/AAAAAAAAChw/u1Locua7ykEBUMoP0EfQW8p2dN1VsxsiQCLcBGAs/s1600/Katia_Greach.jpg&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-4m4cQgITzVo/XLRd37LS7wI/AAAAAAAAChw/u1Locua7ykEBUMoP0EfQW8p2dN1VsxsiQCLcBGAs/s400/Katia_Greach.jpg&quot; alt=&quot;image&quot; width=&quot;400&quot; height=&quot;266&quot; /&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Greach Conf 2019. Photo credit José Miguel Rodríguez&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/thead&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I learned a bunch of new things, including content related to
&lt;a href=&quot;https://sdkman.io/&quot;&gt;SDKMan!&lt;/a&gt;, &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;, the future of
&lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt; and of course,
&lt;a href=&quot;https://micronaut.io/&quot;&gt;Micronaut&lt;/a&gt;. As the principal maintainer of
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Spring-Boot and
Infinispan integration&lt;/a&gt;, Micronaut felt new and familiar at the same
time. I really enjoyed the workshop delivered by
&lt;a href=&quot;https://twitter.com/alvaro_sanchez&quot;&gt;Alvaro Sánchez&lt;/a&gt; who will be in
&lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Devoxx France&lt;/a&gt; this week. The framework &lt;strong&gt;is
really impressive&lt;/strong&gt;. Give it a try!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;You will find on Twitter a complete thread about my Greach Conf
impressions:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coming back to Paris after 3 amazing days in Madrid as speaker and
attendee at
&lt;a href=&quot;https://twitter.com/greachconf?ref_src=twsrc%5Etfw&quot;&gt;@greachconf&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/hashtag/greach?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#greach&lt;/a&gt;
opening a thread 👇🏻&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;— Katia Aresti (@karesti)
&lt;a href=&quot;https://twitter.com/karesti/status/1112041858270748672?ref_src=twsrc%5Etfw&quot;&gt;30
mars 2019&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_voxxed_days_milano&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_voxxed_days_milano&quot; /&gt;Voxxed Days Milano&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voxxed Days Milano (Italy) was organizing the first edition this year
and I really loved this conference in every aspect of it! Thanks,
&lt;a href=&quot;https://twitter.com/mariofusco&quot;&gt;Mario Fusco&lt;/a&gt; and all the team involved
for making it possible!&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-e6wRSpBEK20/XLRgR20WmkI/AAAAAAAACh8/pREi8mad0ikM2KAjzYB57moGyjXXw3_mQCLcBGAs/s1600/Katia_VoxxedMilano.jpg&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-e6wRSpBEK20/XLRgR20WmkI/AAAAAAAACh8/pREi8mad0ikM2KAjzYB57moGyjXXw3_mQCLcBGAs/s400/Katia_VoxxedMilano.jpg&quot; alt=&quot;image&quot; width=&quot;400&quot; height=&quot;194&quot; /&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Voxxed Days Milano - Photo credit Sanne Grinovero &lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/thead&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve written a full thread on Twitter with my impressions. You can find
it attached to the tweet where I share &lt;strong&gt;all the content I’ve used in
Greach Conf, BreizhCamp and Voxxed Days Milano:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My presentation content
&lt;a href=&quot;https://twitter.com/hashtag/VDM19?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#VDM19&lt;/a&gt;
is available!
&lt;a href=&quot;https://twitter.com/VoxxedMilano?ref_src=twsrc%5Etfw&quot;&gt;@VoxxedMilano&lt;/a&gt; !
Thanks for attending!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code of
&lt;a href=&quot;https://twitter.com/vertx_project?ref_src=twsrc%5Etfw&quot;&gt;@vertx_project&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/Infinispan?ref_src=twsrc%5Etfw&quot;&gt;@Infinispan&lt;/a&gt;
embeddedhttps://t.co/KYNUJRzauU&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code of
&lt;a href=&quot;https://twitter.com/QuarkusIO?ref_src=twsrc%5Etfw&quot;&gt;@QuarkusIO&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/Infinispan?ref_src=twsrc%5Etfw&quot;&gt;@Infinispan&lt;/a&gt;
client/serverhttps://t.co/9TV9tPBaeI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deck: &lt;a href=&quot;https://t.co/HR8nMR7xlL&quot; class=&quot;bare&quot;&gt;https://t.co/HR8nMR7xlL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;— Katia Aresti (@karesti)
&lt;a href=&quot;https://twitter.com/karesti/status/1117012866354307072?ref_src=twsrc%5Etfw&quot;&gt;13
avril 2019&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Thanks to Breizh Camp, Greach Conf and Voxxed Days Milano for the
opportunity to share around distributed caches and for the amazing time
I’ve had during this month in each of the conferences.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tour is now over for a while but will continue before summer. I
will be presenting this talk (with upgrades, so stay tuned) in
&lt;a href=&quot;https://devfest.gdglille.org/&quot;&gt;Dev Fest Lille in June 2019&lt;/a&gt; (France), in
&lt;a href=&quot;https://comunidadcode.com/&quot;&gt;Comunidad CODE (Virtual talk)&lt;/a&gt; and
&lt;a href=&quot;https://www.meetup.com/fr-FR/Software-Crafters-Bilbao/&quot;&gt;Software Crafters
Bilbao&lt;/a&gt; in Spanish.&lt;/p&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_devoxx_france&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_devoxx_france&quot; /&gt;&lt;strong&gt;Devoxx France &lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Devoxx France&lt;/a&gt; is taking place this week in
Paris. &lt;strong&gt;I will be there,&lt;/strong&gt; so if you want to chat about Distributed
caches, Datagrids, NoSQL Key-Value databases, or integration with your
favorite framework &lt;strong&gt;feel free to reach me on twitter&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are lot’s of &lt;strong&gt;new features and Reactive APIs to be done for
Infinispan 10&lt;/strong&gt;, so my main focus will be there for a bit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay Tuned And Happy Coding!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/04/08/operator-021-out-with-dns-ping-and/</id>
<title>Operator 0.2.1 out with DNS ping and expanded customizations</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-04-08T01:00:00-07:00</published>
<link href="//infinispan.org/blog/2019/04/08/operator-021-out-with-dns-ping-and/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term=" release"></category>
<category term="openshift"></category>
<category term="operator"></category>
<category term="beta release"></category>
<summary>
We&#8217;ve just completed the release of the Infinispan Operator version
0.2.1. In this second minor release, we&#8217;ve added the following
features:




DNS Cluster Discovery

Cluster nodes now discover each other using DNS ping, which uses name
lookups. Each node publishes a headless service which they use to locate
each other. Previously, Kubernetes APIs were queried to discover other
nodes, but this required administrator rights. DNS ping does not require
admin permissions.



Configurable Image

The Infinispan server image used by the operator is now configurable,
e.g.



Configurable XML

You can now provide their own custom Infinispan server XML referencing
an existing ConfigMap:


Note that this example requires a ConfigMap with the XML file to be
created before hand.



Next...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve just completed the release of the Infinispan Operator version
0.2.1. In this second minor release, we’ve added the following
features:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_dns_cluster_discovery&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_dns_cluster_discovery&quot; /&gt;DNS Cluster Discovery&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cluster nodes now discover each other using DNS ping, which uses name
lookups. Each node publishes a headless service which they use to locate
each other. Previously, Kubernetes APIs were queried to discover other
nodes, but this required administrator rights. DNS ping does not require
admin permissions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configurable_image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configurable_image&quot; /&gt;Configurable Image&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan server image used by the operator is now configurable,
e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configurable_xml&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_configurable_xml&quot; /&gt;Configurable XML&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now provide their own custom Infinispan server XML referencing
an existing ConfigMap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this example requires a ConfigMap with the XML file to be
created before hand.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_next_steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_next_steps&quot; /&gt;Next Steps&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re already working on version 0.3.0, and in parallel we’ve been
working on our first OperatorHub submission. We hope to have some news
for you very soon :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers,
Galder&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/04/05/infinispan-spring-boot-starter-215final/</id>
<title>Infinispan Spring Boot Starter 2.1.5.Final and 1.0.7.Final are out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-04-05T02:48:00-07:00</published>
<link href="//infinispan.org/blog/2019/04/05/infinispan-spring-boot-starter-215final/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term="release"></category>
<category term="spring boot"></category>
<summary>
Dear Infinispan and Spring Boot users,


We have just
released Infinispan
Spring Boot Starter 2.1.5.Final and 1.0.7.Final.




2.1.5.Final

*
* 2.1.5.Final is using Infinispan 9.4.11.Final and Spring-Boot
2.1.4.RELEASE.


Important Spring-Boot bug fix

Previous versions of Spring-Boot 2.1.x contained a bug related to the
multi-release jars. Infinispan
contains multi-release jars, in consequence, we could not run our
applications using java -jar with Java 11 (Java 8 worked fine). For
additional explanations, read
here.
Spring-Boot team has fixed
this bug and
released the correction in Spring-Boot 2.1.4.RELEASE, along with
many
other features and bug fixes, so consider upgrading soon.



Statistics on Client/Server mode and Actuator

Statistics configuration in client/server mode for the client evolved in
the latest Infinispan versions. As a remainder, to activate actuator
statistics in client/server mode :
"Configure 'infinispan.remote.statistics=true' in the",
application.properties
or
- Configure ''infinispan.client.hotrod.statistics=true" in the
hotrod-client.properties
or
-...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have just
released &lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan
Spring Boot Starter&lt;/a&gt; &lt;strong&gt;2.1.5.Final &lt;/strong&gt;and &lt;strong&gt;1.0.7.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_2_1_5_final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_2_1_5_final&quot; /&gt;&lt;strong&gt;2.1.5.Final&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*
* &lt;strong&gt;2.1.5.Final&lt;/strong&gt; is using&lt;strong&gt; Infinispan 9.4.11.Final&lt;/strong&gt; and &lt;strong&gt;Spring-Boot
2.1.4.RELEASE&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_important_spring_boot_bug_fix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_important_spring_boot_bug_fix&quot; /&gt;&lt;strong&gt;Important Spring-Boot bug fix&lt;/strong&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previous versions of Spring-Boot 2.1.x contained a bug related to the
&lt;a href=&quot;https://openjdk.java.net/jeps/238&quot;&gt;multi-release jars&lt;/a&gt;. Infinispan
contains multi-release jars, in consequence, we could not run our
applications using java -jar with Java 11 (Java 8 worked fine). For
additional explanations, read
&lt;a href=&quot;https://stackoverflow.com/questions/54635814/why-does-infinispan-fail-with-noclassdeffounderror-on-spring-boot-java-11&quot;&gt;here&lt;/a&gt;.
Spring-Boot team has fixed
this &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/15981&quot;&gt;bug&lt;/a&gt; and
released the correction in Spring-Boot 2.1.4.RELEASE, along with
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.1.4.RELEASE&quot;&gt;many
other features and bug fixes&lt;/a&gt;, so consider upgrading soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_statistics_on_clientserver_mode_and_actuator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_statistics_on_clientserver_mode_and_actuator&quot; /&gt;&lt;strong&gt;Statistics on Client/Server mode and Actuator&lt;/strong&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Statistics configuration in client/server mode for the client evolved in
the latest Infinispan versions. As a remainder, to activate actuator
statistics in client/server mode :
&quot;Configure &#39;infinispan.remote.statistics=true&#39; in the&quot;,
&lt;strong&gt;application.properties&lt;/strong&gt;
&lt;span class=&quot;underline&quot;&gt;or&lt;/span&gt;
- Configure &#39;&#39;infinispan.client.hotrod.statistics=true&quot; in the
&lt;strong&gt;hotrod-client.properties&lt;/strong&gt;
&lt;span class=&quot;underline&quot;&gt;or&lt;/span&gt;
- Configure by code, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;@Bean
public InfinispanRemoteConfigurer infinispanRemoteConfigurer() \{
    return () → new
ConfigurationBuilder().statistics().enable().build();
}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;===== JMX&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to use Infinispan and JMX, for example on Client/Server
mode, set the &#39;jmx&#39; property &#39;true&#39; as explained above with the
&#39;statistics&#39; property. However, you might get
a javax.management.InstanceAlreadyExistsException because both
Infinispan and Spring will try to register the MXBean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The correction will land on the next starter release. If you need to
avoid this error today, you can tell Spring-Boot not to register the
bean with the following code (Thanks Stéphane Nicoll for the tip!):&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_testcontainers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_testcontainers&quot; /&gt;Testcontainers&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version includes an integration test using
&lt;a href=&quot;https://testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt;,
&lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit5&lt;/a&gt; and the
&lt;a href=&quot;https://hub.docker.com/r/jboss/infinispan-server&quot;&gt;Infinispan Server&lt;/a&gt;.
Grab a look
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot/blob/90e79a81dd32a6c9462e76bfdfb175e2c751b3f0/infinispan-spring-boot-starter-remote/src/test/java/test/org/infinispan/spring/starter/remote/actuator/RemoteCacheMetricBinderTest.java&quot;&gt;here&lt;/a&gt; if
you are curious.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_1_0_7_final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_1_0_7_final&quot; /&gt;&lt;strong&gt;1.0.7.Final&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*
* &lt;strong&gt;1.0.7.Final&lt;/strong&gt; upgrades to &lt;strong&gt;1.5.19.RELEASE&lt;/strong&gt; and Infinispan
&lt;strong&gt;9.4.11.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;⭐ Don’t forget to &lt;strong&gt;star&lt;/strong&gt; the project in
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;GitHub&lt;/a&gt; if you like
the starter! ⭐&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find these releases in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/03/07/subatomic-infinspan-client/</id>
<title>Subatomic Infinispan Client</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-03-07T06:08:00-08:00</published>
<link href="//infinispan.org/blog/2019/03/07/subatomic-infinspan-client/" rel="alternate" type="text/html" />
<author>
<name>Unknown</name>
</author>
<category term="quarkus"></category>
<category term="graalvm"></category>
<category term="native"></category>
<category term="substratevm"></category>
<summary>
Today, the Quarkus project was released as a public beta.
https://quarkus.io/ For those of you not familiar, Quarkus allows you to
write your enterprise apps as you have done in the past with
Hibernate/JAX-RS, but also to compile these applications to a Graal-VM
native image. Running in a native image allows for the application to be
started up in mere milliseconds, depending upon the app, all while using
much less memory.


The Infinispan team is proud to announce that you can use the HotRod
Java client in Quarkus and supports being compiled to a native image as
well. This can allow you to startup and connect to a remote...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, the Quarkus project was released as a public beta.
&lt;a href=&quot;https://quarkus.io/&quot; class=&quot;bare&quot;&gt;https://quarkus.io/&lt;/a&gt; For those of you not familiar, Quarkus allows you to
write your enterprise apps as you have done in the past with
Hibernate/JAX-RS, but also to compile these applications to a Graal-VM
native image. Running in a native image allows for the application to be
started up in mere milliseconds, depending upon the app, all while using
much less memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan team is proud to announce that you can use the HotRod
Java client in Quarkus and supports being compiled to a native image as
well. This can allow you to startup and connect to a remote Infinispan
server faster than ever before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want a quick and simple example of how you can get this working
you can take a look at the quick start which can be found at
&lt;a href=&quot;https://github.com/quarkusio/quarkus-quickstarts/tree/master/infinispan-client&quot; class=&quot;bare&quot;&gt;https://github.com/quarkusio/quarkus-quickstarts/tree/master/infinispan-client&lt;/a&gt;.
This example covers configuring the client connection, cache injection
and simple get/put operations as a basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Client Quarkus extension in addition to providing an easy
way to create a Graal-VM native image with Infinispan Client also
provides the following features to help the user get stuff done
quicker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Automatically Inject Important Resources&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;RemoteCache (named)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RemoteCacheManger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CounterManager&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;User based ProtoStream Marshalling&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Querying (Indexed / Non Indexed)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continuous Query&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Near Cache&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Authentication/Authorization&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encryption&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Counters&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details for these features as well as how to configure them can be
found at &lt;a href=&quot;https://quarkus.io/guides/infinispan-client-guide&quot; class=&quot;bare&quot;&gt;https://quarkus.io/guides/infinispan-client-guide&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know of any questions, concerns or suggestions at the
usual places: &lt;a href=&quot;https://developer.jboss.org/en/infinispan/content&quot;&gt;forum&lt;/a&gt;
or &lt;a href=&quot;http://infinispan.zulipchat.com/&quot;&gt;chat&lt;/a&gt;. We expect to continue
enhancing this extension and would love to have any feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/03/06/triple-cachestore-release-cloud-mongodb/</id>
<title>Triple cachestore release: Cloud, MongoDB and Cassandra</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-03-06T07:07:00-08:00</published>
<link href="//infinispan.org/blog/2019/03/06/triple-cachestore-release-cloud-mongodb/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term=" release"></category>
<category term="cache store"></category>
<summary>
Today we present to you a trifecta of cache store releases which align
to Infinispan 9.x




Cassandra Cache Store


The Cassandra cache store now implements the
publishEntries/publishKeys
methods.




Cloud Cache Store


The Cloud cache store uses the Apache jclouds library to store data on
cloud storage providers such as Amazon’s S3, Rackspace’s Cloudfiles or
any other such provider supported by JClouds.
The store has been updated to Infinispan 9.x&#8217;s persistence SPI and uses
jclouds 2.1.x




MongoDB Cache Store


This cache store has also been updated to the Infinispan 9.x persistence
SPI.


You can get documentation and maven coordinates from our
Cache Store page...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we present to you a trifecta of cache store releases which align
to Infinispan 9.x&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cassandra_cache_store&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cassandra_cache_store&quot; /&gt;Cassandra Cache Store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Cassandra cache store now implements the
&lt;a href=&quot;https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/persistence/spi/AdvancedCacheLoader.html#publishEntries(java.util.function.Predicate,boolean,boolean)&quot;&gt;publishEntries/publishKeys&lt;/a&gt;
methods.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cloud_cache_store&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_cloud_cache_store&quot; /&gt;Cloud Cache Store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Cloud cache store uses the Apache jclouds library to store data on
cloud storage providers such as Amazon’s S3, Rackspace’s Cloudfiles or
any other such provider supported by JClouds.
The store has been updated to Infinispan 9.x’s persistence SPI and uses
jclouds 2.1.x&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mongodb_cache_store&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_mongodb_cache_store&quot; /&gt;MongoDB Cache Store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This cache store has also been updated to the Infinispan 9.x persistence
SPI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get documentation and maven coordinates from our
&lt;a href=&quot;http://infinispan.org/cache-store-implementations/&quot;&gt;Cache Store page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/03/05/enhanced-jgroups-configuration/</id>
<title>Enhanced JGroups configuration</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-03-05T05:27:00-08:00</published>
<link href="//infinispan.org/blog/2019/03/05/enhanced-jgroups-configuration/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term=" configuration"></category>
<category term="jgroups"></category>
<summary>
Infinispan uses JGroups as its underlying
clustering layer. In order to configure the finer details of clustering
(discovery, flow control, cross-site, etc) you have to provide a
separate XML file with the desired configuration and reference it from
your Infinispan XML file as follows:


For simple configurations this is usually fine, but configuring complex
setups, such as cross-site replication, means juggling multiple files
(one for the local stack, one for the cross-site stack and one for the
relay configuration).


Starting with Infinispan 10 Alpha2 we have introduced a number of
changes to make your life with JGroups configurations a lot easier.




Default stacks


Infinispan now comes with two pre-declared stacks: tcp and...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan uses &lt;a href=&quot;http://www.jgroups.org/&quot;&gt;JGroups&lt;/a&gt; as its underlying
clustering layer. In order to configure the finer details of clustering
(discovery, flow control, cross-site, etc) you have to provide a
separate XML file with the desired configuration and reference it from
your Infinispan XML file as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For simple configurations this is usually fine, but configuring complex
setups, such as cross-site replication, means juggling multiple files
(one for the local stack, one for the cross-site stack and one for the
relay configuration).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Infinispan 10 Alpha2 we have introduced a number of
changes to make your life with JGroups configurations a lot easier.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_default_stacks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_default_stacks&quot; /&gt;Default stacks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan now comes with two pre-declared stacks: &lt;code&gt;tcp&lt;/code&gt; and &lt;code&gt;udp&lt;/code&gt;.
Using them is as simple as just referencing their names in the
&lt;code&gt;&amp;lt;transport&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_inline_stacks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_inline_stacks&quot; /&gt;Inline stacks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inlining a stack means you can put the JGroups configuration inside the
Infinispan one as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use the full JGroups schema, and by using XML namespaces you get
full validation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stack_inheritance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_stack_inheritance&quot; /&gt;Stack inheritance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the time you want to reuse one of the pre-declared stacks but
just override some of the parameters (e.g. discovery) to suit your
environment. The following example creates a new &lt;code&gt;tcpgossip&lt;/code&gt; stack which
is based on the default tcp stack but replaces the discovery protocol
with &lt;code&gt;TCPGOSSIP&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the above example you can see that we have enhanced the JGroups
protocol declarations with two new attributes: &lt;code&gt;ispn:stack.combine&lt;/code&gt; and
&lt;code&gt;ispn:stack.position&lt;/code&gt; which affect how and where protocol changes are
applied on the parent configuration to obtain a new configuration.
&lt;code&gt;stack.combine&lt;/code&gt; can be one of &lt;code&gt;COMBINE&lt;/code&gt; (the default, possibly
overriding any specified attributes), &lt;code&gt;REPLACE&lt;/code&gt; (which completely
replaces the protocol and resets all attributes), &lt;code&gt;REMOVE&lt;/code&gt; (removes the
protocol) and &lt;code&gt;INSERT_AFTER&lt;/code&gt; (which places this protocol in the stack
immediately after the protocol specified by &lt;code&gt;stack.position&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_multiple_stacks_and_cross_site&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_multiple_stacks_and_cross_site&quot; /&gt;Multiple stacks and Cross-site&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The inline configuration really shows its usefulness in cross-site
configurations. In fact, the JGroups stack declaration has been extended
with a special element which replaces the need for a separate relay XML
file and can reference other stacks just by name. The following
configuration uses the default &lt;code&gt;udp&lt;/code&gt; stack for the local cluster
transport and uses the default &lt;code&gt;tcp&lt;/code&gt; stack for connecting to a remote
site:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having the entire configuration in a single place greatly simplifies
management. Of course you can combine all of the above features to
obtain the configuration you need for your environment. You can find
more details and examples in the
&lt;a href=&quot;http://infinispan.org/docs/dev/user_guide/user_guide.html#cache_configuration_clustered&quot;&gt;documentation&lt;/a&gt;.
Enjoy !
Tristan&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/03/04/first-openshfit-operator-pre-release/</id>
<title>First OpenShift Operator pre-release for Infinispan is here!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-03-04T01:14:00-08:00</published>
<link href="//infinispan.org/blog/2019/03/04/first-openshfit-operator-pre-release/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term=" release"></category>
<category term="openshift"></category>
<category term="operator"></category>
<category term="beta"></category>
<summary>
Infinispan Operator
is a new method of packaging, deploying and managing Infinispan clusters
on OpenShift. You can think of the Infinispan Operator as the runtime
that manages Infinispan clusters on OpenShift.


We&#8217;ve just done our first Infinispan Operator pre-release, version
0.1.0, which allows you to easily boot up an Infinispan cluster on
OpenShift.


Using the operator is as simple as installing the Infinispan Operator
(requires admin access) on OpenShift, and then create a YAML descriptor
that defines the Infinispan cluster. The example below shows how to
create a 3-node Infinispan cluster:


And then call:


$ oc apply -f example-infinispan.yaml


A more detailed tutorial on using the Infinispan Operator can be found
here.
We highly recommend...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jboss/infinispan-operator&quot;&gt;Infinispan Operator&lt;/a&gt;
is a new method of packaging, deploying and managing Infinispan clusters
on OpenShift. You can think of the Infinispan Operator as the runtime
that manages Infinispan clusters on OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve just done our first Infinispan Operator pre-release, version
0.1.0, which allows you to easily boot up an Infinispan cluster on
OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the operator is as simple as installing the Infinispan Operator
(requires admin access) on OpenShift, and then create a YAML descriptor
that defines the Infinispan cluster. The example below shows how to
create a 3-node Infinispan cluster:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;$ oc apply -f example-infinispan.yaml&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A more detailed tutorial on using the Infinispan Operator can be found
&lt;a href=&quot;https://github.com/infinispan/infinispan-simple-tutorials/tree/master/operator&quot;&gt;here&lt;/a&gt;.
We highly recommend you give it a go and let us know what you think.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the next few versions we’ll be adding more features that make the
most of the capabilities the
&lt;a href=&quot;https://coreos.com/blog/introducing-operator-framework&quot;&gt;Operator
framework&lt;/a&gt; offers to automatically manage the health and status of
running Infinispan clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please also note that as we work towards the 1.0 release, some things
might change :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers
Galder&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/02/22/infinispan-spring-boot-starter-214final/</id>
<title>Infinispan Spring Boot Starter 2.1.4.Final is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-02-22T04:06:00-08:00</published>
<link href="//infinispan.org/blog/2019/02/22/infinispan-spring-boot-starter-214final/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term="release"></category>
<category term="spring boot"></category>
<summary>
Dear Infinispan and Spring Boot users,


We have just
released Infinispan
Spring Boot 2.1.4.Final.


2.1.4.Final is using the last Infinispan Release 9.4.8.Final and
Spring-Boot 2.1.3.RELEASE.


You can find this release in the maven central repository.


Please report any issues in
our issue tracker and join the
conversation in our Zulip Chat to
shape up our next release.


Enjoy,


The Infinispan Team...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have just
released &lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan
Spring Boot&lt;/a&gt; &lt;strong&gt;2.1.4.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.4.Final&lt;/strong&gt; is using &lt;strong&gt;the last Infinispan Release 9.4.8.Final&lt;/strong&gt; and
&lt;strong&gt;Spring-Boot 2.1.3.RELEASE&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find this release in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/02/21/infinispan-1000beta2-and-948/</id>
<title>Infinispan 10.0.0.Beta2 and 9.4.8</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-02-21T08:31:00-08:00</published>
<link href="//infinispan.org/blog/2019/02/21/infinispan-1000beta2-and-948/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term=" beta"></category>
<category term="release"></category>
<category term="final"></category>
<summary>
Hello Infinispan users,


What ? You&#8217;re wondering where Beta1 is ? And what happened to 9.4.7 ?
Unfortunately, those releases, while tagged and available on your
closest Maven Central mirror will only work with Java 11, so we had to
rebuild and re-release.


So, without further ado, I give you 10.0.0.Beta2 and 9.4.8.Final.


The first change I should outline is one that will impact you if you are
building Infinispan from source. The previous build structure required
having both JDK 8 and JDK 11 in order to compile a release which worked
on both. In order to simplify the build process, as well as ensuring
that the output is always...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello Infinispan users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What ? You’re wondering where Beta1 is ? And what happened to 9.4.7 ?
Unfortunately, those releases, while tagged and available on your
closest Maven Central mirror will only work with Java 11, so we had to
rebuild and re-release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, without further ado, I give you 10.0.0.Beta2 and 9.4.8.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first change I should outline is one that will impact you if you are
building Infinispan from source. The previous build structure required
having both JDK 8 and JDK 11 in order to compile a release which worked
on both. In order to simplify the build process, as well as ensuring
that the output is always consistent we now require Java 11 only. Don’t
worry: the resulting binaries will still work on Java 8 and greater.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_10_0_0_beta2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_10_0_0_beta2&quot; /&gt;10.0.0.Beta2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first beta of our next major release contains a number of
enhancements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9847&quot;&gt;ISPN-9847&lt;/a&gt;] - Extend
configuration to allow inline JGroups configuration and inheritance
[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9699&quot;&gt;ISPN-9699&lt;/a&gt;] - Cluster member
owning no data
[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-8124&quot;&gt;ISPN-8124&lt;/a&gt;] - ServerNG:
Initial implementation&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will soon be posting about these features individually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The work on persistent storage long-term compatibility is progressing
with
[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9845&quot;&gt;ISPN-9845&lt;/a&gt;] - Stop exposing
InternalMetadata via the persistence SPI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-4075&quot;&gt;ISPN-4075&lt;/a&gt;] - State transfer
should preserve the creation timestamp of entries&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you were still using the old Distributed Executor, that has been
finally removed in
[&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9784&quot;&gt;ISPN-9784&lt;/a&gt;] - Remove
Distributed Executor&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_9_4_8_final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_9_4_8_final&quot; /&gt;9.4.8.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our latest point release contains lots of bug fixes and minor
enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual you can ask questions on the
&lt;a href=&quot;https://developer.jboss.org/en/infinispan/content&quot;&gt;forum&lt;/a&gt;,
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest&quot;&gt;StackOverflow&lt;/a&gt;
and interactively on our &lt;a href=&quot;http://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt;.
Please report any bugs you find on our
&lt;a href=&quot;https://issues.jboss.org/projects/ISPN/summary&quot;&gt;Issue Tracker&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/01/31/infinispan-spring-boot-starter-213final/</id>
<title>Infinispan Spring Boot Starter 2.1.3.Final is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-01-31T08:55:00-08:00</published>
<link href="//infinispan.org/blog/2019/01/31/infinispan-spring-boot-starter-213final/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term=" release"></category>
<category term="spring boot"></category>
<summary>
Dear Infinispan and Spring Boot users,


We have just
released Infinispan
Spring Boot 2.1.3.Final.


2.1.3.Final is using the last Infinispan Release 9.4.6.Final and
contains some bug fixes related to Actuator integration.


You can find this release in the maven central repository.


Please report any issues in
our issue tracker and join the
conversation in our Zulip Chat to
shape up our next release.


Enjoy,


The Infinispan Team...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have just
released &lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan
Spring Boot&lt;/a&gt; &lt;strong&gt;2.1.3.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.3.Final&lt;/strong&gt; is using &lt;strong&gt;the last Infinispan Release 9.4.6.Final&lt;/strong&gt; and
contains some bug fixes related to Actuator integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find this release in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/01/28/1000alpha3-and-946final/</id>
<title>10.0.0.Alpha3 and 9.4.6.Final</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-01-28T01:35:00-08:00</published>
<link href="//infinispan.org/blog/2019/01/28/1000alpha3-and-946final/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term=" release"></category>
<category term="alpha"></category>
<summary>
Hey there,


the Infinispan team has cooked two releases for you today:




10.0.0.Alpha3


This release contains 3 features:




[ISPN-4075] - State transfer should preserve the creation timestamp of
entries


[ISPN-9320] - Automatic hot rod client version selection


[ISPN-9625] - Make clustered locks configuration possible by XML


[ISPN-9771] - Support for configuration in JSON format




We&#8217;ve also started removing code which was deprecated in the past, so
check the
upgrading
document to see what you need to adapt in your application. This
document will receive further changes during the 10.0 cycle.


The
complete list of issues resolved in 10.0.0.Alpha3.


Some other features are in the works and should be landing during the
beta period. Check the
first
of the alpha...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hey there,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the Infinispan team has cooked two releases for you today:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_10_0_0_alpha3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_10_0_0_alpha3&quot; /&gt;10.0.0.Alpha3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains 3 features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-4075] - State transfer should preserve the creation timestamp of
entries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9320] - Automatic hot rod client version selection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9625] - Make clustered locks configuration possible by XML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9771] - Support for configuration in JSON format&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve also started removing code which was deprecated in the past, so
check the
&lt;a href=&quot;http://infinispan.org/docs/dev/upgrading/upgrading.html&quot;&gt;upgrading
document&lt;/a&gt; to see what you need to adapt in your application. This
document will receive further changes during the 10.0 cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12339174&quot;&gt;The
complete list of issues resolved in 10.0.0.Alpha3.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some other features are in the works and should be landing during the
beta period. Check the
&lt;a href=&quot;https://blog.infinispan.org/2018/11/the-road-to-infinispan-10-alpha1.html&quot;&gt;first
of the alpha posts&lt;/a&gt; to learn more about the new stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_9_4_6_final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_9_4_6_final&quot; /&gt;9.4.6.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The stabilization of 9.4 continues with this micro release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Highlights are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-7889] - BaseDistributionInterceptor.remoteGet may cause
concurrency issues
[ISPN-8889] - Data race in NonTxInvocationContext&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9873] - Remove listeners when the lock is removed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9822] - BasicComponentRegistryImpl fails with security manager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ISPN-9819] - Improve Spring-Session events handling in remote and
embedded&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12340282&quot;&gt;The
complete list of issues resolved in 9.4.6.Final.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in our
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2019/01/15/infinispan-spring-boot-starter-212final/</id>
<title>Infinispan Spring Boot Starter 2.1.2.Final is out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2019-01-15T01:52:00-08:00</published>
<link href="//infinispan.org/blog/2019/01/15/infinispan-spring-boot-starter-212final/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term=" release"></category>
<category term="spring"></category>
<category term="spring boot"></category>
<summary>
Dear Infinispan and Spring Boot users,


We have just released
Infinispan Spring
Boot 2.1.2.Final.


2.1.2.Final is using Spring Boot 2.1.2.RELEASE and contains some bug
fixes related to JCache and Actuator integration.


The starter is now using Infinispan&#8217;s last stable release:
9.4.5.Final.


You can find this release in the maven central repository.


Please report any issues in
our issue tracker and join the
conversation in our Zulip Chat to
shape up our next release.


Enjoy,


The Infinispan Team...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have just released
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan Spring
Boot&lt;/a&gt; &lt;strong&gt;2.1.2.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.2.Final&lt;/strong&gt; is using &lt;strong&gt;Spring Boot 2.1.2.RELEASE&lt;/strong&gt; and contains some bug
fixes related to JCache and Actuator integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The starter is now using Infinispan’s last stable release:
&lt;strong&gt;9.4.5.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find this release in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2018/12/11/infinispan-spring-boot-211final-and/</id>
<title>Infinispan Spring Boot Starter 2.1.1.Final and 1.0.4.Final are out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2018-12-11T04:43:00-08:00</published>
<link href="//infinispan.org/blog/2018/12/11/infinispan-spring-boot-211final-and/" rel="alternate" type="text/html" />
<author>
<name>Katia Aresti</name>
</author>
<category term=" release"></category>
<category term="spring-session"></category>
<category term="spring"></category>
<category term="spring boot"></category>
<summary>
Dear Infinispan and Spring Boot users,


We have just released
Infinispan Spring
Boot 2.1.1.Final and 1.0.4.Final.


1.0.4.Final is using Spring Boot 1.5.17.RELEASE


2.1.1.Final is using Spring Boot 2.1.1.RELEASE 


Both starters are now using
Infinispan&#8217;s last
stable release: 9.4.4.Final.


9.4.4.Final provides full support to JDK 11, Spring 4
and 5.
Concerning Spring 5, it includes
Spring Session 2.1.2.RELEASE
support.


You can find these releases in the maven central repository.


Please report any issues in
our issue tracker and join the
conversation in our Zulip Chat to
shape up our next release.


Enjoy,


The Infinispan Team...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan and Spring Boot users,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have just released
&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan Spring
Boot&lt;/a&gt; &lt;strong&gt;2.1.1.Final&lt;/strong&gt; and &lt;strong&gt;1.0.4.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1.0.4.Final&lt;/strong&gt; is using &lt;strong&gt;Spring Boot 1.5.17.RELEASE&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.1.Final&lt;/strong&gt; is using &lt;strong&gt;Spring Boot 2.1.1.RELEASE&lt;/strong&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both starters are now using
Infinispan’s &lt;a href=&quot;https://blog.infinispan.org/2018/12/infinispan-944final-and-1000alpha2-out.html&quot;&gt;last
stable release: 9.4.4.Final&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;9.4.4.Final provides full support to &lt;strong&gt;JDK 11,&lt;/strong&gt; Spring 4
&lt;strong&gt;&lt;span class=&quot;underline&quot;&gt;and&lt;/span&gt;&lt;/strong&gt; 5.
Concerning Spring 5, it includes
&lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Spring Session 2.1.2.RELEASE&lt;/a&gt;
support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find these releases in the maven central repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in
our &lt;a href=&quot;https://issues.jboss.org/projects/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2018/12/10/infinispan-944final-and-1000alpha2-out/</id>
<title>Infinispan 9.4.4.Final and 10.0.0.Alpha2 out with Spring 5 support!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2018-12-10T00:05:00-08:00</published>
<link href="//infinispan.org/blog/2018/12/10/infinispan-944final-and-1000alpha2-out/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term=" release"></category>
<category term="alpha"></category>
<summary>
We&#8217;ve just released completed a couple of releases:


Infinispan 9.4.4.Final
(release
notes)




Adds Spring 5 and Spring Boot 2.1 support


Fixes for JDK 11 compatibility. 


Improves Cache#size() performance when using shared cache stores.




Infinispan 10.0.0.Alpha2
(release
notes) contains same fixes as 9.4.4.Final plus




Removes the CLI cache loader


RemoteCache#getBulk methods.




Don&#8217;t forget to checkout the Infinispan 10 road map
blog
post to find out all that&#8217;s coming.


Please report any issues in our
issue tracker and join the
conversation in our Zulip Chat to
shape up our next release.


Cheers,


Galder...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve just released completed a couple of releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 9.4.4.Final
(&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12340019&quot;&gt;release
notes&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adds Spring 5 and Spring Boot 2.1 support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixes for JDK 11 compatibility. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improves Cache#size() performance when using shared cache stores.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10.0.0.Alpha2
(&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12339364&quot;&gt;release
notes&lt;/a&gt;) contains same fixes as 9.4.4.Final plus&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removes the CLI cache loader&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RemoteCache#getBulk methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t forget to checkout the Infinispan 10 road map
&lt;a href=&quot;https://blog.infinispan.org/2018/11/the-road-to-infinispan-10-alpha1.html&quot;&gt;blog
post&lt;/a&gt; to find out all that’s coming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in our
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Galder&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2018/11/21/the-road-to-infinispan-10-alpha1/</id>
<title>The road to Infinispan 10 (Alpha1)</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2018-11-21T00:57:00-08:00</published>
<link href="//infinispan.org/blog/2018/11/21/the-road-to-infinispan-10-alpha1/" rel="alternate" type="text/html" />
<author>
<name>Tristan Tarrant</name>
</author>
<category term=" release"></category>
<category term="final"></category>
<category term="alpha"></category>
<category term="roadmap"></category>
<summary>
Dear all,


Today we are releasing 10.0.0.Alpha1 and 9.4.2.Final.


Infinispan 9.4.2.Final comes with a number of bug fixes and some small
additional features:




ISPN-9655 REST Access Log
headers


ISPN-8144 &amp;
ISPN-9661 Cross-Site
replication statistics


ISPN-9708 Expose the
executor services through JMX


ISPN-9732 Local iteration
optimization with write behind is valid for non shared stores


ISPN-9717 Fix Integer
overflow for lifespan and maxIdle




We have begun working on what will become Infinispan 10. As with all new
major releases, this will come with a number of important changes.




New Server
We are working on a new lightweight server, currently dubbed ServerNG,
which will supersede the current WildFly-based offering. The new server
will have a smaller disk and memory footprint, a new...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear all,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we are releasing 10.0.0.Alpha1 and 9.4.2.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 9.4.2.Final comes with a number of bug fixes and some small
additional features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9655&quot;&gt;ISPN-9655&lt;/a&gt; REST Access Log
headers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-8144&quot;&gt;ISPN-8144&lt;/a&gt; &amp;amp;
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9661&quot;&gt;ISPN-9661&lt;/a&gt; Cross-Site
replication statistics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9708&quot;&gt;ISPN-9708&lt;/a&gt; Expose the
executor services through JMX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9732&quot;&gt;ISPN-9732&lt;/a&gt; Local iteration
optimization with write behind is valid for non shared stores&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9717&quot;&gt;ISPN-9717&lt;/a&gt; Fix Integer
overflow for lifespan and maxIdle&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have begun working on what will become Infinispan 10. As with all new
major releases, this will come with a number of important changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Server&lt;/strong&gt;
We are working on a new lightweight server, currently dubbed &lt;em&gt;ServerNG&lt;/em&gt;,
which will supersede the current WildFly-based offering. The new server
will have a smaller disk and memory footprint, a new RESTful admin
interface, improved security. It will still use familiar components
(Elytron for security, Narayana for transactions, etc) but we hope that
the installation and usability experience will be most improved. A
dedicated blog post will describe in detail what is coming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Long-term Storage Format&lt;/strong&gt;
The persistent storage format will be changed so that it will be easier
to transparently make changes to it without requiring further
exporters/importers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Non-blocking listeners&lt;/strong&gt;
The listener implementation will be replaced with a non-blocking
implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Asynchronous CacheLoader/Store&lt;/strong&gt;
Store operations will be ran in another thread to provide non blocking
for main threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved statistics&lt;/strong&gt;
Infinispan statistics have been traditionally over-simplistic, offering
mostly basic averages for writes and reads. We are going to implement
percentiles on a histogram as well as recording tracing information so
that you will be able to know how much time is being spent in the
various subsystems (clustering, persistence, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New API&lt;/strong&gt;
The current Infinispan API, based around Java’s &lt;em&gt;ConcurrentHashMap&lt;/em&gt;
design, does not offer the flexibility required to support modern
reactive designs as well as the various extensions we’ve added over the
years (counters, multimaps, etc). We are therefore working on a new
modern API design which we will be describing with a number of blog
posts in the near future.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Agroal JDBC Connection Pool&lt;/strong&gt;
We are replacing the JDBC connection pool implementation with
&lt;a href=&quot;https://agroal.github.io/&quot;&gt;Agroal&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes Operators&lt;/strong&gt;
Operators are all the rage in the Kubernetes world, and we are working
on an Infinispan Operator which will take care of managing and
monitoring the health of an Infinispan cluster, handle scale up/scale
down safely, perform upgrades and more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 10.0.0.Alpha1 is the first release from our development
branch. It currently includes the following features on top of what is
in 9.4.2.Final:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9666&quot;&gt;ISPN-9666&lt;/a&gt; Agroal JDBC
Connection pool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ISPN-9688&quot;&gt;ISPN-9688&lt;/a&gt; Internal REST
server modularization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please report any issues in our
&lt;a href=&quot;https://issues.jboss.org/browse/ISPN&quot;&gt;issue tracker&lt;/a&gt; and join the
conversation in our &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Zulip Chat&lt;/a&gt; to
shape up our next release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2018/11/19/quick-start-infinispan-on-kubernetes/</id>
<title>Quick start Infinispan on Kubernetes</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2018-11-19T04:14:00-08:00</published>
<link href="//infinispan.org/blog/2018/11/19/quick-start-infinispan-on-kubernetes/" rel="alternate" type="text/html" />
<author>
<name>Galder Zamarreño</name>
</author>
<category term=" kubernetes"></category>
<category term="minikube"></category>
<summary>
Last week we showed you
how
to easily run Infinispan on top of OpenShift. This week we&#8217;re trying to
do the same on Minikube, a tool that makes it easy to run vanilla
Kubernetes locally.


Although we&#8217;ve already covered the topic in the
past,
we felt the descriptors needed a permanent location and an update to the
latest Infinispan releases. Detailed instructions can be found in
this
repository.


With OpenShift, we took advantage of
Templates
which allow a set of objects to be parameterised.
Templates are OpenShift specific, so Kubernetes does not understand
them. Instead, we provide you with the individual descriptors required
to run Infinispan (Helm chart to come&#8230;&#8203;). This includes:




A
stateful
set


Two services, for
Hot
Rod and
HTTP
REST endpoints)


A
rolebinding so
that Kubernetes...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week we showed you
&lt;a href=&quot;https://blog.infinispan.org/2018/11/the-fastest-path-to-running-infinispan.html&quot;&gt;how
to easily run Infinispan on top of OpenShift&lt;/a&gt;. This week we’re trying to
do the same on Minikube, a tool that makes it easy to run vanilla
Kubernetes locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although we’ve already covered the topic in the
&lt;a href=&quot;https://blog.infinispan.org/2016/08/running-infinispan-cluster-on-kubernetes.html&quot;&gt;past&lt;/a&gt;,
we felt the descriptors needed a permanent location and an update to the
latest Infinispan releases. Detailed instructions can be found in
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes&quot;&gt;this
repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With OpenShift, we took advantage of
&lt;a href=&quot;https://docs.openshift.com/container-platform/3.11/dev_guide/templates.html&quot;&gt;Templates&lt;/a&gt;
which allow a set of objects to be parameterised.
Templates are OpenShift specific, so Kubernetes does not understand
them. Instead, we provide you with the individual descriptors required
to run Infinispan (Helm chart to come…​). This includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/statefulset.yaml&quot;&gt;stateful
set&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two services, for
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/service-hotrod.yaml&quot;&gt;Hot
Rod&lt;/a&gt; and
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/service-http.yaml&quot;&gt;HTTP
REST&lt;/a&gt; endpoints)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/rolebinding.yaml&quot;&gt;rolebinding&lt;/a&gt; so
that Kubernetes API can be queried when forming a cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/secret.yaml&quot;&gt;secret&lt;/a&gt;
for plain authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before applying the descriptors, download and install
&lt;a href=&quot;https://kubernetes.io/docs/setup/minikube/&quot;&gt;Minikube&lt;/a&gt;. Then, set a
profile, select the VM driver, give it enough CPU and memory for your
experiments, and start it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once Minikube it’s running and you have the corresponding kubectl
command line tool installed, simply call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;$ kubectl apply -f .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once all pods are ready, you should verify the 3-node cluster has formed
correctly (find out how in the
&lt;a href=&quot;https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/README.md&quot;&gt;README&lt;/a&gt;
file).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When ready, you can start storing and retrieving data. The HTTP REST
endpoint is particularly useful for these initial tests, to verify
everything works as expected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;$ kubectl exec \
  -it infinispan-server-0 \
  — curl -v -u test:changeme -H &#39;Content-type: text/plain&#39; -d &#39;test&#39;
infinispan-server-http:8080/rest/default/stuff&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;$ kubectl exec -it infinispan-server-1 \
  — curl -v -u test:changeme
infinispan-server-http:8080/rest/default/stuff&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go and try it out and let us know what you think. You can find us on
&lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;this Zulip chat&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers,
Galder&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>//infinispan.org/blog/2018/11/15/hotrod-clients-c-and-c-830final-are-out/</id>
<title>Hotrod clients C++ and C# 8.3.0.Final are out!</title>
<updated>2020-10-20T02:55:14-04:00</updated>
<published>2018-11-15T01:18:00-08:00</published>
<link href="//infinispan.org/blog/2018/11/15/hotrod-clients-c-and-c-830final-are-out/" rel="alternate" type="text/html" />
<author>
<name>rigazilla</name>
</author>
<category term=" c++"></category>
<category term="release"></category>
<category term="final"></category>
<category term="c#"></category>
<summary>
Dear Infinispanners,


The C++ and C# 8.3.0.Final releases are out!


Main features contained in this release are:




Cache Admin Operations: create and remove cache at runtime;


Counters: clusterwide counters;


Transactions: run a list of operations transactionally;


Media Types: use differents media-types to encode (key,value) pairs.




Source code, binaries and docs are available as usual at the links
below.


Thank you for reading,
The Infinispan Team


Release
notes for the 8.3.0 serie
[2] https://github.com/infinispan/cpp-client/tree/8.3.0.Final[C code
for 8.3.0.Final]
[2#] C#
code for 8.3.0.Final...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The C++ and C# 8.3.0.Final releases are out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Main features contained in this release are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cache Admin Operations: create and remove cache at runtime;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Counters: clusterwide counters;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transactions: run a list of operations transactionally;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Media Types: use differents media-types to encode (key,value) pairs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Source code, binaries and docs are available as usual at the links
below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you for reading,
The Infinispan Team&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314125&amp;amp;version=12339951&quot;&gt;Release
notes for the 8.3.0 serie&lt;/a&gt;
[2] https://github.com/infinispan/cpp-client/tree/8.3.0.Final[C code
for 8.3.0.Final]
[2#] &lt;a href=&quot;https://github.com/infinispan/dotnet-client/tree/8.3.0.Final&quot;&gt;C#
code for 8.3.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
